1603006668313:q()
1603007565828:hello_msg <- "Hello R!"print(hello msg)
1603007584734:hello_msg <- "Hello R!"
1603007593691:print (hello_msg)
1603007643430:help(print)
1603007647686:"print"
1603007670714:source('~/OneDrive - 國立台灣大學/R/R learning.R')
1603007724526:install.packages("learnr")
1603008621500:if (!requireNamespace("BiocManager", quietly = TRUE))
1603008621502:install.packages("BiocManager")
1603008626347:BiocManager::install("DEXSeq")
1603008782866:if (!requireNamespace("BiocManager", quietly = TRUE))
1603008782868:install.packages("BiocManager")
1603008782870:BiocManager::install("DESeq2")
1603118547429:taiwanNumberOne <- TRUE
1603118558165:taiwanNumberOne <- TRUE
1603118560120:# 不好的 R 物件命名
1603118560122:Taiwan_Number_One <- TRUE
1603118561389:TaiwanNumberOne <- TRUE
1603118561861:twno1 <- TRUE
1603118562116:# 更多不好的 R 物件命名
1603118562116:T <- FALSE                 # T 是保留字 TRUE
1603118572626:help(iris)  # 查詢資料，也可以使用 ?iris
1603118768826:browseVignettes("DEXSeq")
1603119220514:#install.packages("htmltools")
1603119220523:#library(htmltools)
1603119220526:#source("https://bioconductor.org/biocLite.R")
1603119220527:#biocLite("DESeq2")
1603119220527:library( "DESeq2" )
1603119234594:library(ggplot2)
1603119262326:countsName <- "http://bioconnector.org/workshops/data/airway_scaledcounts.csv"
1603119262335:download.file(countsName, destfile = "airway_scaledcounts.csv", method = "auto")
1603119265280:countData <- read.csv('airway_scaledcounts.csv', header = TRUE, sep = ",")
1603119265422:head(countData)
1603119284070:countsName <- "http://bioconnector.org/workshops/data/airway_scaledcounts.csv"
1603119284078:download.file(countsName, destfile = "airway_scaledcounts.csv", method = "auto")
1603119398722:countData <- read.csv('airway_scaledcounts.csv', header = TRUE, sep = ",")
1603119398741:head(countData)
1603119439157:countData <- read.csv('airway_scaledcounts.csv', header = TRUE, sep = ",")
1603119458490:library( "DESeq2" )
1603124968683:ls
1603125315766:q
1603125320436:q()
1603125475431:help(c)
1603125758631:ibrary('DESeq2')
1603125758644:directory<-"/Users/chrisadore/OneDrive/RNA-seq"
1603125758645:sampleFiles <- grep("counts",list.files(directory),value=TRUE)
1603125758648:sampleFiles
1603125758652:sampleCondition<- c(1,2,3,4)
1603125770305:library('DESeq2')
1603125780872:directory<-"/Users/chrisadore/OneDrive/RNA-seq"
1603125780880:sampleFiles <- grep("counts",list.files(directory),value=TRUE)
1603125780882:sampleFiles
1603125780883:sampleCondition<- c(1,2,3,4)
1603125850703:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1603125850837:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1603125850858:dds<-DESeq(ddsHTSeq)
1603125850861:res<-results(dds)
1603126101370:sampleCondition<- c("DHX8_1.count","DHX8_2.count","DHX8_3.count","DHX8_4.count")
1603126140969:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1603126344647:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1603126344661:list.files(pythonScriptsDir)
1603126485190:directory<-"/Users/chrisadore/OneDrive/RNA-seq"
1603126485199:> sampleFiles <- grep("count",list.files(directory),value=TRUE)
1603126485202:> sampleFiles
1603126513442:library('DESeq2')
1603126513450:directory<-"/Users/chrisadore/OneDrive/RNA-seq"
1603126513452:sampleFiles <- grep("count",list.files(directory),value=TRUE)
1603126513456:sampleFiles
1603126513458:sampleCondition<- c(1,2,3,4)
1603126557269:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1603126557276:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1603126560840:dds<-DESeq(ddsHTSeq)
1603126603373:res<-results(dds)
1603126605580:res<-res[order(res$padj),]
1603126605688:resSig <- res[ which(res$padj < 0.05 ), ]
1603126605694:write.csv(as.data.frame(resSig),
1603127285158:write.csv(as.data.frame(resSig), file="/Users/chrisadore/OneDrive/RNA_Seq/DHX8HTseq.csv")
1603127355465:>sampleCondition<- c(1,2,3,4)
1603127355467:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1603127355476:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1603127357673:dds<-DESeq(ddsHTSeq)
1603127400952:res<-results(dds)
1603127403690:res<-res[order(res$padj),]
1603127403745:resSig <- res[ which(res$padj < 0.05 ), ]
1603127403751:write.csv(as.data.frame(resSig), file="/Users/chrisadore/OneDrive/RNA_Seq/DHX8HTseq.csv")
1603127502546:sampleCondition<- c(1,2,3,4)
1603127502557:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1603127502569:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1603127504499:dds<-DESeq(ddsHTSeq)
1603127546675:res<-results(dds)
1603127731047:res<-res[order(res$padj),]
1603127731130:resSig <- res[ which(res$padj < 0.05 ), ]
1603160438047:sampleCondition<- c("DHX8_1.count", "DHX8_2.count", "DHX8_3.count" ,"DHX8_4.count")
1603160504462:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1603160504482:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1603160513612:dds<-DESeq(ddsHTSeq)
1603160514771:res<-results(dds)
1603160517197:res<-res[order(res$padj),]
1603160517263:resSig <- res[ which(res$padj < 0.05 ), ]
1603160667999:help.search(grep)
1603160805968:help(grep)
1603161781375:if (!requireNamespace("BiocManager", quietly = TRUE))
1603161781399:install.packages("BiocManager")
1603161781505:BiocManager::install("JunctionSeq")
1603164231229:clear
1603164362003:plotMA(dds,ylim=c(-5,5),main="DESeq2")
1603164382366:write.csv(mergecont_siPIAS3sig05,"/Volumes/HPC2016/CSW_RNA_Seq/Deseq2/contr_siPIAS3/contvsKD.resSig05.annoAll.csv")
1603164393124:library('DESeq2')
1603164403086:directory<-"/Volumes/HPC2016/CSW_RNA_Seq/siPIAS3_HTseq_rawcounts/ContvsiPIAS3"
1603164409579:directory<-"/Volumes/HPC2016/CSW_RNA_Seq/siPIAS3_HTseq_rawcounts/ContvsiPIAS3"
1603164412132:sampleFiles <- grep("counts",list.files(directory),value=TRUE)
1603164416962:sampleFiles
1603164421526:sampleCondition<- c("Con","siPIAS3","Con","siPIAS3")
1603164426741:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1603176809281:# Loading packages
1603176809282:#install.packages("pacman")
1603176809283:#library("pacman")
1603176809283:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1603176826912:# Loading packages
1603176826920:#install.packages("pacman")
1603176826920:#library("pacman")
1603176826920:install.packages("pacman")
1603176860108:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1603176895867:yes
1603176899581:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1603177123912:source('~/Downloads/DESeq2.R')
1603177136553:install.packages("pacman")
1603177188900:# Loading data into project(U_D8_041620.Rproj,這次實驗直接開這個project作data)
1603177188910:raw_data <- import(".//Users/chrisadore/OneDrive/RNA-seq/raw_counts_table.csv",format = "csv")
1603177201962:# Loading data into project(U_D8_041620.Rproj,這次實驗直接開這個project作data)
1603177201970:raw_data <- import("./Users/chrisadore/OneDrive/RNA-seq/raw_counts_table.csv",format = "csv")
1603177213037:raw_data <- import("./Users/chrisadore/OneDrive/RNA-seq/raw_counts_table.csv",format = "csv")
1603177223688:raw_data <- import("/Users/chrisadore/OneDrive/RNA-seq/raw_counts_table.csv",format = "csv")
1603177424321:# Loading data into project(U_D8_041620.Rproj,這次實驗直接開這個project作data)
1603177424330:raw_data <- import("/Users/chrisadore/OneDrive/RNA-seq/raw_counts_table.csv",format = "csv")
1603177449804:# Loading data into project(U_D8_041620.Rproj,這次實驗直接開這個project作data)
1603177449812:raw_data <- import("/Users/chrisadore/OneDrive/RNA-seq/raw_counts_table.csv",format = "csv")
1603181509643:list
1603181622193:# Loading data
1603181622195:raw_data <- import("./meta/raw_counts_table.csv",format = "csv")
1603181933302:# Loading data
1603181933311:raw_data <- import("./RNA-seq/DHX8_1.count",format = "csv")
1603182490759:## Loading files
1603182490767:files <- paste0("./raw_count/",grep(".count",list.files("./raw_count/"),value = T))
1603182513548:files
1603182543866:## Loading files
1603182543873:files <- paste0("./RNA-seq/",grep(".count",list.files("./raw_count/"),value = T))
1603182569123:## Loading files
1603182569131:files <- paste0("./RNA-seq/",grep(".count",list.files("./RNA-seq/"),value = T))
1603182578430:files
1603194615737:# Loading data
1603194615740:raw_data <- import("./RNA-seq/DHX8_1.count",format = "csv")
1603194633263:# Loading packages
1603194633271:#install.packages("pacman")
1603194633272:library("pacman")
1603194635772:# Loading data
1603194635780:raw_data <- import("./RNA-seq/DHX8_1.count",format = "csv")
1603194649241:# Loading sample annotation
1603194649250:anno.sample <- import("~/meta/SampleAnnotation.xlsx",format = "xlsx")
1603195057978:help(import)
1603195072961:help("import")
1603195088561:# Loading packages
1603195088569:#install.packages("pacman")
1603195088570:library("pacman")
1603195094065:# Loading data
1603195094072:raw_data <- import("./RNA-seq/DHX8_1.count",format = "csv")
1603195104326:# Loading data
1603195104334:raw_data <- import("~/RNA-seq/DHX8_1.count",format = "csv")
1603195127656:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1603195154968:# Loading data
1603195154976:raw_data <- import("./RNA-seq/DHX8_1.count",format = "csv")
1603195173444:# Loading data
1603195173453:raw_data <- import("~/RNA-seq/DHX8_1.count",format = "csv")
1603195197303:# Loading data
1603195197311:raw_data <- import("~/DHX8_1.count",format = "csv")
1603195205034:# Loading data
1603195205044:raw_data <- import("~/DHX8_1.count",format = "count")
1603195227866:# Loading data
1603195227874:raw_data <- import("OneDrive/DHX8_1.count",format = "csv")
1603195250088:# Loading data
1603195250096:raw_data <- import("~OneDrive/DHX8_1.count",format = "csv")
1603195268636:# Loading data
1603195268644:raw_data <- import("Home/OneDrive/DHX8_1.count",format = "csv")
1603195346625:x<-read.csv("~/raw_counts_table.csv")
1603195411829:x<-read.csv("~/Dropbox/Chu/DHX8/RNA seq/raw_counts_table.csv")
1603244979269:# Loading packages
1603244979270:#install.packages("pacman")
1603244979271:#library("pacman")
1603244979271:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1603244999501:# Loading data
1603244999502:raw_data <- import("./RNA-seq/DHX8_1.count",format = "csv")
1603245152307:## Loading files
1603245152316:files <- paste0("./HTseq/",grep(".count",list.files("./raw_count/"),value = T))
1603245154612:## Making dataFrame
1603245154621:counts.df <- import(files[1],format = "csv")
1603245173887:## Loading files
1603245173895:files <- paste0("./HTseq/",grep(".count",list.files("./HTseq/"),value = T))
1603245175296:## Making dataFrame
1603245175304:counts.df <- import(files[1],format = "csv")
1603245178784:col.index <- 2
1603245179928:for (i in files) {
1603245179937:tmp.df <- import(i,format = "csv")
1603245179937:counts.df[,col.index] <- tmp.df[,2]
1603245179938:col.index <- col.index + 1
1603245179938:}
1603245181563:colnames(counts.df) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1603245184432:## Clean up data
1603245184441:counts.df <- counts.df[-(159134:159138),]
1603245185426:TERRA.counts <- counts.df[159068:159133,]
1603245185938:counts.df <- counts.df[-(159068:159133),]
1603245198962:## Export raw counts table
1603245198963:export(counts.df,"./HTseq/raw_counts_table.csv",format = "csv")
1603245206826:export(TERRA.counts,"./HTseq/TERRA_counts_table.csv",format = "csv")
1603245223722:# Loading data
1603245223730:raw_data <- import("./HTseq/raw_counts_table.csv",format = "csv")
1603245225342:data <- raw_data[,-1]
1603245225856:row.names(data) <- raw_data$Gene_ID
1603246949640:help(paste0)
1603247249062:# 1.creat project,在project下(右下角工具列) creat new folder
1603247249064:# 2.把檔案從Folder拖到new folder中
1603247249064:# 3.用grep匯入到project作統整
1603247249065:#paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1603247249065:#如果不想要有任何分隔符號，可以使用 paste0
1603247249066:## Loading files
1603247249067:files <- paste0("./HTseq/",grep(".count",list.files("./HTseq/"),value = T))
1603247491203:raw_data <- import("./HTseq/raw_counts_table.csv",format = "csv")
1603247499775:## Loading packages
1603247499776:pacman::p_load(rio)
1603247504992:raw_data <- import("./HTseq/raw_counts_table.csv",format = "csv")
1603247518735:# 1.creat project,在project下(右下角工具列) creat new folder
1603247518736:# 2.把檔案從Folder拖到new folder中
1603247518737:# 3.用grep匯入到project作統整
1603247518737:#paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1603247518737:#如果不想要有任何分隔符號，可以使用 paste0
1603247518738:## Loading files
1603247518738:files <- paste0("./HTseq/",grep(".count",list.files("./HTseq/"),value = T))
1603247523968:raw_data <- import("./HTseq/.csv",format = "csv")
1603247549034:## Making dataFrame
1603247549042:counts.df <- import(files[1],format = "csv")
1603247556153:## Making dataFrame
1603247556163:counts.df <- import(files[1],format = "csv")
1603247562449:col.index <- 2
1603247563350:for (i in files) {
1603247563358:tmp.df <- import(i,format = "csv")
1603247563359:counts.df[,col.index] <- tmp.df[,2]
1603247563359:col.index <- col.index + 1
1603247563360:}
1603247564628:colnames(counts.df) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1603247565650:## Clean up data
1603247565650:counts.df <- counts.df[-(159134:159138),]
1603247576451:TERRA.counts <- counts.df[159068:159133,]
1603247579645:counts.df <- counts.df[-(159068:159133),]
1603247580919:## Export raw counts table
1603247580928:export(counts.df,"./HTseq/raw_counts_table.csv",format = "csv")
1603247582042:export(TERRA.counts,"./HTseq/TERRA_counts_table.csv",format = "csv")
1603247596121:# Loading data
1603247596122:raw_data <- import("./HTseq/raw_counts_table.csv",format = "csv")
1603247598435:data <- raw_data[,-1]
1603247600290:row.names(data) <- raw_data$Gene_ID
1603247845912:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603247915804:# 1.creat project,在project下(右下角工具列) creat new folder
1603247915806:# 2.把檔案從Folder拖到new folder中
1603247915806:# 3.用grep匯入到project作統整
1603247915807:#paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1603247915807:#如果不想要有任何分隔符號，可以使用 paste0
1603247915808:## Loading files
1603247915808:files <- paste0("./HTseq/",grep(".count",list.files("./HTseq/"),value = T))
1603247927316:## Making dataFrame
1603247927316:counts.df <- import(files[1],format = "csv")
1603247930674:col.index <- 2
1603248222622:plot(date~cell growth, type="b")
1603248233158:plot(date~cellgrowth, type="b")
1603248415594:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603248471898:## Loading packages
1603248471906:pacman::p_load(rio)
1603248478677:## 1.creat project,在project下(右下角工具列) creat new folder
1603248478686:## 2.把檔案從Folder拖到new folder中
1603248478686:## 3.用grep匯入到project作統整
1603248478687:##paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1603248478687:##如果不想要有任何分隔符號，可以使用 paste0
1603248478688:## Loading files
1603248478689:files <- paste0("./HTseq/",grep(".count",list.files("./HTseq/"),value = T))
1603248497977:## Making dataFrame
1603248497987:counts.df <- import(files[1],format = "csv")
1603248528838:col.index <- 2
1603248570439:for (i in files) {
1603248570447:tmp.df <- import(i,format = "csv")
1603248570447:counts.df[,col.index] <- tmp.df[,2]
1603248570448:col.index <- col.index + 1
1603248570448:}
1603248602306:## Loading packages
1603248602307:pacman::p_load(rio)
1603248603351:## Loading files
1603248603352:files <- paste0("./RNA-seq/",grep(".count",list.files("./RNA-seq/"),value = T))
1603248613093:files
1603248623023:counts.df
1603248635420:col.index <- 2
1603248651339:col.index
1603248665686:tmp.df <- import(i,format = "csv")
1603248669261:for (i in files) {
1603248669269:tmp.df <- import(i,format = "csv")
1603248669269:counts.df[,col.index] <- tmp.df[,2]
1603248669269:col.index <- col.index + 1
1603248669270:}
1603248672956:col.index <- col.index + 1
1603248675686:counts.df[,col.index] <- tmp.df[,2]
1603248772554:files
1603248773085:## Making dataFrame
1603248773094:counts.df <- import(files[1],format = "csv")
1603248780398:## Loading packages
1603248780406:pacman::p_load(rio)
1603248781606:## Loading files
1603248781614:files <- paste0("./RNA-seq/",grep(".count",list.files("./RNA-seq/"),value = T))
1603248782778:files
1603248784475:## Making dataFrame
1603248784484:counts.df <- import(files[1],format = "csv")
1603248811852:## Loading files
1603248811860:files <- paste0("./HTseq//",grep(".count",list.files("./HTseq/"),value = T))
1603248812938:files
1603248827231:## 1.creat project,在project下(右下角工具列) creat new folder
1603248827240:## 2.把檔案從Folder拖到new folder中
1603248827240:## 3.用grep匯入到project作統整
1603248827241:##paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1603248827241:##如果不想要有任何分隔符號，可以使用 paste0
1603248827242:## Loading files
1603248827242:files <- paste0("./HTseq/",grep(".count",list.files("./HTseq/"),value = T))
1603248827933:files
1603248833990:## Making dataFrame
1603248833998:counts.df <- import(files[1],format = "csv")
1603248835753:counts.df
1603248839575:## Making dataFrame
1603248839583:counts.df <- import(files[1],format = "csv")
1603248840090:col.index <- 2
1603248840921:for (i in files) {
1603248840930:tmp.df <- import(i,format = "csv")
1603248840930:counts.df[,col.index] <- tmp.df[,2]
1603248840931:col.index <- col.index + 1
1603248840932:}
1603248848350:colnames(counts.df) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1603249048256:for (i in files) {
1603249048258:tmp.df <- import(i,format = "csv")
1603249048259:counts.df[,col.index] <- tmp.df[,2]
1603249048260:col.index <- col.index + 1
1603249048260:}
1603249057945:## Loading files
1603249057953:files <- paste0("./HTseq//",grep(".count",list.files("./HTseq/"),value = T))
1603249058693:files
1603249060177:## Making dataFrame
1603249060185:counts.df <- import(files[1],format = "csv")
1603249066020:col.index <- 2
1603249066963:for (i in files) {
1603249066971:tmp.df <- import(i,format = "csv")
1603249066972:counts.df[,col.index] <- tmp.df[,2]
1603249066972:col.index <- col.index + 1
1603249066973:}
1603249078004:## Loading files
1603249078005:files <- paste0("./HTseq//",grep(".count",list.files("./HTseq/"),value = T))
1603249088510:files
1603249090623:## Making dataFrame
1603249090624:counts.df <- import(files[1],format = "csv")
1603249107087:col.index <- 2
1603249109970:for (i in files) {
1603249109979:tmp.df <- import(i,format = "csv")
1603249109979:counts.df[,col.index] <- tmp.df[,2]
1603249109979:col.index <- col.index + 1
1603249109980:}
1603250693352:colnames(counts.df) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1603250777912:colnames(counts.df)
1603250803562:counts.df
1603250916523:## Clean up data
1603250916533:counts.df <- counts.df[-(159134:159138),]
1603250959870:TERRA.counts <- counts.df[159068:159133,]
1603250965650:counts.df <- counts.df[-(159068:159133),]
1603250967143:## Export raw counts table
1603250967153:export(counts.df,"./HTseq/raw_counts_table.csv",format = "csv")
1603250991391:## Export raw counts table
1603250991399:export(counts.df,"./HTseq/raw_counts_table.csv",format = "csv")
1603250997842:export(TERRA.counts,"./HTseq/TERRA_counts_table.csv",format = "csv")
1603251005708:# Loading data(有rio才可以import)
1603251005716:raw_data <- import("./HTseq/raw_counts_table.csv",format = "csv")
1603251010781:data <- raw_data[,-1]
1603251012294:row.names(data) <- raw_data$Gene_ID
1603251134857:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603251157848:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603251169577:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603251242811:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603251259768:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603251284188:## Export raw counts table
1603251284190:export(counts.df,"./HTseq/raw_counts_table.csv",format = "csv")
1603251285396:export(TERRA.counts,"./HTseq/TERRA_counts_table.csv",format = "csv")
1603251286678:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603251291282:source('~/OneDrive/RNA-seq/Summary Counts.R')
1603251337058:raw_data
1603251357880:# Loading sample annotation
1603251357881:anno.sample <- import("./HTseq/SampleAnnotation.xlsx",format = "xlsx")
1603251374948:# Loading sample annotation
1603251374949:anno.sample <- import("./HTseq/raw_counts_table.csv",format = "xlsx")
1603251383228:# Loading sample annotation
1603251383229:anno.sample <- import("./HTseq/raw_counts_table.csv",format = "csv")
1603251389114:rownames(anno.sample) <- anno.sample$Sample
1603251394325:meta.df <- data.frame(
1603251394326:treatment = anno.sample$Group
1603251394330:)
1603251403722:anno.sample
1603251425391:## Create DESeq2Dataset object
1603251425392:dds <- DESeqDataSetFromMatrix(countData = data, colData = meta.df, design = ~ treatment)
1603258901003:Library(DEXSeq)
1603258926397:Pacman: DEXSeq
1603258969767:Pacman::p_load(DEXSeq)
1603258981403:# Loading packages
1603258981411:#install.packages("pacman")
1603258981411:#library("pacman")
1603258981411:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1603259011453:Library(pacman)
1603259024458:pacman::p_load(DEXSeq)
1603259062816:Library(DEXSeq)
1603259561433:HTseq_python = system.file( "python_scripts", package="DEXSeq" )
1603259562652:list.files(pythonScriptsDir)
1603260402821:if (!requireNamespace("HTSeq", quietly = TRUE))
1603260436122:install.packages("HTSeq")
1603260443746:if (!requireNamespace("HTSeq", quietly = TRUE))
1603260484495:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1603260500387:python_HTseq = system.file( "python_scripts", package="DEXSeq" )
1603260505905:python_HTSeq = system.file( "python_scripts", package="DEXSeq" )
1603260508951:list.files(pythonScriptsDir)
1603260524466:python_HTSeq
1603260565913:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1603260713116:BiocManager::install("HTseq")
1603260807781:install.packages("HTSeq")
1603260825274:if (!requireNamespace("BiocManager", quietly = TRUE))
1603260829561:install.packages("BiocManager")
1603260842544:# The following initializes usage of Bioc devel
1603260842545:BiocManager::install(version='devel')
1603265212240:Yes
1603265269950:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1603265291645:python_HTseq
1603265305010:python_HTSeq
1603265312729:if (!requireNamespace("HTSeq", quietly = TRUE))
1603265342318:list.files(python_HTSeq)
1603265345298:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1603782109003:if (!requireNamespace("BiocManager", quietly = TRUE))
1603782109771:install.packages("BiocManager")
1603782111639:# The following initializes usage of Bioc devel
1603782111647:BiocManager::install(version='devel')
1603782155570:BiocManager::install("parathyroidSE")
1603782224845:if (!requireNamespace("BiocManager", quietly = TRUE))
1603782226280:install.packages("BiocManager")
1603782227723:BiocManager::install("biomaRt")
1603782242126:pacman::p_load(BiocManager,DEXSeq,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,parathyroidSE,dplyr,ggplot2)
1603782298625:python_HTSeq = system.file( "python_scripts", package="DEXSeq" )
1603782300040:list.files(python_HTSeq)
1603782301557:python_HTSeq
1603782303006:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1603782317427:GTF= makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="grch37.ensembl.org" )
1603782424721:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,parathyroidSE,dplyr,ggplot2)
1603782440424:GTF= makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="grch37.ensembl.org" )
1603782547137:library(biomaRt)
1603782548410:GTF= makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="grch37.ensembl.org" )
1603782653525:listMarts(host="www.ensembl.org")
1603782658958:datasets <- listDatasets(useMart(biomart="ENSEMBL_MART_ENSEMBL",
1603782658966:host="www.ensembl.org"))
1603782682935:head(datasets)
1603782784057:hg38= makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="grch37.ensembl.org" )
1603787102087:help(estimateDispersions)
1603787662681:help(estimateDispersions)
1606491615734:load(pacman)
1606491691887:# Loading packages
1606491691888:#install.packages("pacman")
1606491691888:#library("pacman")
1606491691889:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1606491729960:## Loading packages
1606491729968:pacman::p_load(rio)
1606491778706:## 1.creat project,在project下(右下角工具列) creat new folder
1606491778714:## 2.把檔案從Folder拖到new folder中
1606491778714:## 3.用grep匯入到project作統整
1606491778715:##paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1606491778715:##如果不想要有任何分隔符號，可以使用 paste0
1606491778716:## Loading files
1606491778716:files <- paste0("./HTseq/",grep(".count",list.files("./HTseq/"),value = T))
1606491833921:files
1606491838372:## Making dataFrame
1606491838372:counts.df <- import(files[1],format = "csv")
1606548608626:library("DESeq2")
1606548631799:# Loading packages
1606548631807:#install.packages("pacman")
1606548631808:#library("pacman")
1606548631808:pacman::p_load(BiocManager,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1606548848379:## 1.creat project,在project下(右下角工具列) creat new folder
1606548848388:## 2.把檔案從Folder拖到new folder中
1606548848388:## 3.用grep匯入到project作統整
1606548848388:##paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1606548848389:##如果不想要有任何分隔符號，可以使用 paste0
1606548848389:## Loading files
1606548848390:files <- paste0("raw count/",grep(".count",list.files("./raw count/"),value = T))
1606548857651:files
1606548888585:raw_count <- paste0("raw count/",grep(".count",list.files("./raw count/"),value = T))
1606548891669:raw_count
1606548958901:counts.csv <- import(files[1],format = "csv")
1606548965140:counts.csv
1606549128196:col.index <- 2
1606549129211:col.index
1606549156535:for (i in files) {
1606549156537:tmp.df <- import(i,format = "csv")
1606549156537:counts.csv[,col.index] <- tmp.df[,2]
1606549156537:col.index <- col.index + 1
1606549156538:}
1606549307607:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1606549309041:counts.csv
1606549938985:counts.csv
1606549983087:counts.csv
1606549985294:source('~/.active-rstudio-document')
1606551502699:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1606551503677:counts.csv
1606552472126:load("~/OneDrive - 國立台灣大學/RNA seq for U_D8 S1 041620KD 1st/DEseq2/.RData")
1606552473384:load("~/OneDrive - 國立台灣大學/RNA seq for U_D8 S1 041620KD 1st/DEseq2/.RData")
1606552527291:raw_count
1606552575171:library("DESeq2")
1606552742864:raw_count <- paste0("raw count/",grep(".count",list.files("./raw count/"),value = T))
1606552744530:raw_count
1606552745576:counts.csv <- import(raw_count[1],format = "csv")
1606552803707:pacman::p_load(rio,DESeq2)
1606552809982:raw_count <- paste0("raw count/",grep(".count",list.files("./raw count/"),value = T))
1606552811902:raw_count
1606552813533:counts.csv <- import(raw_count[1],format = "csv")
1606552816001:counts.csv
1606552819034:col.index <- 2
1606552819679:col.index
1606552820805:for (i in raw_count) {
1606552820806:tmp.df <- import(i,format = "csv")
1606552820807:counts.csv[,col.index] <- tmp.df[,2]
1606552820807:col.index <- col.index + 1
1606552820808:}
1606552824292:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1606552826304:counts.csv
1606553361349:pacman::p_load(rio,DESeq2,BiocManager,tidyverse,RColorBrewer,pheatmap)
1606554063049:raw_count <- paste0("raw count/",grep(".count",list.files("./raw count//"),value = T))
1606554064369:raw_count
1606554066775:counts.csv <- import(files[1],format = "csv")
1606554089754:counts.csv <- import(raw_count[1],format = "csv")
1606554092635:counts.csv
1606554098272:col.index <- 2
1606554099989:col.index
1606554121360:for (i in raw_count) {
1606554121368:tmp.df <- import(i,format = "csv")
1606554121368:counts.csv[,col.index] <- tmp.df[,2]
1606554121369:col.index <- col.index + 1
1606554121369:}
1606554131724:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1606554134460:counts.csv
1606554343828:raw_count <- paste0("raw count/",grep(".count",list.files("./raw count//"),value = T))
1606554344496:raw_count
1606554345393:counts.csv <- import(raw_count[1],format = "csv")
1606554345896:counts.csv
1606554346368:col.index <- 2
1606554347405:col.index
1606554348478:for (i in raw_count) {
1606554348478:tmp.df <- import(i,format = "csv")
1606554348479:counts.csv[,col.index] <- tmp.df[,2]
1606554348479:col.index <- col.index + 1
1606554348479:}
1606554350620:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw_count/"),value = T))
1606554352967:counts.csv
1606554715032:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw count/"),value = T))
1606554720551:counts.csv
1606554956908:counts.csv <- counts.csv[-(159135:159139),]
1606554985254:TERRA.counts <- counts.csv[159069:159134,]
1606555008547:counts.csv<- counts.csv[-(159069:159134),]
1606555061687:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606555064827:export(TERRA.counts,"./HTseq/2TERRA_counts_table.csv",format = "csv")
1606555078375:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw count/"),value = T))
1606555078899:counts.csv
1606555081546:counts.csv <- counts.csv[-(159135:159139),]
1606555082197:TERRA.counts <- counts.csv[159069:159134,]
1606555082785:counts.csv<- counts.csv[-(159069:159134),]
1606555083314:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606555084148:export(TERRA.counts,"./HTseq/2TERRA_counts_table.csv",format = "csv")
1606555091200:raw_count <- paste0("raw count/",grep(".count",list.files("./raw count/"),value = T))
1606555092021:raw_count
1606555092799:counts.csv <- import(raw_count[1],format = "csv")
1606555093390:counts.csv
1606555094712:col.index <- 2
1606555095619:col.index
1606555096469:for (i in raw_count) {
1606555096478:tmp.df <- import(i,format = "csv")
1606555096479:counts.csv[,col.index] <- tmp.df[,2]
1606555096479:col.index <- col.index + 1
1606555096480:}
1606555097365:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw count/"),value = T))
1606555098030:counts.csv
1606555104617:counts.csv <- counts.csv[-(159135:159139),]
1606555105273:TERRA.counts <- counts.csv[159069:159134,]
1606555111368:counts.csv<- counts.csv[-(159069:159134),]
1606555137832:4
1606555363622:counts.csv <- counts.csv[-(159134:159138),]
1606555364315:TERRA.counts <- counts.csv[159068:159133,]
1606555364856:counts.csv<- counts.csv[-(159068:159133),]
1606555388886:export(counts.df,"./HTseq/2raw_counts_table.csv",format = "csv")
1606555398133:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606555401635:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606555402923:export(TERRA.counts,"./HTseq/2TERRA_counts_table.csv",format = "csv")
1606555406632:counts.csv<- counts.csv[-(159068:159133),]
1606555407578:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606555408350:export(TERRA.counts,"./HTseq/2TERRA_counts_table.csv",format = "csv")
1606555489638:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606558977874:rawcount <- paste0("2passHTcount/",grep(".count",list.files("2passHTcount/"),value = T))
1606558978863:rawcount
1606559015662:counts.csv <- import(raw_count[1],format = "csv")
1606559030992:counts.csv <- import(rawcount[1],format = "csv")
1606559035178:counts.csv <- import(rawcount[1],format = "csv")
1606559040081:rawcount
1606559043896:counts.csv <- import(rawcount[1],format = "csv")
1606559075854:counts.csv <- import(rawcount[1],format = "csv")
1606559081280:rawcount <- paste0("2passHTcount/",grep(".count",list.files("2passHTcount/"),value = T))
1606559082002:rawcount
1606559082841:counts.csv <- import(rawcount[1],format = "csv")
1606559130552:rawcount <- paste0("2passHTcount/",grep(".count",list.files("./2passHTcount/"),value = T))
1606559131429:rawcount
1606559132585:counts.csv <- import(rawcount[1],format = "csv")
1606559137885:counts.csv
1606559142141:col.index <- 2
1606559142847:col.index
1606559153710:for (i in rawcount) {
1606559153719:tmp.df <- import(i,format = "csv")
1606559153719:counts.csv[,col.index] <- tmp.df[,2]
1606559153720:col.index <- col.index + 1
1606559153720:}
1606559156871:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw count/"),value = T))
1606559158651:counts.csv
1606559225670:counts.csv <- counts.csv[-(159134:159138),]
1606559257891:TERRA.counts <- counts.csv[159068:159133,]
1606559259450:counts.csv<- counts.csv[-(159068:159133),]
1606559260974:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606559282921:counts.csv <- counts.csv[-(159068:159133),]
1606559285467:counts.csv <- counts.csv[-(159068:159133),]
1606559286308:export(counts.csv,"./HTseq/2raw_counts_table.csv",format = "csv")
1606559327633:export(counts.csv,"./2passHTcount/2raw_counts_table.csv",format = "csv")
1606559328874:export(TERRA.counts,"./2passHTcount/2TERRA_counts_table.csv",format = "csv")
1606578579419:# Loading data
1606578579428:raw_data <- import("./2passHTcount/2raw_counts_table.csv",format = "csv")
1606578580836:data <- raw_data[,-1]
1606578585486:row.names(data) <- raw_data$Gene_ID
1606578604654:data
1606578621301:raw_data
1606578647654:data
1606578670936:row.names(data) <- raw_data$Gene_ID
1606578682823:data
1606808428005:pacman::p_load(DEXSeq)
1606813546119:dxd = DEXSeqDataSetFromHTSeq(
1606813546148:countFiles,
1606813546152:sampleData=sampleTable,
1606813546158:design= ~ sample + exon + condition:exon,
1606813546176:flattenedfile=flattenedFile )
1606813659903:rawcount <- paste0("2passHTcount/",grep(".count",list.files("./2passHTcount/"),value = T))
1606813661316:rawcount
1606813662355:## Making dataFrame
1606813662356:counts.csv <- import(rawcount[1],format = "csv")
1606813677286:pacman::p_load(DEXSeq,rio)
1606813683090:## Making dataFrame
1606813683090:counts.csv <- import(rawcount[1],format = "csv")
1606813684131:counts.csv
1606813684990:dxd = DEXSeqDataSetFromHTSeq(
1606813684991:counts.csv,
1606813684992:sampleData=sampleTable,
1606813684993:design= ~ sample + exon + condition:exon,
1606813684994:flattenedfile=flattenedFile )
1606813891710:## Making dataFrame
1606813891711:sampleFiles <- grep("counts",list.files(rawcount),value=TRUE
1606813902073:## Making dataFrame
1606813902081:sampleFiles <- grep("counts",list.files(rawcount),value=TRUE
1606813909681:countFiles,
1606813909691:sampleData=sampleTable,
1606813909691:design= ~ sample + exon + condition:exon,
1606813909692:flattenedfile=flattenedFile )
1606978294638:pacman::p_load(DEXSeq, rio, HTSeq)
1606978333027:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606978345287:list.files(pythonScriptsDir)
1606978346777:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606980084783:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606980399537:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606983194909:pacman::p_load(DEXSeq, rio, HTSeq)
1606983286067:clear
1606983293373:pacman::p_load(DEXSeq, rio)
1606983296935:#HTSeq中的python scripts, 用在DEXSeq中
1606983296935:#HTSeq是在terminal中用pip install HTSeq下載的
1606983296936:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606983300658:list.files(pythonScriptsDir)
1606983302825:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606983630354:#HTSeq中的python scripts, 用在DEXSeq中
1606983630355:#HTSeq是在terminal中用pip install HTSeq下載的
1606983630356:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606983632076:list.files(pythonScriptsDir)
1606983635546:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606984051816:python3 /Library/Frameworks/R.framework/Versions/4.0/Resources/library/DEXSeq/python_scripts/dexseq_prepare_annotation.py Homo_sapiens.GRCh38.102.gtf hg38DEXSeq.gff
1606986230688:#HTSeq中的python scripts, 用在DEXSeq中
1606986230698:#HTSeq是在terminal中用pip install HTSeq下載的
1606986230699:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606986233386:list.files(pythonScriptsDir)
1606986247169:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606986371525:list.files(pythonScriptsDir)
1606986376834:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606986744065:#HTSeq中的python scripts, 用在DEXSeq中
1606986744067:#HTSeq是在terminal中用pip install HTSeq下載的
1606986744068:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606986746623:list.files(pythonScriptsDir)
1606986961747:pacman::p_load(DEXSeq, rio)
1606986964954:#HTSeq中的python scripts, 用在DEXSeq中
1606986964954:#HTSeq是在terminal中用pip install HTSeq下載的
1606986965139:#HTSeq中的python scripts, 用在DEXSeq中
1606986965140:#HTSeq是在terminal中用pip install HTSeq下載的
1606986965141:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606986966836:list.files(pythonScriptsDir)
1606986967731:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606987310345:Library(DEXSeq)
1606987357144:library('DEXSeq')
1606987363666:#HTSeq中的python scripts, 用在DEXSeq中
1606987363667:#HTSeq是在terminal中用pip install HTSeq下載的
1606987363667:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606987364131:list.files(pythonScriptsDir)
1606987364913:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1606987431506:if (!requireNamespace("BiocManager", quietly = TRUE))
1606987437768:install.packages("BiocManager")
1606987441145:# The following initializes usage of Bioc devel
1606987441154:BiocManager::install(version='devel')
1606987456855:if (!requireNamespace("BiocManager", quietly = TRUE))
1606987458525:install.packages("BiocManager")
1606987459185:# The following initializes usage of Bioc devel
1606987459193:BiocManager::install(version='devel')
1606987538720:install.packages("installer")
1606987578557:installr::updateR
1606988305806:if (!requireNamespace("BiocManager", quietly = TRUE))
1606988314969:install.packages("BiocManager")
1606988317441:# The following initializes usage of Bioc devel
1606988317450:BiocManager::install(version='devel')
1606988357449:if (!requireNamespace("BiocManager", quietly = TRUE))
1606988358542:install.packages("BiocManager")
1606988360217:BiocManager::install(version = "3.12")
1606988611328:pacman::p_load(DEXSeq, rio)
1606988638885:#HTSeq中的python scripts, 用在DEXSeq中
1606988638886:#HTSeq是在terminal中用pip install HTSeq下載的
1606988638887:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1606988642659:list.files(pythonScriptsDir)
1606988645778:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607265905489:install.packages("ps")
1607265969978:Q
1607265974173:quit
1607266256090:# Loading packages
1607266256091:# install.packages("pacman")
1607266256092:# library("pacman")
1607266256092:# HTSeq是由python3下載的
1607266256093:if (!requireNamespace("BiocManager", quietly = TRUE))
1607266258153:install.packages("BiocManager")
1607266259749:# The following initializes usage of Bioc devel
1607266259750:BiocManager::install(version='devel')
1607266261199:BiocManager::install("DEXSeq")
1607266278741:# The following initializes usage of Bioc devel
1607266278742:BiocManager::install(version='devel')
1607266278886:BiocManager::install("DEXSeq")
1607269141847:if (!requireNamespace("BiocManager", quietly = TRUE))
1607269142591:install.packages("BiocManager")
1607269144519:# The following initializes usage of Bioc devel
1607269144519:BiocManager::install(version='devel')
1607269152048:BiocManager::install("parathyroidSE")
1607270182244:?abs
1607270225193:?DEXSeq
1607270233181:?minus
1607405379802:library(DEXSeq)
1607405457243:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607405457248:list.files(pythonScriptsDir)
1607405487847:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607406157529:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607407253325:#HTSeq中的python scripts, 用在DEXSeq中
1607407253326:#HTSeq是在terminal中用pip install HTSeq下載的
1607407253326:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607407255461:list.files(pythonScriptsDir)
1607407257807:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607407439856:#HTSeq中的python scripts, 用在DEXSeq中
1607407439860:#HTSeq是在terminal中用pip install HTSeq下載的
1607407439861:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607407442574:list.files(pythonScriptsDir)
1607407443678:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607407458580:pacman::p_load(DEXSeq, rio)
1607407652583:install.packages("pacman")
1607407683053:pacman::p_load(DEXSeq)
1607407741664:pacman::p_load(BiocManager,rio,DEXSeq)
1607408858671:if (!requireNamespace("BiocManager", quietly = TRUE))
1607408858682:install.packages("BiocManager")
1607408858685:# The following initializes usage of Bioc devel
1607408858687:BiocManager::install(version='devel')
1607408858774:BiocManager::install("DEXSeq")
1607409010647:#HTSeq中的python scripts, 用在DEXSeq中
1607409010649:#HTSeq是在terminal中用pip install HTSeq下載的
1607409010649:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607409011705:list.files(pythonScriptsDir)
1607409012670:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607409101875:#HTSeq中的python scripts, 用在DEXSeq中
1607409101884:#HTSeq是在terminal中用pip install HTSeq下載的
1607409101885:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607409102707:list.files(pythonScriptsDir)
1607409103550:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607409323872:#HTSeq中的python scripts, 用在DEXSeq中
1607409323873:#HTSeq是在terminal中用pip install HTSeq下載的
1607409323873:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607409324808:list.files(pythonScriptsDir)
1607409325657:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607409401236:#HTSeq中的python scripts, 用在DEXSeq中
1607409401244:#HTSeq是在terminal中用pip install HTSeq下載的
1607409401246:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607409401878:list.files(pythonScriptsDir)
1607409402470:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607409475365:#HTSeq中的python scripts, 用在DEXSeq中
1607409475366:#HTSeq是在terminal中用pip install HTSeq下載的
1607409475367:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607409475969:list.files(pythonScriptsDir)
1607409476921:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607409496485:#HTSeq中的python scripts, 用在DEXSeq中
1607409496493:#HTSeq是在terminal中用pip install HTSeq下載的
1607409496493:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607409497164:list.files(pythonScriptsDir)
1607409663183:#HTSeq中的python scripts, 用在DEXSeq中
1607409663185:#HTSeq是在terminal中用pip install HTSeq下載的
1607409663186:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607409663941:list.files(pythonScriptsDir)
1607409665012:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607515742238:browseVignettes("DEXSeq")
1607520836132:#HTSeq中的python scripts, 用在DEXSeq中
1607520836143:#HTSeq是在terminal中用pip install HTSeq下載的
1607520836143:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607520838010:list.files(pythonScriptsDir)
1607520844195:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607577831370:#HTSeq中的python scripts, 用在DEXSeq中
1607577831380:#HTSeq是在terminal中用pip install HTSeq下載的
1607577831381:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1607577832353:list.files(pythonScriptsDir)
1607577838024:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1607578144219:#HTSeq中的python scripts, 用在DEXSeq中
1607578144221:#HTSeq是在terminal中用pip install HTSeq下載的
1607578144221:pythonScriptsDir = system.file( "python_scrip", package="DEXSeq" )
1607578145986:list.files(pythonScriptsDir)
1607578180902:View(TERRA.counts)
1607578220890:dexcount = system.file("bam", package=DHX8)
1607578220906:list.files(dexcount)
1607578246157:dexcount = system.file("bam", package="DHX8")
1607578258294:list.files(dexcount)
1607578329534:dexcount = system.file("DHX8", package="DHX8")
1607578339808:list.files(dexcount)
1607578371735:dexcount = system.file("Desktop", package="DHX8")
1607578371748:list.files(dexcount)
1607579190901:dexcount = system.file("Desktop", package="D8")
1607579190905:list.files(dexcount)
1607579216067:dexcount = system.file("bam", package="D8")
1607579216086:list.files(dexcount)
1607579374826:inDir = system.file("extdata", package="D8")
1607579426597:countFiles = list.files(inDir, pattern="bam.txt", full.names=TRUE)
1607579435116:basename(countFiles)
1607579900464:library( "DEXSeq" )
1607579920714:dxd = DEXSeqDataSetFromHTSeq(
1607579920715:countFiles,
1607579920715:sampleData=sampleTable,
1607579920715:design= ~ sample + exon + condition:exon,
1607579920716:flattenedfile=flattenedFile )
1607583785511:dds <- DESeqDataSetFromMatrix(countData = cts,
1607583785524:colData = coldata,
1607583785525:design= ~ batch + condition)
1607583802488:library(DESeq2)
1607583810276:dds <- DESeqDataSetFromMatrix(countData = cts,
1607583810284:colData = coldata,
1607583810284:design= ~ batch + condition)
1607583817693:library(DESeq2)
1607583818665:dds <- DESeqDataSetFromMatrix(countData = cts,
1607583818673:colData = coldata,
1607583818674:design= ~ batch + condition)
1607583830681:library(DEseq2)
1607583842681:library(DESeq2)
1607588911646:pacman::JuctionSeq
1607588918342:pacman::JunctionSeq
1607588946947:pacman::JunctionSeq
1607588962535:pacman(JunctionSeq)
1607589038531:pacman::p_load(JunctionSeq)
1607589121153:x = c(1,2,3,4)
1607589140854:y = c(10,20,30,40)
1607589155041:plot(y~x)
1607589177454:plot(y~x,type="b")
1607589218421:plot(x,y, type="b")
1607589221497:plot
1607589386403:plot(x~y)
1607589409211:plot(y~x, type="p")
1607589707879:install.packages(c("data.table", "jsonlite"))
1607589750196:library(DESeq2)
1607589804186:pacman::p_load(JunctionSeq)
1607589827370:pacman::p_load(PennDiff)
1607589923636:pacman::p_load(edgeR)
1607589959713:pacman::p_load(limma)
1607666633885:megadepth::install_megadepth()
1607666660249:install.packages(megadepth)
1607666676511:pacman::p_load(megadepth)
1607667596973:library(megadepth)
1607667648725:if (!requireNamespace("BiocManager", quietly = TRUE))
1607667648729:install.packages("BiocManager")
1607667648731:BiocManager::install("megadepth")
1607667801847:Yes
1607667808116:if (!requireNamespace("BiocManager", quietly = TRUE))
1607667808124:install.packages("BiocManager")
1607667808125:BiocManager::install("megadepth")
1607668120966:if (!requireNamespace("BiocManager", quietly = TRUE))
1607668120975:install.packages("BiocManager")
1607668120976:BiocManager::install("DEXSeq")
1607668189752:library(DEXSeq)
1607668265424:pacman::p_load(GenomeInfoDb, S4Vectors, IRanges, GenomicRanges, XVector)
1607669069639:ref <- GenomicState::GenomicStateHub(version = "31", genome = "hg38", filetype = "TxDb")[[1]]
1607669092172:pacman::p_load(GenomicState)
1607670234348:if (!requireNamespace("BiocManager", quietly = TRUE))
1607670234352:install.packages("BiocManager")
1607670234354:BiocManager::install("GenomicState")
1607670669101:library(nlme)
1607670684075:install.packages("nlme")
1607670779181:if (!requireNamespace("BiocManager", quietly = TRUE))
1607670779189:install.packages("BiocManager")
1607670779206:BiocManager::install("GenomicState")
1607671109667:library(nlme)
1607671127793:install.packages("nlme")
1607673011635:megadepth::install_megadepth()
1607673095542:ref <- GenomicState::GenomicStateHub(version = "31", genome = "hg38", filetype = "GTF")[[1]]
1607673112063:if (!requireNamespace("BiocManager", quietly = TRUE))
1607673112064:install.packages("BiocManager")
1607673112082:BiocManager::install("GenomicState")
1607674913532:DEXSeq::install_DEXSeq()
1607675247943:#Loading data
1607675247947:raw_data <- import("./DEXseq/1bam.txt",format = "txt")
1607675266714:pacman::p_load(DEXSeq, rio)
1607675287405:#Loading data
1607675287406:raw_data <- import("./DEXseq/1bam.txt",format = "txt")
1607675417997:#Loading data
1607675418006:raw_files <- paste0("DEXseq/",grep(".txt",list.files("./DEXseq/"),value = T))
1607675430324:raw_files
1607675952135:sampleTable = data.frame(
1607675952143:row.names = c( "1bam.txt", "2bam.txt", "3bam.txt", "4bam.txt" ),
1607675952144:condition = c("control", "knockdown", "control",
1607675952146:"knockdown"),
1607675952146:libType = c( "paired-end", "paired-end",
1607675952147:"paired-end", "paired-end" ) )
1607676028555:#prepare a sample table
1607676028574:sampleTable = data.frame(
1607676028574:row.names = c( "1bam", "2bam", "3bam", "4bam" ),
1607676028575:condition = c("control", "knockdown", "control",
1607676028575:"knockdown"),
1607676028576:libType = c( "paired-end", "paired-end",
1607676028576:"paired-end", "paired-end" ) )
1607676741771:write.csv(sampleTable)
1607676759143:read.csv(sampleTable)
1607676787426:read.csv("sampleTable")
1607676791938:write.csv("sampleTable")
1607676795040:read.csv("sampleTable")
1607677356333:write.csv(sampleTable, "sampleTable.csv")
1607677358939:read.csv("sampleTable")
1607677518082:view(sampleTable)
1607677534768:View(sampleTable)
1608008387155:flattenedFile = list.files(inDir, pattern="gff$", full.names=TRUE)
1608009243808:getwd()
1608009282164:setwe()
1608009288029:setwd()
1608009296318:setwd(/Users/chrisadore/OneDrive - 國立台灣大學/RNAseq1)
1608009321035:setwd(Users/chrisadore/OneDrive - 國立台灣大學/RNAseq1)
1608009339452:setwd("/Users/chrisadore/OneDrive - 國立台灣大學/RNAseq1")
1608009870555:list.dirs()
1608009913526:dir()
1608010023402:#查看指定目錄的子目錄和文件
1608010023404:dir(path="/Library/")
1608010044585:#查看指定目錄的子目錄和文件
1608010044593:dir(path="/DEseq2")
1608010062179:#查看指定目錄的子目錄和文件
1608010062189:dir(path="/home/")
1608010077036:#查看指定目錄的子目錄和文件
1608010077044:dir(path="DEseq2/")
1608010145883:list.files("bam.txt",all.files=TRUE)
1608010857604:system.file()
1608010912146:system.file(package = "DEXseq/")
1608010942415:system.file("bam",package = "DEXseq/")
1608010948929:system.file("bam.txt",package = "DEXseq/")
1608011047942:system.file("txt",package = "DEXseq/")
1608011055351:system.file(package = "DEXseq/")
1608011141461:system.file()
1608011171455:system.file(R)
1608011183310:system.file("R")
1608011272323:system.file(package = "DEXseq/")
1608011283634:#查看指定目錄的子目錄和文件
1608011283643:dir(path="DEseq2/")
1608011371665:system.file("gff", package = "DEXseq/")
1608012378316:#HTSeq中的python scripts, 用在DEXSeq中
1608012378324:#HTSeq是在terminal中用pip install HTSeq下載的
1608012378324:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1608012381500:list.files(pythonScriptsDir)
1608012383368:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1608012986837:system.file("gff", package = "DEXseq/")
1608013009797:#查看當前目錄的子目錄和文件
1608013009798:dir()
1608013027800:#查看指定目錄的子目錄和文件
1608013027808:dir(path="DEseq2/")
1608013041347:#查看指定目錄的子目錄和文件
1608013041356:dir(path="DEXseq/")
1608013104070:inDir = system.file("extdata", package="DEXseq/")
1608013107016:countFiles = list.files(inDir, pattern="bam.txt$", full.names=TRUE)
1608013108187:basename(countFiles)
1608013139291:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1608013157761:#HTSeq中的python scripts, 用在DEXSeq中
1608013157769:#HTSeq是在terminal中用pip install HTSeq下載的
1608013157770:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1608013236144:system.file(package = "DEXseq/")
1608013279109:list.files("bam.txt",all.files=TRUE)
1608013300233:#查看當前目錄的子目錄和文件
1608013300234:dir()
1608013369328:inDir = system.file(path="DEXseq/")
1608013372288:countFiles = list.files(inDir, pattern="bam.txt$", full.names=TRUE)
1608013372894:basename(countFiles)
1608013381888:system.file(path = "DEXseq/")
1608013421847:list.files(path = "DEXseq/",all.files=TRUE)
1608013472624:inDir = list.files(path = "DEXseq/",all.files=TRUE)
1608013473862:countFiles = list.files(inDir, pattern="bam.txt$", full.names=TRUE)
1608013474529:basename(countFiles)
1608013490981:countFiles = list.files(inDir, pattern="txt$", full.names=TRUE)
1608013491586:basename(countFiles)
1608013504959:#列出指定目錄檔案
1608013504967:list.files(path = "DEXseq/",all.files=TRUE)
1608013522991:countFiles = list.files(inDir, pattern="$bam.txt", full.names=TRUE)
1608013523589:basename(countFiles)
1608013536800:inDir
1608013548912:countFiles
1608013557628:countFiles = list.files(inDir, pattern="bam.txt", full.names=TRUE)
1608013558456:countFiles
1608013590858:basename(countFiles)
1608013592988:list.files(".",all.files=TRUE)
1608013632858:inDir = list.files(path = "DEXseq/",all.files=TRUE, pattern = "bam.txt")
1608013634577:inDir
1608013645346:basename(countFiles)
1608013661181:basename(inDir)
1608013713692:flattenedFile = list.files(ath = "DEXseq/",all.files=TRUE, pattern="gff$")
1608013720061:flattenedFile = list.files(path = "DEXseq/",all.files=TRUE, pattern="gff$")
1608013720696:basename(flattenedFile)
1608013746030:read.csv
1608013749452:read.csv()
1608013804061:read.csv(sampleTable)
1608013848126:read.csv(sampleTable)
1608013863910:read.csv(sampleTable)
1608013892060:dxd = DEXSeqDataSetFromHTSeq(
1608013892068:countFiles,
1608013892069:sampleData=sampleTable,
1608013892069:design= ~ sample + exon + condition:exon,
1608013892070:flattenedfile=flattenedFile )
1608016320788:library(GenomicRanges)
1608016321616:library(GenomicFeatures)
1608016327861:library(GenomicAlignments)
1608016357180:library(GenomicRanges)
1608016359559:library(GenomicFeatures)
1608016360034:library(GenomicAlignments)
1608016458754:pacman::p_load(GenomicRanges, GenomicFeatures, GenomicAlignments)
1608016476969:pacman::p_load(GenomicRanges, GenomicFeatures, GenomicAlignments)
1608016483963:library( "DEXSeq" )
1608016487995:pacman::p_load(DEXSeq, rio)
1608016958129:read.csv(file = "sampleTable")
1608016982571:read.csv(file = "sampleTable.csv")
1608016994364:read.csv(file = "DEXseq/sampleTable.csv")
1608017415187:pacman::p_load(DEXSeq, rio, GenomicRanges, GenomicFeatures, GenomicAlignments)
1608019226379:dxd = DEXSeqDataSetFromHTSeq(
1608019226381:countFiles,
1608019226382:sampleData=sampleTable,
1608019226383:design= ~ sample + exon + condition:exon,
1608019226383:flattenedfile=flattenedFile )
1608107309418:help("getFromNamespace")
1608876690838:pacman::p_load(DEXSeq, rio, GenomicRanges, GenomicFeatures, GenomicAlignments, AnnotationHub)
1608877385814:ah = AnnotationHub()
1608877602520:if (!requireNamespace("BiocManager", quietly = TRUE))
1608877602523:install.packages("BiocManager")
1608877602525:BiocManager::install("AnnotationHub")
1608877968774:ah
1608877972099:#開始取回annotation,用法像list or data.frame
1608877972100:ah = AnnotationHub()
1608878144940:#開始取回annotation,用法像list or data.frame
1608878144941:ah = AnnotationHub()
1608878148849:#開始取回annotation,用法像list or data.frame
1608878148850:ah = AnnotationHub()
1608878151820:pacman::p_load(AnnotationHub)
1608878161058:#開始取回annotation,用法像list or data.frame
1608878161059:ah = AnnotationHub()
1608880055646:ah
1608880103612:unique(ah$dataprovider)
1608880203097:head(unique(ah$species))
1608880218987:head(unique(ah$rdataclass))
1608880236227:dm <- query(ah, c("ChainFile", "UCSC", "Drosophila melanogaster"))
1608880243574:dm
1608880286294:df <- mcols(dm)
1608880287584:# what is df?
1608880287585:class(df)
1608880327042:dm <- query(ah, c("ChainFile", "UCSC", "hg38"))
1608880331107:dm
1608880391603:df <- mcols(dm)
1608880394697:df <- mcols(dm)
1608880396439:# what is df?
1608880396447:class(df)
1608880414158:head(df[,1:5])
1608880424163:length(ah)
1608880442939:#可以取chain files for hg38 from UCSC with:
1608880442947:dm <- query(ah, c("ChainFile", "UCSC", "Drosophila melanogaster"))
1608880448149:dm
1608880448244:df <- mcols(dm)
1608880449895:#可以取chain files for hg38 from UCSC with:
1608880449904:dm <- query(ah, c("ChainFile", "UCSC", "Drosophila melanogaster"))
1608880455371:dm
1608880456443:df <- mcols(dm)
1608880457522:# what is df?
1608880457522:class(df)
1608880459279:head(df[,1:5])
1608880460950:length(ah)
1608880479692:#可以取chain files for hg38 from UCSC with:
1608880479701:dm <- query(ah, c("ChainFile", "UCSC", "Drosophila melanogaster"))
1608880486407:dm
1608880488221:df <- mcols(dm)
1608880489407:# what is df?
1608880489416:class(df)
1608880490688:head(df[,1:5])
1608880491845:length(ah)
1608880506345:#可以取chain files for hg38 from UCSC with:
1608880506347:dm <- query(ah, c("ChainFile", "UCSC", "hg38"))
1608880509840:dm
1608880509921:df <- mcols(dm)
1608880509970:# what is df?
1608880509970:class(df)
1608880510012:head(df[,1:5])
1608880510026:length(ah)
1608880534351:ahs <- query(ah, c('inparanoid8', 'ailuropoda'))
1608880547742:ahs
1608880563866:d <- display(ah)
1608881475080:d <- display(ah)
1608881481488:d <- display(ah)
1608881493807:d <- display(ah)
1608881569131:sessionInfo()
1608881585837:help(DEXSeq)
1608881631031:if (!requireNamespace("BiocManager", quietly = TRUE))
1608881631040:install.packages("BiocManager")
1608881631041:BiocManager::install("DEXSeq")
1608881684123:help(DEXSeq)
1608881698810:??DEXSeq
1608881733818:remove.packages("DEXSeq")
1608881750252:if (!requireNamespace("BiocManager", quietly = TRUE))
1608881750260:install.packages("BiocManager")
1608881750260:BiocManager::install("DEXSeq")
1608881774901:help(DEXSeq)
1608881797841:DEXSeq()
1608881820850:pacman::p_load(DEXSeq)
1608881831608:library(DEXSeq)
1608881843357:help("DEXSeq")
1608881867496:pacman::p_load(DEXSeq, rio, GenomicRanges, GenomicFeatures, GenomicAlignments, AnnotationHub)
1608881878024:#HTSeq中的python scripts, 用在DEXSeq中
1608881878033:#HTSeq是在terminal中用pip install HTSeq下載的
1608881878033:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1608881879585:list.files(pythonScriptsDir)
1608881880948:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1608881882450:#Loading data
1608881882458:raw_files <- paste0("DEXseq/",grep(".txt",list.files("./DEXseq/"),value = T))
1608881883660:raw_files
1608881885135:#當前目錄
1608881885143:getwd()
1608881886105:#呼叫 setwd() 設定 R 語言的工作目錄
1608881886106:setwd("/Users/chrisadore/OneDrive - 國立台灣大學/RNAseq1")
1608881886814:#查看當前目錄的子目錄
1608881886822:list.dirs()
1608881887681:#查看當前目錄的子目錄和文件
1608881887690:dir()
1608881887909:#查看指定目錄的子目錄和文件
1608881887910:dir(path="DEXseq/")
1608881888245:#列出指定目錄檔案
1608881888254:list.files(path = "DEXseq/",all.files=TRUE)
1608881888547:system.file(path = "DEXseq/")
1608881888806:inDir = list.files(path = "DEXseq/",all.files=TRUE, pattern = "bam.txt")
1608881889727:inDir
1608881889975:basename(inDir)
1608881890288:flattenedFile = list.files(path = "DEXseq/",all.files=TRUE, pattern="gff$")
1608881891424:basename(flattenedFile)
1608881893741:#prepare a sample table表格
1608881893749:sampleTable = data.frame(
1608881893750:row.names = c( "1bam", "2bam", "3bam", "4bam" ),
1608881893750:condition = c("control", "knockdown", "control",
1608881893750:"knockdown"),
1608881893750:libType = c( "paired-end", "paired-end",
1608881893751:"paired-end", "paired-end" ) )
1608881895443:#看設定好的dataframe,表格
1608881895450:View(sampleTable)
1608881903303:read.csv(file = "DEXseq/sampleTable.csv")
1608881904325:dxd = DEXSeqDataSetFromHTSeq(
1608881904326:countFiles,
1608881904326:sampleData=sampleTable,
1608881904327:design= ~ sample + exon + condition:exon,
1608881904327:flattenedfile=flattenedFile )
1608969723610:if (!requireNamespace("BiocManager", quietly=TRUE))
1608969723611:install.packages("BiocManager")
1608969723613:BiocManager::install("JunctionSeq")
1608969838747:install.packages("statmod"); install.packages("plotrix"); install.packages("stringr");
1608969889628:install.packages("statmod"); install.packages("plotrix"); install.packages("stringr"); install.packages("Rcpp"); install.packages("RcppArmadillo"); install.packages("locfit"); install.packages("Hmisc");
1608969913693:install.packages("Rcpp")
1608969926956:install.packages("Rcpp")
1608969937105:install.packages("Rcpp")
1608969940437:install.packages("Rcpp")
1608969974464:if (!requireNamespace("BiocManager", quietly=TRUE)); install.packages("BiocManager");
1608969974476:BiocManager::install();
1608969978260:BiocManager::install("Biobase");
1608969997239:BiocManager::install("BiocGenerics");
1608970008133:BiocManager::install("BiocParallel");
1608970018517:BiocManager::install("GenomicRanges");
1608970029840:BiocManager::install("IRanges");
1608970039982:BiocManager::install("S4Vectors");
1608970051144:BiocManager::install("genefilter");
1608970063527:BiocManager::install("geneplotter");
1608970076753:BiocManager::install("SummarizedExperiment");
1608970088710:BiocManager::install("DESeq2");
1608970106508:if (!requireNamespace("BiocManager", quietly = TRUE))
1608970106509:install.packages("BiocManager")
1608970106512:BiocManager::install("JunctionSeq")
1608970152936:install.packages("http://hartleys.github.io/JunctionSeq/install/JunctionSeq_LATEST.tar.gz",
1608970152945:repos = NULL,
1608970152945:type = "source");
1608971165205:install.packages("http://hartleys.github.io/QoRTs/QoRTs_LATEST.tar.gz",
1608971165214:repos=NULL,
1608971165215:type="source");
1608972081466:install.packages("http://hartleys.github.io/JunctionSeq/install/JctSeqData_LATEST.tar.gz"
1608972115816:)
1608972136380:install.packages("http://hartleys.github.io/JunctionSeq/install/JctSeqData_LATEST.tar.gz")
1608972243912:install.packages("http://hartleys.github.io/JunctionSeq/install/JctSeqData.tar.gz")
1608972386551:decoder.file <- system.file("extdata/annoFiles/decoder.bySample.txt",
1608972386561:package="JctSeqData",
1608972386561:mustWork=TRUE);
1608972387251:decoder <- read.table(decoder.file,
1608972387251:header=TRUE,
1608972387252:stringsAsFactors=FALSE);
1608972387255:gff.file <- system.file(
1608972387256:"extdata/cts/withNovel.forJunctionSeq.gff.gz",
1608972387257:package="JctSeqData",
1608972387258:mustWork=TRUE)
1609141799391:install.packages("http://hartleys.github.io/JunctionSeq/install/JctSeqData_LATEST.tar.gz",
1609141799429:repos = NULL,
1609141799436:type="source")
1609141925076:install.packages("http://hartleys.github.io/JunctionSeq/install/JctSeqData_LATEST.tar.gz",
1609141925078:repos = NULL,
1609141925083:type="source")
1609145482265:if (!requireNamespace("BiocManager", quietly = TRUE))
1609145482267:install.packages("BiocManager")
1609145482289:BiocManager::install("edgeR")
1609145535083:if (!requireNamespace("BiocManager", quietly = TRUE))
1609145535084:install.packages("BiocManager")
1609145535085:BiocManager::install("limma")
1609146928778:x <- read.delim("sampleTable.csv",row.names="Symbol")
1609226897498:if (!requireNamespace("devtools", quietly = TRUE)) {
1609226897499:install.packages("devtools")
1609226897499:}
1609227285566:devtools::install_github("kvittingseerup/IsoformSwitchAnalyzeR", build_vignettes = TRUE)
1609227286530:if (!requireNamespace("BiocManager", quietly = TRUE))
1609227286532:install.packages("BiocManager")
1609227286533:BiocManager::install("IsoformSwitchAnalyzeR")
1609228194957:pacman::p_load(IsoformSwitchAnalyzeR)
1609228378317:BiocManager::install("IsoformSwitchAnalyzeR")
1609228483936:Library(IsoformSwitchAnalyzeR)
1609228485754:Library(IsoformSwitchAnalyzeR)
1609228501651:#分析及預測可能的isoform switches and association alternative splicing
1609228501651:pacman::p_load(rio,IsoformSwitchAnalyzeR)
1609228720957:#分析及預測可能的isoform switches and association alternative splicing
1609228720966:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio,IsoformSwitchAnalyzeR)
1609228721047:BiocManager::install("IsoformSwitchAnalyzeR")
1609228732501:#分析及預測可能的isoform switches and association alternative splicing
1609228732509:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio,IsoformSwitchAnalyzeR)
1609228732511:#分析及預測可能的isoform switches and association alternative splicing
1609228732512:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio,IsoformSwitchAnalyzeR)
1609228739013:#分析及預測可能的isoform switches and association alternative splicing
1609228739021:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio)
1609228741097:BiocManager::install("IsoformSwitchAnalyzeR")
1609228749516:Library(IsoformSwitchAnalyzeR)
1609228758539:# Loading packages
1609228758547:# install.packages("pacman")
1609228758547:# library("pacman")
1609228758547:# HTSeq是由python3下載的
1609228758548:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,parathyroidSE,dplyr,ggplot2)
1609228926832:Library("IsoformSwitchAnalyzeR")
1609228941604:#分析及預測可能的isoform switches and association alternative splicing
1609228941605:install.packages(pacman)
1609228955340:#分析及預測可能的isoform switches and association alternative splicing
1609228955340:install.packages("pacman"")
1609228955342:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio)
1609228955342:BiocManager::install("IsoformSwitchAnalyzeR")
1609228955343:Library("IsoformSwitchAnalyzeR")
1609228958383:#分析及預測可能的isoform switches and association alternative splicing
1609228958391:install.packages("pacman"")
1609228958391:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio)
1609228958391:BiocManager::install("IsoformSwitchAnalyzeR")
1609228958392:Library("IsoformSwitchAnalyzeR")
1609228981373:#分析及預測可能的isoform switches and association alternative splicing
1609228981381:install.packages("pacman")
1609228997341:install.packages("pacman")
1609229040356:library(datasets)
1609229050441:library("IsoformSwitchAnalyzeR")
1609229577956:library(IsoformSwitchAnalyzeR)
1609229583695:library(IsoformSwitchAnalyzeR)
1609229594128:library("IsoformSwitchAnalyzeR")
1609229608596:isoformSwitchAnalysisPart1()
1609229637318:#分析及預測可能的isoform switches and association alternative splicing
1609229637326:pacman::p_load(BiocManager,rio)
1609229645239:library(IsoformSwitchAnalyzeR)
1609229646389:isoformSwitchAnalysisPart1()
1609229694162:packageVersion('IsoformSwitchAnalyzeR')
1609229734556:#分析及預測可能的isoform switches and association alternative splicing
1609229734563:pacman::p_load(BiocManager,rio,IsoformSwitchAnalyzeR)
1609229739696:#分析及預測可能的isoform switches and association alternative splicing
1609229739704:pacman::p_load(BiocManager,rio,IsoformSwitchAnalyzeR)
1609229758453:#分析及預測可能的isoform switches and association alternative splicing
1609229758454:install.packages(pacman)
1609229776020:#分析及預測可能的isoform switches and association alternative splicing
1609229776029:install.packages("pacman")
1609229789778:install.packages("pacman")
1609229840411:pacman::p_load(BiocManager,rio,IsoformSwitchAnalyzeR)
1609230133772:packageVersion('IsoformSwitchAnalyzeR')
1609230144352:library(IsoformSwitchAnalyzeR)
1609230156484:packageVersion('IsoformSwitchAnalyzeR')
1609230289757:if (!requireNamespace("BiocManager", quietly = TRUE))
1609230289767:install.packages("BiocManager")
1609230289769:BiocManager::install("IsoformSwitchAnalyzeR")
1609230433638:packageVersion('IsoformSwitchAnalyzeR')
1609230598638:source('~/OneDrive - 國立台灣大學/RNAseq1/IsoformSwithchAnalyzeR.R')
1609230601763:install.packages("pacman")
1609230900439:if (!requireNamespace("BiocManager", quietly = TRUE))
1609230902048:install.packages("BiocManager")
1609230905647:BiocManager::install("SGSeq")
1609231146032:library(SGSeq)
1609231167250:library("SGSeq)
1609231169511:library("SGSeq)
1609231176083:library("SGSeq")
1609231188422:library(SGSeq)
1609231221986:pacman::p_load(SGSeq)
1609231489446:library(SGSeq)
1609231527827:pacman::p_load(SGSeq,rio)
1609231666512:help(SGSeq)
1609231721121:??SGSeq
1609231778664:BiocManager::install("DEXSeq")
1609231872858:pacman::p_load(BiocManager,biomaRt,DEXSeq,rio,tidyverse,RColorBrewer,pheatmap,DESeq2,Hmisc,parathyroidSE,dplyr,ggplot2)
1609254939923:install.packages("http://hartleys.github.io/QoRTs/QoRTs_LATEST.tar.gz",
1609254939924:repos=NULL,
1609254939924:type="source")
1609259219798:source('http://bioconductor.org/biocLite.R');
1609259230181:biocLite('DEXSeq');
1609259232374:biocLite('pasilla')
1609259354572:BiocManager::valid()
1609260232276:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1609260235271:list.files(pythonScriptsDir)
1609260247164:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1609280485931:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1609280487257:list.files(pythonScriptsDir)
1609280488132:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1609343637927:BiocManager::install("Rsubread")
1609344569315:library(Rsubread)
1609344744693:featureCounts(files="1Aligned.sortedByCoord.out.bam")
1609345505187:featureCounts(files="1Aligned.sortedByCoord.out.bam")
1609345782766:featureCounts(files="1Aligned.sortedByCoord.out.bam",isPairedEnd=TRUE)
1609492201899:q
1609492208988:quit
1609492588679:#HTSeq中的python scripts, 用在DEXSeq中
1609492588680:#HTSeq是在terminal中用pip install HTSeq下載的
1609492588681:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1609492589945:list.files(pythonScriptsDir)
1609492594657:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1609596325061:featureCounts -h
1609597138316:library(Rsubread)
1609597254128:buildindex(basename = "my_index", reference = "FA_GTF/Homo_sapiens.GRCh38.dna.primary_assembly.fa")
1609689380220:load("/Volumes/TOSHIBA EXT/RNAseq1/._.RData")
1609689441721:load("/Volumes/TOSHIBA EXT/RNAseq1/.RData")
1609689624459:raw_files <- paste0("DEXseq/",grep(".txt",list.files("./DEXseq/"),value = T))
1609689634130:raw_files
1609690145065:raw_files
1609690147849:raw_files <- paste0("DEXseq/",grep(".txt",list.files("./DEXseq/"),value = T))
1609690149837:raw_files
1609690158632:pacman::p_load(DEXSeq, rio, GenomicRanges, GenomicFeatures, GenomicAlignments, AnnotationHub)
1609691834075:#Loading data
1609691834081:raw_files <- paste0("DEXseq/",grep(".txt",list.files("./DEXseq/"),value = T))
1609737508809:pacman::p_load(DEXSeq, rio, GenomicRanges, GenomicFeatures, GenomicAlignments, AnnotationHub)
1609737663162:pacman::p_load(DEXSeq, rio, GenomicRanges, GenomicFeatures, GenomicAlignments, AnnotationHub)
1609738008155:#HTSeq中的python scripts, 用在DEXSeq中
1609738008168:#HTSeq是在terminal中用pip install HTSeq下載的
1609738008169:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1609738008173:list.files(pythonScriptsDir)
1609738008178:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1609738008180:#Loading data
1609738008180:raw_files <- paste0("DEXseq/",grep(".txt",list.files("./DEXseq/"),value = T))
1609738012773:#HTSeq中的python scripts, 用在DEXSeq中
1609738012774:#HTSeq是在terminal中用pip install HTSeq下載的
1609738012775:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1609738014848:list.files(pythonScriptsDir)
1609738015826:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1609738016848:#Loading data
1609738016856:raw_files <- paste0("DEXseq/",grep(".txt",list.files("./DEXseq/"),value = T))
1609738018825:raw_files
1609738060270:#Loading data
1609738060279:raw_files <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609738062164:raw_files
1609738139479:#Loading data
1609738139488:raw_files <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609738140613:raw_files
1609738148283:#列出指定目錄檔案
1609738148291:list.files(path = "DEXseq/",all.files=TRUE)
1609738150781:system.file(path = "DEXseq/")
1609738164164:system.file(path = "DEXseq/")
1609738165771:inDir = list.files(path = "DEXseq/",all.files=TRUE, pattern = "bam.txt")
1609738167407:inDir
1609738173558:basename(inDir)
1609738175679:flattenedFile = list.files(path = "DEXseq/",all.files=TRUE, pattern="gff$")
1609738177180:basename(flattenedFile)
1609738183088:#prepare a sample table表格
1609738183096:sampleTable = data.frame(
1609738183097:row.names = c( "1bam", "2bam", "3bam", "4bam" ),
1609738183097:condition = c("control", "knockdown", "control",
1609738183098:"knockdown"),
1609738183098:libType = c( "paired-end", "paired-end",
1609738183099:"paired-end", "paired-end" ) )
1609738190322:#看設定好的dataframe,表格
1609738190331:View(sampleTable)
1609738465666:flattenedFile = list.files(path = "DEXseq/",all.files=TRUE, pattern="gff$")
1609738466604:basename(flattenedFile)
1609738487243:dxd = DEXSeqDataSetFromHTSeq(
1609738487244:countFiles,
1609738487244:sampleData=sampleTable,
1609738487245:design= ~ sample + exon + condition:exon,
1609738487246:flattenedfile=flattenedFile )
1609738581811:pacman::p_load(DEXSeq)
1609738596659:library(DEXSeq)
1609738654418:biocLite("DEXSeq")
1609738673521:BiocManager::install("DEXSeq")
1609738952805:BiocManager::install("DEXSeq")
1609738986592:dxd = DEXSeqDataSetFromHTSeq(
1609738986594:countFiles,
1609738986594:sampleData=sampleTable,
1609738986594:design= ~ sample + exon + condition:exon,
1609738986595:flattenedfile=flattenedFile )
1609738999145:?DEXSeqDataSetFromHTSeq
1609739035679:browseVignettes("DEXSeq")
1609739630756:source("https://bioconductor.org/packages/DEXSeq/")
1609739765554:dxd = DEXSeqDataSetFromHTSeq(
1609739765555:countFiles,
1609739765555:sampleData=sampleTable,
1609739765556:design= ~ sample + exon + condition:exon,
1609739765557:flattenedfile=flattenedFile )
1609740426070:#看設定好的dataframe,表格
1609740426071:sampleTable
1609740618783:library(DEXSeq)
1609740620053:dxd = DEXSeqDataSetFromHTSeq(
1609740620054:countFiles,
1609740620055:sampleData=sampleTable,
1609740620055:design= ~ sample + exon + condition:exon,
1609740620056:flattenedfile=flattenedFile )
1609740665145:#Loading data
1609740665155:countFiles <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609740665796:countFiles
1609740669541:library(DEXSeq)
1609740670831:dxd = DEXSeqDataSetFromHTSeq(
1609740670840:countFiles,
1609740670840:sampleData=sampleTable,
1609740670841:design= ~ sample + exon + condition:exon,
1609740670841:flattenedfile=flattenedFile )
1609740719106:flattenedFile = list.files(path = "DEXseq/",all.files=TRUE, pattern="gff$")
1609740719671:basename(flattenedFile)
1609740728954:library(DEXSeq)
1609740729438:dxd = DEXSeqDataSetFromHTSeq(
1609740729439:countFiles,
1609740729445:sampleData=sampleTable,
1609740729445:design= ~ sample + exon + condition:exon,
1609740729445:flattenedfile=flattenedFile )
1609740815734:flattenedFile = list.files(inDir, pattern="gff$",full.names = TRUE)
1609740818516:basename(flattenedFile)
1609740822164:basename(flattenedFile)
1609740828235:flattenedFile = list.files(path = "DEXseq/",all.files=TRUE, pattern="gff$")
1609740829042:basename(flattenedFile)
1609740893282:A = system.file("extdata", package = "DEXseq")
1609740927930:B = list.files(A, pattern = "bam.txt$", full.names = TRUE)
1609740942107:basename(B)
1609741210276:flattenedFile = list.files(path = "DEXseq/",all.files=TRUE, pattern="gff$")
1609741210926:basename(flattenedFile)
1609741273058:#prepare a sample table表格
1609741273060:sampleTable = data.frame(
1609741273060:row.names = c("3bam", "4bam" ),
1609741273061:condition = c("control",
1609741273062:"knockdown"),
1609741273062:libType = c( "paired-end", "paired-end") )
1609741276757:#看設定好的dataframe,表格
1609741276766:sampleTable
1609741278172:#另開表格用View(sampleTable)
1609741278181:read.csv(file = "DEXseq/sampleTable.csv")
1609741292821:#看設定好的dataframe,表格
1609741292830:sampleTable
1609741296148:#另開表格用View(sampleTable)
1609741296149:read.csv(file = "DEXseq/sampleTable.csv")
1609741317837:#另開表格用View(sampleTable)
1609741317845:read.csv(file = "DEXseq/sampleTable.csv")
1609741375481:#另開表格用View(sampleTable)
1609741375483:read.csv(file = "DEXseq/sampleTable.csv")
1609741379643:#另開表格用View(sampleTable)
1609741379651:read.csv(file = "DEXseq/sampleTable.csv")
1609741397411:#另開表格用View(sampleTable)
1609741397412:read.csv(file = "DEXseq/sampleTable.csv")
1609741399457:#看設定好的dataframe,表格
1609741399466:sampleTable
1609741400031:#另開表格用View(sampleTable)
1609741400032:read.csv(file = "DEXseq/sampleTable.csv")
1609741407133:library(DEXSeq)
1609741408304:dxd = DEXSeqDataSetFromHTSeq(
1609741408313:countFiles,
1609741408313:sampleData=sampleTable,
1609741408313:design= ~ sample + exon + condition:exon,
1609741408314:flattenedfile=flattenedFile )
1609741448191:#看設定好的dataframe,表格
1609741448199:sampleTable
1609741543771:library(GenomicRanges)
1609741544771:library(GenomicFeatures)
1609741548104:library(GenomicAlignments)
1609741551500:library(GenomicRanges)
1609741552341:library(GenomicFeatures)
1609741553526:library(GenomicAlignments)
1609741772962:BiocManager::install("parathyroidSE")
1609742642479:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="grch38.ensembl.org" )
1609742823946:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="grch37.ensembl.org" )
1609742972365:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="grch38.ensembl.org" )
1609744850393:dxd = DEXSeqDataSetFromHTSeq(
1609744850399:countFiles,
1609744850400:sampleData=sampleTable,
1609744850400:design= ~ sample + exon + condition:exon,
1609744850401:flattenedfile=flattenedfile )
1609745054853:flattenedFile = list.files(inDir, pattern="gff$", full.names=TRUE)
1609745055734:basename(flattenedFile)
1609745214392:basename(inDir)
1609745225570:flattenedFile = list.files(inDir, pattern="gff$", all.names=TRUE)
1609745255430:flattenedFile = list.files(path = "DEXseq/", pattern="gff$", all.names=TRUE)
1609745257054:basename(flattenedFile)
1609745262151:flattenedFile = list.files(path = "DEXseq/", pattern="gff$", full.names=TRUE)
1609745263233:basename(flattenedFile)
1609745269393:library(DEXSeq)
1609745270177:dxd = DEXSeqDataSetFromHTSeq(
1609745270179:countFiles,
1609745270179:sampleData=sampleTable,
1609745270180:design= ~ sample + exon + condition:exon,
1609745270180:flattenedfile=flattenedfile )
1609745353130:dxd = DEXSeqDataSetFromHTSeq(
1609745353139:countFiles,
1609745353139:sampleData=sampleTable,
1609745353139:design= ~ sample + exon + condition:exon,
1609745353140:flattenedfile =  flattenedFile)
1609745443934:dxd = DEXSeqDataSetFromHTSeq(
1609745443943:countFiles,
1609745443943:sampleData=sampleTable,
1609745443943:design= ~ sample + exon + condition:exon,
1609745443944:flattenedfile =  flattenedfile)
1609745470023:flattenedfile = list.files(path = "DEXseq/", pattern="gff$", full.names=TRUE)
1609745470878:basename(flattenedfile)
1609745475283:dxd = DEXSeqDataSetFromHTSeq(
1609745475291:countFiles,
1609745475292:sampleData=sampleTable,
1609745475292:design= ~ sample + exon + condition:exon,
1609745475293:flattenedfile =  flattenedfile)
1609745630291:flattenedfile = file.path(inDir, enGRC38.gff)
1609745656723:flattenedfile = file.path("DEXseq/", enGRC38.gff)
1609745820412:flattenedfile = system.file("DEXseq/enGRC38.gff", package = "DEXseq/")
1609745822107:basename(flattenedfile)
1609745845516:flattenedfile = system.file("enGRC38.gff", package = "DEXseq/")
1609745846129:basename(flattenedfile)
1609745861181:flattenedfile
1609745865474:flattenedfile = system.file("enGRC38.gff", package = "DEXseq/")
1609745866010:flattenedfile
1609745947616:flattenedfile = system.file("enGRC38.gff")
1609745948338:flattenedfile
1609745959074:flattenedfile = list.file("enGRC38.gff")
1609745964276:flattenedfile = list.files("enGRC38.gff")
1609745965004:flattenedfile
1609746145597:#Loading data
1609746145605:countFiles <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609746146184:countFiles
1609746235692:flattenedfile <- import("DEXseq/",format = "gff")
1609746262857:pacman::p_load(rio)
1609746268229:flattenedfile <- import("DEXseq/",format = "gff")
1609746297883:?import
1609746339059:flattenedfile <- import("DEXseq/enGRC38.gff",format = "gff")
1609746344376:flattenedfile <- import("DEXseq/enGRC38.gff",format = "gff")
1609746366008:flattenedfile <- import(file = "DEXseq/enGRC38.gff")
1609748074922:#HTSeq中的python scripts, 用在DEXSeq中
1609748074927:#HTSeq是在terminal中用pip install HTSeq下載的
1609748074927:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1609748075833:list.files(pythonScriptsDir)
1609748714455:featureCounts()
1609748770813:featureCounts(object = pythonScriptsDir)
1609826082194:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="asia.ensembl.org" )
1609826086264:library(GenomicRanges)
1609826093224:library(GenomicFeatures)
1609826125644:library(GenomicAlignments)
1609826128207:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="asia.ensembl.org" )
1609826541309:#First, we download the current human gene model annotation from Ensembl via Biomart and create a transcript data base from these.
1609826541313:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="asia.ensembl.org" )
1609828812770:#Next, we collapse the gene models into counting bins.
1609828812784:exonicParts = exonicParts( hse, linked.to.single.gene.only = TRUE )
1609828896638:#First, we download the current human gene model annotation from Ensembl via Biomart and create a transcript data base from these.
1609828896640:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="www.ensembl.org" )
1609829453781:mart <- biomaRt::useMart(biomart="ENSEMBL_MART_ENSEMBL",
1609829453791:host="www.ensembl.org")
1609829458007:biomaRt::listDatasets(mart)
1609829488639:#First, we download the current human gene model annotation from Ensembl via Biomart and create a transcript data base from these.
1609829488648:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="www.ensembl.org" )
1609829580000:#First, we download the current human gene model annotation from Ensembl via Biomart and create a transcript data base from these.
1609829580010:hse = makeTxDbFromBiomart( biomart="ensembl", dataset="hsapiens_gene_ensembl", host="www.ensembl.org" )
1609830002727:library(biomaRt)
1609830004069:grc38 = useEnsembl(biomart="ensembl", GRCh=38)
1609830451642:pacman::p_load(dplyr)
1609831592494:source("load_SubreadOutput.R")
1609831663098:source("RNAseq1/load_SubreadOutput.R")
1609831675691:samp <- data.frame(row.names = c("control1","knockdown2","contrl3","knockdown"),
1609831675696:condition = rep(c("control","knockdown"),each=2))
1609831684206:samp
1609831736311:samp <- data.frame(row.names = c("siNeg","siDHX8","siNeg","siDHX8"),
1609831736316:condition = rep(c("control","knockdown"),each=2))
1609831745850:samp <- data.frame(row.names = c("siNeg","siDHX8","siNeg","siDHX8"),
1609831745852:condition = rep(c("control","knockdown"),each=2))
1609831746790:samp
1609831829970:samp <- data.frame(row.names = c("control1","control3","knockdown2","knockdown4"),
1609831829973:condition = rep(c("control","knockdown"),each=2))
1609831831024:samp
1609832404042:biocLite("DEXSeq")
1609832425083:pancam::p_load(biocLit)
1609832427936:pancam::p_load(biocLite)
1609832442448:pacman::p_load(biocLite)
1609832487526:source("https://bioconductor.org/biocLite.R")
1609832515267:BiocManager::install(biocLite)
1609832526556:BiocManager::install(biocLite.R)
1609832545948:BiocManager::install(DEXSeq
1609832552508:BiocManager::install(DEXSeq)
1609832555282:BiocManager::install(DEXSeq)
1609832572717:BiocManager::install("DEXSeq")
1609832634901:library(DEXSeq)
1609832946956:BiocStyle::Biocpkg("DEXSeq")
1609833319074:a = system.file("extdata", package = "DHX8/")
1609833321849:a
1609833333287:a = system.file("extfile", package = "DHX8/")
1609833334191:a
1609833367915:a = system.file("extfile", package = "RNAseq1/DEXseq/")
1609833368546:a
1609833374961:a = system.file("extdata", package = "RNAseq1/DEXseq/")
1609833375430:a
1609833390557:a <- system.file("extdata", package = "RNAseq1/DEXseq/")
1609833391273:a
1609833567390:if (!requireNamespace("BiocManager", quietly = TRUE))
1609833567398:install.packages("BiocManager")
1609833567470:BiocManager::install("DEXSeq")
1609833587787:BiocManager::install("pasilla")
1609833699968:inDir <- system.file("extdata", package="pasilla")
1609833699984:countFiles <- list.files(inDir, pattern="fb.txt$", full.names=TRUE)
1609833712669:inDir
1609833720943:countFiles
1609833767891:View(countFiles)
1609833800443:gffFile <- list.files(inDir, pattern="gff$", full.names=TRUE)
1609833803796:gffFile
1609833853306:sampleTable <- read.delim("sample.group.txt", sep="\t", header=T, row.names = 1)
1609834011473:listMarts(host="www.ensembl.org")
1609834014902:BiocManager::install("biomaRt")
1609834072800:listMarts(host="www.ensembl.org")
1609834082232:BiocManager::install("parathyroidSE")
1609835670572:row.names(data) <- raw_data$Gene_ID
1609835675444:## Loading files
1609835675445:files <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609835676423:files
1609835858119:sampleTable = date.frame(
1609835858121:row.names = c("control1", "control3","knockdown2", "knockdown4"),
1609835858121:condition = c("control", "control", "knockdown", "knockdown"),
1609835858122:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1609835858122:)
1609835867438:pacman::p_load(BiocManager,rio,,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1609835896030:sampleTable = date.frame(
1609835896031:row.names = c("control1", "control3","knockdown2", "knockdown4"),
1609835896032:condition = c("control", "control", "knockdown", "knockdown"),
1609835896032:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1609835896033:)
1609835929707:sampleTable = data.frame(
1609835929709:row.names = c("control1", "control3","knockdown2", "knockdown4"),
1609835929709:condition = c("control", "control", "knockdown", "knockdown"),
1609835929710:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1609835929711:)
1609835938977:sampleTable
1609835961803:read.csv(sampleTable)
1609836085801:export(sampleTable, "DEXseq/", format = "csv")
1609836111619:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1609836115063:read.csv(sampleTable)
1609836136103:read.csv(sampleTable)
1609836149588:sampleTable
1609836172335:read.csv(sampleTable)
1609836206957:library(readr)
1609836207066:sampleTable <- read_csv("DEXseq/sampleTable.csv")
1609836207518:View(sampleTable)
1609836236428:View(sampleTable)
1609836244802:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1609836246462:View(sampleTable)
1609836251769:sampleTable = data.frame(
1609836251778:row.names = c("control1", "control3","knockdown2", "knockdown4"),
1609836251778:condition = c("control", "control", "knockdown", "knockdown"),
1609836251779:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1609836251779:)
1609836253930:sampleTable
1609836255190:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1609836256999:View(sampleTable)
1609836528851:library("DEXSeq")
1609836690384:pacman::p_load(BiocManager,rio,,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1609836704553:pacman::p_load(BiocManager,rio,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1609836936915:flattenedFile = import("DEXseq/enGRC38.gff", format = "gff")
1609836991340:flattenedFile <- import("DEXseq/enGRC38.gff", format = "gff")
1609837009913:flattenedFile <- import("DEXseq/enGRC38.gff")
1609837169339:pacman::p_load(BiocManager,rtracklayer,rio,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1609837263105:flattenedFile <- import.gff("DEXseq/enGRC38.gff")
1609837284674:flattenedFile
1609837298483:library("DEXSeq")
1609837299705:dxd = DEXSeqDataSetFromHTSeq(
1609837299706:files,
1609837299707:sampleData = sampleTable,
1609837299707:design=~ sample + exon + condition:exon,
1609837299708:flattenedfile = flattenedFile
1609837299709:)
1609837325790:## Loading files
1609837325791:files <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609837327206:files
1609837330775:dxd = DEXSeqDataSetFromHTSeq(
1609837330776:files,
1609837330777:sampleData = sampleTable,
1609837330777:design=~ sample + exon + condition:exon,
1609837330778:flattenedfile = flattenedFile
1609837330779:)
1609837417024:dxd = DEXSeqDataSetFromHTSeq(
1609837417026:file = files,
1609837417027:sampleData = sampleTable,
1609837417027:design=~ sample + exon + condition:exon,
1609837417029:flattenedfile = flattenedFile
1609837417030:)
1609837443201:?DEXSeqDataSetFromHTSeq
1609837475611:dxd = DEXSeqDataSetFromHTSeq(
1609837475619:files, sampleTable,
1609837475620:design=~ sample + exon + condition:exon,
1609837475620:flattenedfile = flattenedFile
1609837475621:)
1609837526172:files
1609837782465:countfiles <- import(files[1], format = "csv")
1609837845981:## Loading files
1609837845990:files <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609837848581:files
1609837853140:## 1.creat project,在project下(右下角工具列) creat new folder
1609837853140:## 2.把檔案從Folder拖到new folder中
1609837853141:## 3.用grep匯入到project作統整
1609837853142:##paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1609837853142:##如果不想要有任何分隔符號，可以使用 paste0
1609837853143:## Loading files
1609837853146:files <- paste0("raw count/",grep(".count",list.files("./raw count/"),value = T))
1609837854264:files
1609837857910:## Making dataFrame
1609837857919:counts.df <- import(files[1],format = "csv")
1609837863923:## Loading files
1609837863924:files <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609837864872:files
1609837889867:countfiles <- export(files[1], format = "csv")
1609837918562:countfiles <- import(files, format = "csv")
1609838099574:files[1]
1609838222672:inDir = system.file(".txt", package = "DEXseq/")
1609838232974:inDir
1609838237876:inDir = system.file(".txt", package = "DEXseq")
1609838239177:inDir
1609838261458:inDir = system.file(".txt", package = "cufflink/DHX8_1/")
1609838262414:inDir
1609838363713:countFiles = list.files(files, pattern="bam.txt$", full.names = TRUE)
1609838372103:countFiles
1609838382629:countFiles = list.files(files[1], pattern="bam.txt$", full.names = TRUE)
1609838383489:countFiles
1609838394910:## Loading files
1609838394911:files <- paste0("DEXseq/",grep(".txt",list.files("DEXseq/"),value = T))
1609838395581:files[1]
1609838396298:countFiles = list.files(files[1], pattern="bam.txt$", full.names = TRUE)
1609838396856:countFiles
1609838440604:countFiles = list.files(files[1], pattern=".txt$", full.names = TRUE)
1609838442689:countFiles
1609838447756:## Loading files
1609838447765:files <- paste0("DEXseq/",grep("bam.txt",list.files("DEXseq/"),value = T))
1609838448242:files[1]
1609838460831:## Loading files
1609838460840:files <- paste0("DEXseq/",grep("bam.txt$",list.files("DEXseq/"),value = T))
1609838461352:files
1609838474457:countFiles = list.files(files, pattern=".txt$", full.names = TRUE)
1609838474966:countFiles
1609838498966:countFiles = list.files(path = "DEXseq/", pattern=".txt$", full.names = TRUE)
1609838499393:countFiles
1609838514400:countFiles = list.files(path = "DEXseq", pattern=".txt$", full.names = TRUE)
1609838514842:countFiles
1609838534884:dxd = DEXSeqDataSetFromHTSeq(
1609838534894:countFiles  , sampleTable,
1609838534894:design=~ sample + exon + condition:exon,
1609838534895:flattenedfile = flattenedFile
1609838534897:)
1609838572194:dxd = DEXSeqDataSetFromHTSeq(
1609838572195:"countFiles"  , sampleTable,
1609838572196:design=~ sample + exon + condition:exon,
1609838572196:flattenedfile = flattenedFile
1609838572197:)
1609838581294:dxd = DEXSeqDataSetFromHTSeq(
1609838581296:"files"  , sampleTable,
1609838581296:design=~ sample + exon + condition:exon,
1609838581297:flattenedfile = flattenedFile
1609838581298:)
1609838611526:dxd = DEXSeqDataSetFromHTSeq(
1609838611534:countfiles = files  , sampleTable,
1609838611535:design=~ sample + exon + condition:exon,
1609838611536:flattenedfile = flattenedFile
1609838611537:)
1609920204298:## Loading files
1609920204303:files <- paste0("geneCounts1/",grep("ReadsPerGene$",list.files("geneCounts1/"),value = T))
1609920205853:files
1609920239793:## Loading files
1609920239801:files <- paste0("geneCounts1/",grep("out.tab$",list.files("geneCounts1/"),value = T))
1609920240654:files
1609920247992:## Loading files
1609920248000:files <- paste0("geneCounts1/",grep("out.tab$",list.files("./geneCounts1/"),value = T))
1609920250648:files
1609920258349:countFiles = list.files(path = "DEXseq", pattern=".txt$", full.names = TRUE)
1609920259383:countFiles
1609920277758:countFiles = list.files(files, pattern=".txt$", full.names = TRUE)
1609920280934:countFiles
1609920287025:countFiles = list.files(files, pattern=".tab$", full.names = TRUE)
1609920288553:countFiles
1609920305247:countFiles = list.files("files", pattern=".tab$", full.names = TRUE)
1609920305964:countFiles
1609920316429:countFiles = list.files("geneCounts1/", pattern=".tab$", full.names = TRUE)
1609920317126:countFiles
1609920330413:# Loading data
1609920330421:sampleTable = data.frame(
1609920330422:row.names = c("control1", "control3","knockdown2", "knockdown4"),
1609920330423:condition = c("control", "control", "knockdown", "knockdown"),
1609920330423:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1609920330423:)
1609920335093:sampleTable
1609920336808:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1609920362484:View(sampleTable)
1609920369467:flattenedFile <- import.gff("DEXseq/enGRC38.gff")
1609920503392:flattenedFile <- list.dirs("DEXseq/", pattern="gff$", full.names = TRUE)
1609920509812:flattenedFile <- list.dirs("DEXseq/", pattern=".gff$", full.names = TRUE)
1609920538379:flattenedFile <- list.dirs("DEXseq/", pattern=".gff$", value = T)
1609920539008:flattenedFile
1609920562791:flattenedFile <- list.files("DEXseq/", pattern=".gff$", value = T)
1609920578667:flattenedFile <- list.files("DEXseq/", pattern=".gff$", full.names = TRUE)
1609920579597:flattenedFile
1609920585610:dxd = DEXSeqDataSetFromHTSeq(
1609920585619:countfiles = files  , sampleTable,
1609920585620:design=~ sample + exon + condition:exon,
1609920585621:flattenedfile = flattenedFile
1609920585621:)
1609920589665:library("DEXSeq")
1609920954429:dxd = DEXSeqDataSetFromHTSeq(
1609920954442:countfiles = files  , sampleTable,
1609920954443:design=~ sample + exon + condition:exon,
1609920954444:flattenedfile = flattenedFile
1609920954445:)
1609920971558:dxd = DEXSeqDataSetFromHTSeq(
1609920971566:countfiles = files  , sampleTable,
1609920971567:design=~ sample + exon + condition:exon,
1609920971567:flattenedfile = flattenedFile)
1609921020050:basename(flattenedFile)
1609921044524:basename(countFiles)
1609921134117:a = data.frame(
1609921134121:row.names = c( "treated1", "treated2", "treated3",
1609921134122:"untreated1", "untreated2", "untreated3", "untreated4" ),
1609921134123:condition = c("knockdown", "knockdown", "knockdown",
1609921134124:"control", "control", "control", "control" ),
1609921134125:libType = c( "single-end", "paired-end", "paired-end",
1609921134125:"single-end", "single-end", "paired-end", "paired-end" ) )
1609921139636:a
1609921211713:# Loading data
1609921211732:sampleTable = data.frame(
1609921211733:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1609921211736:condition = c("control", "knockdown", "control", "knockdown"),
1609921211737:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1609921211739:)
1609921213117:sampleTable
1609921257101:# Loading data
1609921257102:sampleTable = data.frame(
1609921257103:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1609921257103:condition = c("control", "knockdown", "control", "knockdown"),
1609921257104:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1609921257105:)
1609921259701:sampleTable
1609921262380:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1609921281509:read.csv(sampleTable)
1609921290987:write.csv(sampleTable)
1609921313274:read.csv(sampleTable)
1609921322553:Write.csv(sampleTable)
1609921327474:write.csv(sampleTable)
1609921363702:sampleTable
1609921498567:write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1609921513014:read.csv(sampleTable)
1609921542953:sampleTable
1609922337693:## Loading files
1609922337701:files <- paste0("geneCounts1/",grep(".txt$",list.files("./geneCounts1/"),value = T))
1609922338659:files
1609922342260:countFiles = list.files("geneCounts1/", pattern=".tab$", full.names = TRUE)
1609922343555:basename(countFiles)
1609922353069:countFiles = list.files("geneCounts1/", pattern=".txt$", full.names = TRUE)
1609922353657:basename(countFiles)
1609922371043:a = data.frame(
1609922371045:row.names = c( "treated1", "treated2", "treated3",
1609922371046:"untreated1", "untreated2", "untreated3", "untreated4" ),
1609922371046:condition = c("knockdown", "knockdown", "knockdown",
1609922371047:"control", "control", "control", "control" ),
1609922371048:libType = c( "single-end", "paired-end", "paired-end",
1609922371048:"single-end", "single-end", "paired-end", "paired-end" ) )
1609922372146:a
1609922406017:sampleTable
1609922410947:dxd = DEXSeqDataSetFromHTSeq(
1609922410948:countfiles = files  , sampleTable,
1609922410949:design=~ sample + exon + condition:exon,
1609922410950:flattenedfile = flattenedFile)
1609922433396:dxd = DEXSeqDataSetFromHTSeq(
1609922433405:countfiles, sampleTable,
1609922433406:design=~ sample + exon + condition:exon,
1609922433406:flattenedfile = flattenedFile)
1609922458139:dxd = DEXSeqDataSetFromHTSeq(
1609922458147:countfiles,
1609922458148:sampleData = sampleTable,
1609922458148:design=~ sample + exon + condition:exon,
1609922458149:flattenedfile = flattenedFile)
1609922472915:dxd = DEXSeqDataSetFromHTSeq(
1609922472917:countFiles,
1609922472919:sampleData = sampleTable,
1609922472919:design=~ sample + exon + condition:exon,
1609922472920:flattenedfile = flattenedFile)
1609922509217:library("DEXSeq")
1609922510085:dxd = DEXSeqDataSetFromHTSeq(
1609922510093:countFiles,
1609922510094:sampleData = sampleTable,
1609922510095:design= ~ sample + exon + condition:exon,
1609922510096:flattenedfile = flattenedFile)
1609922543374:?DEXSeqDataSetFromHTSeq
1609922578618:dxd = DEXSeqDataSetFromHTSeq(
1609922578628:countFiles,
1609922578628:sampleTable,
1609922578629:design= ~ sample + exon + condition:exon,
1609922578629:flattenedfile = flattenedFile)
1609924081233:dxd = DEXSeqDataSetFromHTSeq(
1609924081239:countfiles=file.path("geneCounts1/, countFiles"),
1609924081240:sampleTable,
1609924081241:design= ~ sample + exon + condition:exon,
1609924081241:flattenedfile = flattenedFile)
1609924097266:dxd = DEXSeqDataSetFromHTSeq(
1609924097275:countfiles=file.path("geneCounts1/", countFiles),
1609924097275:sampleTable,
1609924097276:design= ~ sample + exon + condition:exon,
1609924097276:flattenedfile = flattenedFile)
1609924117305:dxd = DEXSeqDataSetFromHTSeq(
1609924117313:countfiles=file.path("geneCounts1/countFiles"),
1609924117313:sampleTable,
1609924117314:design= ~ sample + exon + condition:exon,
1609924117314:flattenedfile = flattenedFile)
1609924132734:dxd = DEXSeqDataSetFromHTSeq(
1609924132742:countfiles=file.path(countFiles),
1609924132743:sampleTable,
1609924132743:design= ~ sample + exon + condition:exon,
1609924132743:flattenedfile = flattenedFile)
1609924438984:dxd = DEXSeqDataSetFromHTSeq(
1609924438989:countFiles,
1609924438989:sampleTable,
1609924438989:design= ~ sample + exon + condition:exon,
1609924438990:flattenedfile = flattenedFile)
1609924638867:sampleTable
1611644101139:## Loading files
1611644101142:files <- paste0("geneCounts1/",grep(".txt$",list.files("./geneCounts1/"),value = T))
1611644106631:files
1611644111084:countFiles = list.files("geneCounts1/", pattern=".txt$", full.names = TRUE)
1611644112064:basename(countFiles)
1611644113981:# Loading data
1611644113982:sampleTable = data.frame(
1611644113983:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1611644113984:condition = c("control", "knockdown", "control", "knockdown"),
1611644113985:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1611644113985:)
1611644115532:write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1611644116631:sampleTable
1611644118032:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1611644123028:pacman::p_load(BiocManager,rtracklayer,rio,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1611644192016:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1611644196760:View(sampleTable)
1611644203279:flattenedFile <- list.files("DEXseq/", pattern=".gff$", full.names = TRUE)
1611644206135:basename(flattenedFile)
1611644208316:library("DEXSeq")
1611644245837:dxd = DEXSeqDataSetFromHTSeq(
1611644245846:countFiles,
1611644245847:sampleTable,
1611644245847:design= ~ sample + exon + condition:exon,
1611644245848:flattenedfile = flattenedFile)
1611644485359:dxd = DEXSeqDataSetFromHTSeq(
1611644485362:countFiles,
1611644485362:sampleData = sampleTable,
1611644485363:design= ~ sample + exon + condition:exon,
1611644485364:flattenedfile = flattenedFile)
1611644628755:## Loading files
1611644628757:files <- paste0(grep(".txt$",list.files("./geneCounts1/"),value = T))
1611644630560:files
1611644633867:countFiles = list.files("geneCounts1/", pattern=".txt$", full.names = TRUE)
1611644634619:basename(countFiles)
1611644644164:dxd = DEXSeqDataSetFromHTSeq(
1611644644173:countFiles,
1611644644173:sampleData = sampleTable,
1611644644174:design= ~ sample + exon + condition:exon,
1611644644174:flattenedfile = flattenedFile)
1611644733646:flattenedFile <- list.files("FA_GTF/", pattern=".gff$", full.names = TRUE)
1611644734340:basename(flattenedFile)
1611644751260:basename(flattenedFile)
1611644754189:flattenedFile <- list.files("FA_GTF/", pattern=".gff$", full.names = TRUE)
1611644754816:basename(flattenedFile)
1611644758543:dxd = DEXSeqDataSetFromHTSeq(
1611644758552:countFiles,
1611644758552:sampleData = sampleTable,
1611644758553:design= ~ sample + exon + condition:exon,
1611644758554:flattenedfile = flattenedFile)
1611644836609:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1611644842134:basename(flattenedFile)
1611648314452:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1611648315180:basename(flattenedFile)
1611648338844:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1611648340152:basename(flattenedFile)
1611648341119:library("DEXSeq")
1611648346692:dxd = DEXSeqDataSetFromHTSeq(
1611648346695:countFiles,
1611648346695:sampleData = sampleTable,
1611648346696:design= ~ sample + exon + condition:exon,
1611648346698:flattenedfile = flattenedFile)
1611648598518:basename(countFiles)
1611652267427:geneID <- list.files("./geneCounts1/", pattern=".txt$", full.names = TRUE)
1611652274554:geneID
1611652323405:geneID <- list.files("./geneCounts1/DHX8_KD_1_DEXSeq_count", pattern=".txt$", full.names = TRUE)
1611652323960:geneID
1611652331487:geneID <- list.files("./geneCounts1/DHX8_KD_1_DEXSeq_count.txt", pattern=".txt$", full.names = TRUE)
1611652332965:geneID
1611652678556:#挑幾個基因跑，免得跑太久
1611652678579:inDir = (./DEXSeq_Result/Yun insterested gene_ENSG.txt")
1611652678582:genesForSubset = read.table(
1611652678583:file.path(inDir,"DEXSeq_Result/" ,
1611652678583:stringsAsFactors=FALSE)[[1]]
1611652678584:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611652687666:#挑幾個基因跑，免得跑太久
1611652687674:inDir = ("./DEXSeq_Result/Yun insterested gene_ENSG.txt")
1611652693645:inDir
1611652708748:#挑幾個基因跑，免得跑太久
1611652708756:inDir = ("./Yun insterested gene_ENSG.txt")
1611652710687:inDir
1611652754048:#挑幾個基因跑，免得跑太久
1611652754056:inDir = ("./DEXseq.py")
1611652754797:inDir
1611652764094:#挑幾個基因跑，免得跑太久
1611652764094:inDir = ("./DEXSeq_Result/")
1611652764671:inDir
1611652767589:genesForSubset = read.table(
1611652772395:file.path(inDir,"DEXSeq_Result/Yun insterested gene.txt" ,
1611652772403:stringsAsFactors=FALSE)[[1]]
1611652774355:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611652796457:genesForSubset = read.table(
1611652796459:file.path(inDir,"DEXSeq_Result/Yun insterested gene.txt" ),
1611652796459:stringsAsFactors=FALSE)[[1]]
1611652821050:#挑幾個基因跑，免得跑太久
1611652821058:inDir = system.file("./DEXSeq_Result/")
1611652821705:inDir
1611652846167:#挑幾個基因跑，免得跑太久
1611652846176:inDir = system.file("extdata", package="./DEXSeq_Result/")
1611652846755:inDir
1611652853066:#挑幾個基因跑，免得跑太久
1611652853074:inDir = system.files("extdata", package="./DEXSeq_Result/")
1611652853656:inDir
1611652865713:#挑幾個基因跑，免得跑太久
1611652865721:inDir = system.file("extdata", package="./DEXSeq_Result/")
1611652934058:#挑幾個基因跑，免得跑太久
1611652934067:inDir = system.file("extdata", package="./DEXSeq_Result/")
1611652935476:countFiles = list.files(inDir, pattern="count.txt", full.names = TRUE)
1611652936463:basename(countFiles)
1611652991706:countFiles = list.files("geneCounts1/", pattern=".txt$", full.names = TRUE)
1611652992702:basename(countFiles)
1611653009865:genesForSubset = read.table(
1611653009873:file.path("DEXSeq_Result/Yun insterested gene.txt" ),
1611653009874:stringsAsFactors=FALSE)[[1]]
1611653012505:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611653040628:genesForSubset = read.table(
1611653040637:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1611653040637:stringsAsFactors=FALSE)[[1]]
1611653041979:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611653056259:colData(dxd)
1611653083057:head(counts(dxd),5)
1611653101120:split( seq_len(ncol(dxd)), colData(dxd)$exon )
1611653110847:head( featureCounts(dxd), 5 )
1611653129224:head( rowRanges(dxd), 3 )
1611653151420:sampleAnnotation( dxd )
1611653162610:dxd = estimateSizeFactors( dxd )
1611653194166:plotDispEsts( dxd )
1611653208489:dxd = estimateDispersions( dxd )
1611653237548:plotDispEsts( dxd )
1611653285844:plotDEXSeq( dxr2, "FBgn0010909", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1611668072186:plotDEXSeq( dxr2, "FBgn0010909", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1611668075900:pacman::p_load(BiocManager,rtracklayer,rio,pheatmap,DESeq2,Hmisc,dplyr,ggplot2)
1611668111282:library("DEXSeq")
1611668304531:genesForSubset = read.table(
1611668304534:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1611668304535:stringsAsFactors=FALSE)[[1]]
1611668305531:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611668314181:plotDispEsts( dxd )
1611668440223:plotDEXSeq( dxr2, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1611668562478:genesForSubset = read.table(
1611668562480:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1611668562481:stringsAsFactors=FALSE)[[1]]
1611668564920:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611668566185:colData(dxd)
1611668567450:head(counts(dxd),5)
1611668581591:split( seq_len(ncol(dxd)), colData(dxd)$exon )
1611668584700:head( featureCounts(dxd), 5 )
1611668586365:head( rowRanges(dxd), 3 )
1611668587625:sampleAnnotation( dxd )
1611668589342:dxd = estimateSizeFactors( dxd )
1611668593499:dxd = estimateDispersions( dxd )
1611668611440:plotDispEsts( dxd )
1611668612821:plotDEXSeq( dxr2, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1611668667497:dxd = testForDEU( dxd )
1611668686218:dxd = estimateExonFoldChanges( dxd, fitExpToVar="condition")
1611668708492:dxr1 = DEXSeqResults( dxd )
1611668711827:dxr1
1611668728799:mcols(dxr1)$description
1611668741173:table ( dxr1$padj < 0.1 )
1611668754091:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1611668763783:plotMA( dxr1, cex=0.8 )
1611668841705:dxd = testForDEU( dxd,
1611668841714:reducedModel = formulaReducedModel,
1611668841715:fullModel = formulaFullModel )
1611668854484:dxd = estimateDispersions( dxd, formula = formulaFullModel )
1611668864374:dxd = estimateDispersions( dxd, formula = formulaFullModel )
1611668886373:formulaFullModel    =  ~ sample + exon + libType:exon + condition:exon
1611668887433:formulaReducedModel =  ~ sample + exon + libType:exon
1611668889044:dxd = estimateDispersions( dxd, formula = formulaFullModel )
1611668915150:sampleAnnotation(dxd)
1611668916754:formulaFullModel    =  ~ sample + exon + libType:exon + condition:exon
1611668917987:formulaReducedModel =  ~ sample + exon + libType:exon
1611668918647:dxd = estimateDispersions( dxd, formula = formulaFullModel )
1611669691516:geneID <- list.files("./geneCounts1/DHX8_KD_1_DEXSeq_count.txt", pattern=".txt$", full.names = TRUE)
1611669692234:geneID
1611673670111:`geneID <- data("./geneCounts1/DHX8_KD_1_DEXSeq_count.txt")
1611673678161:geneID <- data("./geneCounts1/DHX8_KD_1_DEXSeq_count.txt")
1611673697629:)
1611673799402:geneID <- import("./geneCounts1/DHX8_KD_1_DEXSeq_count.txt")
1611673802491:geneID <- import("./geneCounts1/DHX8_KD_1_DEXSeq_count.txt")
1611673858872:N1_DEXSeq_count <- read.delim("/Volumes/TOSHIBA EXT/counts/DHX8_KD_1_DEXSeq_count.txt", header=FALSE)
1611673858877:View(N1_DEXSeq_count)
1611731605818:getwd()
1611731614211:setwd("geneCounts1/")
1611731615292:getwd()
1611731647574:read.table(file = "DHX8_KD_1_DEXSeq_count.txt")
1611732247255:DEXcount <- read.table(file = "DHX8_KD_1_DEXSeq_count.txt")
1611732301435:str(DEXcount)
1611732481167:library(data.table)
1611732493011:library(data.table)
1611732680856:#Generate a big data frame
1611732680858:setDT(DEXcount)
1611732713951:system.time(a <- unique(DEXcount))
1611733465052:a <- unique(DEXcount)
1611733467552:a
1611733669665:col.index <- 2
1611733892202:head(DEXcount)
1611734230548:geneID <- DEXcount[-2]
1611734234698:geneID
1611734274100:DEXcount
1611734544227:genelist <- DEXcount[,-2]
1611734548455:genelist
1611734607328:geneList <- DEXcount[-629201:629205]
1611734636473:geneList <- DEXcount[-629201:629205,]
1611734645841:genelist
1611734656191:geneList <- genelist[-629201:629205,]
1611734690448:geneList <- genelist[-(629201:629205)]
1611734694558:geneList
1611735323917:View(geneList)
1611735503554:export(geneList,"./make_geneID_list.csv", format = "csv")
1611735535644:#Transfer dataframe into datatable
1611735535653:library(data.table, rio)
1611735540911:export(geneList,"./make_geneID_list.csv", format = "csv")
1611735556737:#Transfer dataframe into datatable
1611735556746:library(data.table, rio, DEseq2)
1611735562942:export(geneList,"./make_geneID_list.csv", format = "csv")
1611735598237:#Transfer dataframe into datatable
1611735598246:pacman::p_load(data.table, rio, DEseq2)
1611735724267:export(geneList,"./make_geneID_list.csv", format = "csv")
1611735771738:head("make_geneID_list.csv")
1611736892507:dxd = DEXSeqDataSetFromHTSeq(
1611736892512:countFiles,
1611736892514:sampleData = sampleTable,
1611736892515:design= ~ sample + exon + condition:exon,
1611736892516:flattenedfile = flattenedFile)
1611736912700:pacman::p_load(BiocManager,rtracklayer,rio,pheatmap,DESeq2,Hmisc,dplyr,ggplot2, DEXSeq())
1611736949851:library(DEXSeq)
1611736969627:dxd = DEXSeqDataSetFromHTSeq(
1611736969636:countFiles,
1611736969637:sampleData = sampleTable,
1611736969637:design= ~ sample + exon + condition:exon,
1611736969638:flattenedfile = flattenedFile)
1611736995345:files
1611736997578:basename(countFiles)
1611737003599:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1611737003607:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1611737003608:sampleTable
1611737007199:basename(flattenedFile)
1611737009648:dxd = DEXSeqDataSetFromHTSeq(
1611737009656:countFiles,
1611737009657:sampleData = sampleTable,
1611737009657:design= ~ sample + exon + condition:exon,
1611737009658:flattenedfile = flattenedFile)
1611737018973:countFiles = list.files("geneCounts1", pattern=".txt$", full.names = TRUE)
1611737019749:basename(countFiles)
1611737075855:getwd
1611737094259:setwd("./geneCounts1")
1611737118259:## Loading files
1611737118267:files <- paste0(grep(".txt$",list.files("./geneCounts1"),value = T))
1611737119299:files
1611737329705:setwd("./geneCounts1")
1611737335544:## Loading files
1611737335552:files <- paste0(grep(".txt$",list.files("./geneCounts1"),value = T))
1611737338336:files
1611737372178:## Loading files
1611737372187:files <- grep(".txt$",list.files("./geneCounts1"),value = T)
1611737373088:files
1611737650692:## Loading files
1611737650701:files <- list.files(pattern = "count.txt$", full.names = TRUE)
1611737652086:files
1611737691279:## Loading files
1611737691280:countFiles <- list.files(pattern = "count.txt$", full.names = TRUE)
1611737691884:countFiles
1611737692754:basename(countFiles)
1611737702591:# Loading data
1611737702591:sampleTable = data.frame(
1611737702592:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1611737702593:condition = c("control", "knockdown", "control", "knockdown"),
1611737702593:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1611737702594:)
1611737719676:flattenedFile <- list.files(pattern=".gff$", full.names = TRUE)
1611737720579:basename(flattenedFile)
1611737748410:"./FA_GTF/",
1611737752980:flattenedFile <- list.files("./FA_GTF", pattern=".gff$", full.names = TRUE)
1611737754305:basename(flattenedFile)
1611737788683:getwd
1611738225349:setwd("RNAseq1")
1611738233658:setwd()
1611738374204:getwd
1611738446969:countFiles = list.files("geneCounts1", pattern=".txt$", full.names = TRUE)
1611738447861:basename(countFiles)
1611738511533:source('/Volumes/TOSHIBA EXT/RNAseq1/DEXseq/DEXseq load into R.R')
1611909035446:countFiles = list.files("geneCounts1", pattern=".txt$", full.names = TRUE)
1611909036696:basename(countFiles)
1611909038992:# Loading data
1611909038993:sampleTable = data.frame(
1611909038993:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1611909038994:condition = c("control", "knockdown", "control", "knockdown"),
1611909038995:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1611909038996:)
1611909040952:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1611909040953:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1611909040953:sampleTable
1611909042022:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1611909043169:basename(flattenedFile)
1611909045161:dxd = DEXSeqDataSetFromHTSeq(
1611909045162:countFiles,
1611909045163:sampleData = sampleTable,
1611909045163:design= ~ sample + exon + condition:exon,
1611909045166:flattenedfile = flattenedFile)
1611909089804:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1611909090905:basename(countFiles)
1611909096773:dxd = DEXSeqDataSetFromHTSeq(
1611909096781:countFiles,
1611909096782:sampleData = sampleTable,
1611909096782:design= ~ sample + exon + condition:exon,
1611909096783:flattenedfile = flattenedFile)
1611910285150:#挑幾個基因跑，免得跑太久
1611910285157:genesForSubset = read.table(
1611910285160:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1611910285161:stringsAsFactors=FALSE)[[1]]
1611910293407:# %in% 判斷是否在某個集合內
1611910293415:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611910806017:#挑幾個基因跑，免得跑太久
1611910806026:genesForSubset = read.table(
1611910806029:file.path("DEXSeq_Result/FANCM.txt" ),
1611910806029:stringsAsFactors=FALSE)[[1]]
1611910987818:#挑幾個基因跑，免得跑太久
1611910987827:genesForSubset = read.table(
1611910987827:file.path("DEXSeq_Result/FANCM.txt" ),
1611910987828:stringsAsFactors=FALSE)[[1]]
1611911043457:#挑幾個基因跑，免得跑太久
1611911043459:genesForSubset = read.table(
1611911043460:file.path("DEXSeq_Result/FANCM.txt" ),
1611911043461:stringsAsFactors=FALSE)[[1]]
1611911076475:#挑幾個基因跑，免得跑太久
1611911076484:genesForSubset = read.table(
1611911076484:file.path("DEXSeq_Result/FANCM.txt" ),
1611911076485:stringsAsFactors=FALSE)[[1]]
1611911112227:# %in% 判斷是否在某個集合內
1611911112228:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611912193326:#挑幾個基因跑，免得跑太久
1611912193330:genesForSubset = read.table(
1611912193332:file.path("DEXSeq_Result/FANCM.txt" ),
1611912193334:stringsAsFactors=FALSE)[[1]]
1611912205352:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1611912217612:library(DEXSeq)
1611912226246:#挑幾個基因跑，免得跑太久
1611912226247:genesForSubset = read.table(
1611912226248:file.path("DEXSeq_Result/FANCM.txt" ),
1611912226248:stringsAsFactors=FALSE)[[1]]
1611912228370:# %in% 判斷是否在某個集合內
1611912228378:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611912232681:#data內容
1611912232689:colData(dxd)
1611912236885:#前五行data
1611912236894:head(counts(dxd),5)
1611912265103:#前五行data
1611912265111:head(counts(dxd),10)
1611923133105:#前五行data,共8欄（有4個samples）
1611923133109:#前四欄the number of reads mapping to out exonic regions and
1611923133110:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1611923133112:head(counts(dxd),10)
1611923139617:#前五行data,共8欄（有4個samples）
1611923139625:#前四欄the number of reads mapping to out exonic regions and
1611923139625:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1611923139626:head(counts(dxd),5)
1611923143612:split( seq_len(ncol(dxd)), colData(dxd)$exon )
1611923155268:head( featureCounts(dxd), 5 )
1611923421843:split( seq_len(ncol(dxd)), colData(dxd)$exon )
1611923876258:#看counting bin details
1611923876263:head( rowRanges(dxd), 3 )
1611924162851:#看counting bin details
1611924162860:head( rowRanges(dxd), 3 )
1611924181028:#看counting bin details
1611924181038:head( rowRanges(dxd), 3 )
1611925456613:#看counting bin details
1611925456621:head( rowRanges(dxd), 10 )
1611934711398:sampleAnnotation( dxd )
1611934767770:#Normalisation
1611934767772:Normalisation = estimateSizeFactors( dxd )
1611934775970:Normalisation
1611936158257:#分布圖評估資料可性度，區分technical and biological variation(noise)
1611936158262:#RNA seq biological replicate太少，用exon數分布比較
1611936158263:#4.3Dispersion estimation
1611936158263:Dispersion = estimateDispersions( dxd )
1611936181496:#分布圖評估資料可性度，區分technical and biological variation(noise)
1611936181504:#RNA seq biological replicate太少，用exon數分布比較
1611936181504:#4.3Dispersion estimation
1611936181505:Dispersion = estimateDispersions( Normalisation )
1611936202014:Dispersion
1611936233371:plotDispEsts( Dispersion )
1611937430177:#5 Testing for differential exon usage
1611937430192:dxd = testForDEU( dxd )
1611937440891:#5 Testing for differential exon usage
1611937440892:dxd = testForDEU( Dispersion )
1611937454459:# %in% 判斷是否在某個集合內
1611937454467:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1611937482492:#5 Testing for differential exon usage
1611937482501:deu = testForDEU( Dispersion )
1611937490212:deu
1611937599008:#評估 relative exon usage fold changes
1611937599017:#based on the coefficients of a GLM fit that uses the formula
1611937599018:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1611937611193:foldchange
1611937674772:mcols(foldchange)
1611937895205:colData(deu)
1611938002400:#不要顯示中間步驟的value，用DEXSeqResults
1611938002402:dxr1 = DEXSeqResults( foldchange )
1611938007634:dxr1
1611938056878:mcols(dxr1)$description
1611938133549:mcols(foldchange)
1611938143991:foldchange
1611938145312:mcols(foldchange)
1611938153472:mcols(dxr1)$description
1611938173360:mcols(Dispersion)
1611938193918:mcols(Dispersion)$description
1611938257751:#From this object, we can ask how many exonic regions are significant
1611938257760:#with a false discovery rate of 10%
1611938257761:table ( dxr1$padj < 0.1 )
1611938299544:#We may also ask how many genes are affected
1611938299545:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1611938315701:dxr1
1611938319522:#From this object, we can ask how many exonic regions are significant
1611938319529:#with a false discovery rate of 10%
1611938319530:table ( dxr1$padj < 0.1 )
1611938321295:#We may also ask how many genes are affected
1611938321296:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1611938354030:plotMA( dxr1, cex=0.8 )
1611938698376:#data內容，按this other 作 annotation
1611938698418:#前五行data,共8欄（有4個samples）
1611938698419:#前四欄the number of reads mapping to out exonic regions and
1611938698419:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1611938698420:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1611938698420:#1.按照一基因上某exon和total exon比較呈現
1611938698422:colData(dxd)
1611938702592:head(counts(dxd),5)
1611938703776:#2.按照KD treatment呈現
1611938703776:head( featureCounts(dxd), 5 )
1611938707758:split( seq_len(ncol(dxd)), colData(dxd)$exon )
1611938709439:#看counting bin details
1611938709440:#GRange:儲存genomic regions or genomic intervals data
1611938709440:#genomic range contains chr name, star, end, strand
1611938709441:#start and end are both 1-based positions relative to the 5’ end
1611938709441:#of the plus strand of the chromosome, even when the range is
1611938709441:#on the minus strand
1611938709442:#range width: end - start +1
1611938709442:# end >= start, except for empty ranges where end = star-1
1611938709443:#固定最左是start，最右是end
1611938709443:head( rowRanges(dxd), 10 )
1611938715383:sampleAnnotation( dxd )
1611938716989:#4.2 Normalisation
1611938716990:Normalisation = estimateSizeFactors( dxd )
1611938719958:Normalisation
1611938724049:#分布圖評估資料可性度，區分technical and biological variation(noise)
1611938724050:#RNA seq biological replicate太少，用exon數分布比較
1611938724051:#4.3Dispersion estimation
1611938724051:Dispersion = estimateDispersions( Normalisation )
1611938736119:Dispersion
1611938745380:plotDispEsts( Dispersion )
1611938747721:mcols(Dispersion)
1611938749811:#5 Testing for differential exon usage
1611938749820:deu = testForDEU( Dispersion )
1611938752493:deu
1611938757761:colData(deu)
1612163104994:#我不確定這是p-value多少的
1612163104999:plotMA( dxr1, cex=1 )
1612163110089:library(DEXSeq, rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612163151964:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612163158045:library(DEXSeq)
1612163168918:#我不確定這是p-value多少的
1612163168926:plotMA( dxr1, cex=1 )
1612163176856:#我不確定這是p-value多少的
1612163176864:plotMA( dxr1, cex=2 )
1612163536458:#我不確定這是p-value多少的,cex是點,字體大小
1612163536463:plotMA( dxr1, cex=1.5 )
1612163545914:#我不確定這是p-value多少的,cex是點,字體大小
1612163545923:plotMA( dxr1, cex=1)
1612163553828:#我不確定這是p-value多少的,cex是點,字體大小
1612163553836:plotMA( dxr1, cex=0.5)
1612163560003:#我不確定這是p-value多少的,cex是點,字體大小
1612163560004:plotMA( dxr1, cex=1)
1612164111487:#From this object, we can ask how many exonic regions are significant
1612164111491:#with a false discovery rate of 10%
1612164111492:table ( dxr1$padj < 0.05 )
1612164118876:#We may also ask how many genes are affected
1612164118884:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612164121688:#cex是點,字體大小
1612164121696:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612164121697:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612164121697:#是150），Y軸是表達差異倍數取個log2
1612164121698:plotMA( dxr1, cex=1)
1612164133290:#From this object, we can ask how many exonic regions are significant
1612164133298:#with a false discovery rate of 10%
1612164133298:table ( dxr1$padj < 0.05 )
1612164135503:#We may also ask how many genes are affected
1612164135512:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612164140646:#cex是點,字體大小
1612164140655:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612164140655:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612164140655:#是150），Y軸是表達差異倍數取個log2
1612164140656:plotMA( dxr1, cex=1)
1612164148373:#From this object, we can ask how many exonic regions are significant
1612164148382:#with a false discovery rate of 10%
1612164148382:table ( dxr1$padj < 0.1 )
1612164152580:#We may also ask how many genes are affected
1612164152588:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1612164154149:#cex是點,字體大小
1612164154158:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612164154159:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612164154159:#是150），Y軸是表達差異倍數取個log2
1612164154159:plotMA( dxr1, cex=1)
1612164176380:#From this object, we can ask how many exonic regions are significant
1612164176388:#with a false discovery rate of 10%
1612164176389:table ( dxr1$padj < 0.2 )
1612164182942:#We may also ask how many genes are affected
1612164182950:table ( tapply( dxr1$padj < 0.2, dxr1$groupID, any ) )
1612164347883:#From this object, we can ask how many exonic regions are significant
1612164347885:#with a false discovery rate of 10%
1612164347885:table ( dxr1$padj < 0.05 )
1612164348576:#We may also ask how many genes are affected
1612164348577:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612164349523:#cex是點,字體大小
1612164349524:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612164349525:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612164349525:#是150），Y軸是表達差異倍數取個log2
1612164349526:plotMA( dxr1, cex=1)
1612164423253:#看counting bin details
1612164423256:#GRange:儲存genomic regions or genomic intervals data
1612164423256:#genomic range contains chr name, star, end, strand
1612164423257:#start and end are both 1-based positions relative to the 5’ end
1612164423259:#of the plus strand of the chromosome, even when the range is
1612164423259:#on the minus strand
1612164423260:#range width: end - start +1
1612164423261:# end >= start, except for empty ranges where end = star-1
1612164423261:#固定最左是start，最右是end
1612164423262:head( rowRanges(dxd), 10 )
1612164426164:sampleAnnotation( dxd )
1612164430746:#分布圖評估資料可性度，區分technical and biological variation(noise)
1612164430755:#RNA seq biological replicate太少，用exon數分布比較
1612164430756:#4.3Dispersion estimation
1612164430756:Dispersion = estimateDispersions( Normalisation )
1612164441551:Dispersion
1612164450844:plotDispEsts( Dispersion )
1612164860342:sizeFactors(Normalisation)
1612164968470:#每個樣本的讀段總數
1612164968472:colSums(counts(Normalisation))
1612166387828:plotDispEsts( Dispersion )
1612166604982:xaxt="n"
1612166616117:yaxt="n"
1612166621019:plotDispEsts( Dispersion )
1612166644938:plotDispEsts( Dispersion, xaxt="n", yaxt="n" )
1612166653995:plotDispEsts( Dispersion )
1612166749709:plotDispEsts( Dispersion , cex.lab="n")
1612166758911:plotDispEsts( Dispersion)
1612167714085:sampleAnnotation(dxd)
1612167717111:formulaFullModel    =  ~ sample + exon + libType:exon + condition:exon
1612167718447:formulaReducedModel =  ~ sample + exon + libType:exon
1612168082832:s.disper = estimateDispersions( dxd, formula = formulaFullModel )
1612168106723:sampleAnnotation(dxd)
1612168109180:formulaFullModel    =  ~ sample + exon + libType:exon + condition:exon
1612168110392:formulaReducedModel =  ~ sample + exon + libType:exon
1612168111735:s.disper = estimateDispersions( dxd, formula = formulaFullModel )
1612168124687:s = estimateDispersions( dxd, formula = formulaFullModel )
1612168162002:dxd = DEXSeqDataSetFromHTSeq(
1612168162003:countFiles,
1612168162006:sampleData = sampleTable,
1612168162006:design= ~ sample + exon + condition:exon,
1612168162008:flattenedfile = flattenedFile)
1612168521340:# %in% 判斷是否在某個集合內
1612168521342:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612168551286:sampleAnnotation(dxd)
1612168552487:formulaFullModel    =  ~ sample + exon + libType:exon + condition:exon
1612168553914:formulaReducedModel =  ~ sample + exon + libType:exon
1612168554739:s = estimateDispersions( dxd, formula = formulaFullModel )
1612168578250:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612168578251:#gene length, 和RNA composition(極端差異或污染)影響
1612168578252:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612168578252:Normalisation = estimateSizeFactors( dxd )
1612168582082:sizeFactors(Normalisation)
1612168587477:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612168587485:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612168587486:#識別組間平均表達顯著不同的基因。
1612168587486:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612168587487:Dispersion = estimateDispersions( Normalisation )
1612168636846:s.deu = testForDEU( Dispersion,
1612168636847:reducedModel = formulaReducedModel,
1612168636848:fullModel = formulaFullModel )
1612168650106:plotDispEsts( dxd )
1612168660840:sizeFactors(Normalisation)
1612168666077:#5 Testing for differential exon usage
1612168666086:deu = testForDEU( Dispersion )
1612168766065:dxr1
1612168772901:#評估 relative exon usage fold changes
1612168772901:#based on the coefficients of a GLM fit that uses the formula
1612168772920:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612168779057:#不要顯示中間步驟的value，用DEXSeqResults
1612168779058:dxr1 = DEXSeqResults( foldchange )
1612168785166:dxr1
1612168801462:plotDEXSeq( dxr1, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612170491574:plotDEXSeq( dxr1, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2, cex.name ="FANCM" )
1612170505598:warnings()
1612170556728:plotDEXSeq( dxr1, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2, cex.main ="FANCM" )
1612170606662:plotDEXSeq( dxr1, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2, col.main ="FANCM" )
1612170616361:plotDEXSeq( dxr1, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612170630484:plotDEXSeq( dxr1, "FANCM", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612170651293:FANCM = "ENSG00000187790"
1612170652082:plotDEXSeq( dxr1, "ENSG00000187790", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612170663679:plotDEXSeq( dxr1, FANCM , legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612170668367:FANCM = "ENSG00000187790"
1612170669643:plotDEXSeq( dxr1, FANCM , legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612171377785:plotDEXSeq( dxr1, FANCM, displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612171616782:plotDEXSeq( dxr1, FANCM, expression=FALSE, norCounts=TRUE,
1612171616791:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612171834590:plotDEXSeq( dxr1, FANCM, expression=FALSE, splicing=TRUE,
1612171834599:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612172077182:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1612172558751:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612172566968:library(DEXSeq)
1612172598204:#挑幾個基因跑，免得跑太久
1612172598205:#this:特定exon; other:相同gene上其他的exon總和
1612172598205:genesForSubset = read.table(
1612172598206:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1612172598207:stringsAsFactors=FALSE)[[1]]
1612172601291:# %in% 判斷是否在某個集合內
1612172601291:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612172613377:split( seq_len(ncol(dxd)), colData(dxd)$exon )
1612172620004:sampleAnnotation( dxd )
1612172634441:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612172634442:#gene length, 和RNA composition(極端差異或污染)影響
1612172634442:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612172634442:Normalisation = estimateSizeFactors( dxd )
1612172636581:Normalisation
1612172638895:sizeFactors(Normalisation)
1612172648410:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612172648412:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612172648420:#識別組間平均表達顯著不同的基因。
1612172648421:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612172648421:Dispersion = estimateDispersions( Normalisation )
1612172659848:Dispersion
1612172665428:plotDispEsts( Dispersion , cex.lab="n")
1612172674065:plotDispEsts( Dispersion)
1612172684070:#5 Testing for differential exon usage
1612172684071:deu = testForDEU( Dispersion )
1612172689033:#評估 relative exon usage fold changes
1612172689033:#based on the coefficients of a GLM fit that uses the formula
1612172689034:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612172691077:mcols(foldchange)
1612172694305:#不要顯示中間步驟的value，用DEXSeqResults
1612172694305:dxr1 = DEXSeqResults( foldchange )
1612172698890:dxr1
1612172701476:#From this object, we can ask how many exonic regions are significant
1612172701483:#with a false discovery rate of 10%
1612172701484:table ( dxr1$padj < 0.05 )
1612172704130:#We may also ask how many genes are affected
1612172704138:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612172710854:#挑幾個基因跑，免得跑太久
1612172710855:#this:特定exon; other:相同gene上其他的exon總和
1612172710855:genesForSubset = read.table(
1612172710856:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1612172710856:stringsAsFactors=FALSE)[[1]]
1612172715750:# %in% 判斷是否在某個集合內
1612172715759:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612172728680:#From this object, we can ask how many exonic regions are significant
1612172728688:#with a false discovery rate of 10%
1612172728690:table ( dxr1$padj < 0.05 )
1612172729859:#We may also ask how many genes are affected
1612172729860:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612172731193:#cex是點,字體大小
1612172731193:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612172731194:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612172731194:#是150），Y軸是表達差異倍數取個log2
1612172731195:plotMA( dxr1, cex=1)
1612172798636:#挑幾個基因跑，免得跑太久
1612172798638:#this:特定exon; other:相同gene上其他的exon總和
1612172798638:genesForSubset = read.table(
1612172798639:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1612172798640:stringsAsFactors=FALSE)[[1]]
1612172800978:# %in% 判斷是否在某個集合內
1612172800987:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612172813606:#data內容，按this other 作 annotation
1612172813613:#前五行data,共8欄（有4個samples）
1612172813614:#前四欄the number of reads mapping to out exonic regions and
1612172813614:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612172813614:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612172813615:#1.按照一基因上某exon和total exon比較呈現
1612172813615:colData(dxd)
1612172816586:head(counts(dxd),5)
1612172820569:#2.按照KD treatment呈現
1612172820577:head( featureCounts(dxd), 5 )
1612172822183:split( seq_len(ncol(dxd)), colData(dxd)$exon )
1612172826733:#看counting bin details
1612172826734:#GRange:儲存genomic regions or genomic intervals data
1612172826735:#genomic range contains chr name, star, end, strand
1612172826735:#start and end are both 1-based positions relative to the 5’ end
1612172826735:#of the plus strand of the chromosome, even when the range is
1612172826736:#on the minus strand
1612172826736:#range width: end - start +1
1612172826736:# end >= start, except for empty ranges where end = star-1
1612172826737:#固定最左是start，最右是end
1612172826737:head( rowRanges(dxd), 10 )
1612172828260:sampleAnnotation( dxd )
1612172831702:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612172831703:#gene length, 和RNA composition(極端差異或污染)影響
1612172831704:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612172831704:Normalisation = estimateSizeFactors( dxd )
1612172833008:Normalisation
1612172833952:sizeFactors(Normalisation)
1612172836136:#每個樣本的讀段總數mapped read
1612172836136:colSums(counts(Normalisation))
1612172842264:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612172842273:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612172842273:#識別組間平均表達顯著不同的基因。
1612172842274:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612172842274:Dispersion = estimateDispersions( Normalisation )
1612172849825:Dispersion
1612172851374:plotDispEsts(Dispersion)
1612172859049:mcols(Dispersion)
1612172860252:#5 Testing for differential exon usage
1612172860253:deu = testForDEU( Dispersion )
1612245208717:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612245219092:library(DEXSeq)
1612245487434:plotDEXSeq( dxr1, "ENSG00000140464", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245500177:dxd = DEXSeqDataSetFromHTSeq(
1612245500177:countFiles,
1612245500178:sampleData = sampleTable,
1612245500178:design= ~ sample + exon + condition:exon,
1612245500179:flattenedfile = flattenedFile)
1612245609568:#挑幾個基因跑，免得跑太久
1612245609570:#this:特定exon; other:相同gene上其他的exon總和
1612245609573:genesForSubset = read.table(
1612245609574:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1612245609574:stringsAsFactors=FALSE)[[1]]
1612245611989:# %in% 判斷是否在某個集合內
1612245611990:genesForSubset = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612245618517:#data內容，按this other 作 annotation
1612245618518:#前五行data,共8欄（有4個samples）
1612245618519:#前四欄the number of reads mapping to out exonic regions and
1612245618520:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612245618520:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612245618521:#1.按照一基因上某exon和total exon比較呈現
1612245618521:colData(gene)
1612245630958:# %in% 判斷是否在某個集合內
1612245630959:gene = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612245637011:#挑幾個基因跑，免得跑太久
1612245637012:#this:特定exon; other:相同gene上其他的exon總和
1612245637013:genesForSubset = read.table(
1612245637013:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1612245637013:stringsAsFactors=FALSE)[[1]]
1612245638258:# %in% 判斷是否在某個集合內
1612245638259:gene = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612245642078:#data內容，按this other 作 annotation
1612245642092:#前五行data,共8欄（有4個samples）
1612245642093:#前四欄the number of reads mapping to out exonic regions and
1612245642093:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612245642094:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612245642094:#1.按照一基因上某exon和total exon比較呈現
1612245642095:colData(gene)
1612245644373:head(counts(gene),5)
1612245646324:#2.按照KD treatment呈現
1612245646326:head( featureCounts(gene), 5 )
1612245647866:split( seq_len(ncol(gene)), colData(gene)$exon )
1612245649048:#看counting bin details
1612245649049:#GRange:儲存genomic regions or genomic intervals data
1612245649049:#genomic range contains chr name, star, end, strand
1612245649050:#start and end are both 1-based positions relative to the 5’ end
1612245649050:#of the plus strand of the chromosome, even when the range is
1612245649051:#on the minus strand
1612245649051:#range width: end - start +1
1612245649052:# end >= start, except for empty ranges where end = star-1
1612245649052:#固定最左是start，最右是end
1612245649052:head( rowRanges(gene), 10 )
1612245650341:sampleAnnotation( gene )
1612245651465:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612245651465:#gene length, 和RNA composition(極端差異或污染)影響
1612245651466:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612245651466:Normalisation = estimateSizeFactors( gene )
1612245653487:Normalisation
1612245655326:sizeFactors(Normalisation)
1612245656550:#每個樣本的讀段總數mapped read
1612245656551:colSums(counts(Normalisation))
1612245657560:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612245657569:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612245657569:#識別組間平均表達顯著不同的基因。
1612245657569:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612245657569:Dispersion = estimateDispersions( Normalisation )
1612245667333:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612245667334:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612245667335:#識別組間平均表達顯著不同的基因。
1612245667335:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612245667336:Dispersion = estimateDispersions( Normalisation )
1612245678000:Dispersion
1612245679917:plotDispEsts(Dispersion)
1612245681312:mcols(Dispersion)
1612245804714:#5 Testing for differential exon usage
1612245804723:deu = testForDEU( Dispersion )
1612245812320:deu
1612245813886:colData(deu)
1612245815389:#評估 relative exon usage fold changes
1612245815397:#based on the coefficients of a GLM fit that uses the formula
1612245815398:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612245819906:foldchange
1612245821462:mcols(foldchange)
1612245828026:#不要顯示中間步驟的value，用DEXSeqResults
1612245828032:dxr1 = DEXSeqResults( foldchange )
1612245832418:dxr1
1612245834696:mcols(dxr1)$description
1612245839949:#From this object, we can ask how many exonic regions are significant
1612245839957:#with a false discovery rate of 10%
1612245839958:table ( dxr1$padj < 0.05 )
1612245842825:#We may also ask how many genes are affected
1612245842833:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612245845428:#cex是點,字體大小
1612245845437:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612245845437:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612245845437:#是150），Y軸是表達差異倍數取個log2
1612245845438:plotMA( dxr1, cex=1)
1612245903045:plotDEXSeq( dxr1, "ENSG00000140464", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245931718:#remove overall changes in expression from the plots
1612245931718:#to see changes in the expression of individual exons
1612245931719:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, splicing=TRUE,
1612245931720:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245933907:#這裡應該要標出有顯著差異的exon,但FM no significant
1612245933916:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1612245947472:#remove overall changes in expression from the plots
1612245947480:#to see changes in the expression of individual exons
1612245947481:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, splicing=TRUE,
1612245947482:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245955978:#這裡應該要標出有顯著差異的exon,但FM no significant
1612245955986:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80") )
1612245974543:#look at the count values from the individual samples
1612245974551:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, norCounts=TRUE,
1612245974551:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245980149:#look at the count values from the individual samples
1612245980150:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, norCounts=TRUE,
1612245980150:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245985586:#看單一transcript
1612245985595:plotDEXSeq( dxr1, "ENSG00000140464", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245993716:plotDEXSeq( dxr1, "ENSG00000140464", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612245999428:#look at the count values from the individual samples
1612245999437:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, norCounts=TRUE,
1612245999438:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246000719:#remove overall changes in expression from the plots
1612246000728:#to see changes in the expression of individual exons
1612246000728:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, splicing=TRUE,
1612246000729:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246008624:#cex是點,字體大小
1612246008632:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612246008633:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612246008633:#是150），Y軸是表達差異倍數取個log2
1612246008633:plotMA( dxr1, cex=1)
1612246025049:plotDEXSeq( dxr1, "ENSG00000140464", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246032229:#看單一transcript
1612246032230:plotDEXSeq( dxr1, "ENSG00000140464", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246034643:#look at the count values from the individual samples
1612246034651:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, norCounts=TRUE,
1612246034652:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246036308:#remove overall changes in expression from the plots
1612246036316:#to see changes in the expression of individual exons
1612246036317:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, splicing=TRUE,
1612246036317:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246037392:#這裡應該要標出有顯著差異的exon,但FM no significant
1612246037400:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80") )
1612246042257:plotDEXSeq( dxr1, "ENSG00000140464", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246043542:#看單一transcript
1612246043543:plotDEXSeq( dxr1, "ENSG00000140464", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612246048798:#cex是點,字體大小
1612246048806:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612246048807:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612246048807:#是150），Y軸是表達差異倍數取個log2
1612246048808:plotMA( dxr1, cex=1)
1612246052521:#From this object, we can ask how many exonic regions are significant
1612246052524:#with a false discovery rate of 10%
1612246052524:table ( dxr1$padj < 0.05 )
1612246053652:#We may also ask how many genes are affected
1612246053653:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612246166475:#remove overall changes in expression from the plots
1612246166476:#to see changes in the expression of individual exons
1612246166479:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, splicing=TRUE,
1612246166480:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612247842178:plotDispEsts(Dispersion)
1612247847595:Dispersion
1612247848554:plotDispEsts(Dispersion)
1612247856319:mcols(Dispersion)
1612247858241:#5 Testing for differential exon usage
1612247858242:deu = testForDEU( Dispersion )
1612247869164:Normalisation
1612247870223:sizeFactors(Normalisation)
1612247871086:#每個樣本的讀段總數mapped read
1612247871087:colSums(counts(Normalisation))
1612247872171:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612247872172:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612247872172:#識別組間平均表達顯著不同的基因。
1612247872173:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612247872173:Dispersion = estimateDispersions( Normalisation )
1612247881909:Dispersion
1612247886089:plotDispEsts(Dispersion)
1612247895427:#From this object, we can ask how many exonic regions are significant
1612247895428:#with a false discovery rate of 10%
1612247895428:table ( dxr1$padj < 0.05 )
1612247896069:#We may also ask how many genes are affected
1612247896078:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612247896893:#cex是點,字體大小
1612247896901:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612247896901:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612247896902:#是150），Y軸是表達差異倍數取個log2
1612247896902:plotMA( dxr1, cex=1)
1612247906915:#挑幾個基因跑，免得跑太久
1612247906916:#this:特定exon; other:相同gene上其他的exon總和
1612247906917:genesForSubset = read.table(
1612247906918:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1612247906919:stringsAsFactors=FALSE)[[1]]
1612247908195:# %in% 判斷是否在某個集合內
1612247908204:gene = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612247915725:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612247915726:#gene length, 和RNA composition(極端差異或污染)影響
1612247915727:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612247915727:Normalisation = estimateSizeFactors( gene )
1612247922260:Normalisation
1612247923103:sizeFactors(Normalisation)
1612247924152:#每個樣本的讀段總數mapped read
1612247924152:colSums(counts(Normalisation))
1612247924839:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612247924839:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612247924840:#識別組間平均表達顯著不同的基因。
1612247924840:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612247924841:Dispersion = estimateDispersions( Normalisation )
1612247944125:#5 Testing for differential exon usage
1612247944125:deu = testForDEU( Dispersion )
1612247958045:deu
1612247959033:colData(deu)
1612247959990:#評估 relative exon usage fold changes
1612247959991:#based on the coefficients of a GLM fit that uses the formula
1612247959993:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612247962038:foldchange
1612247963092:mcols(foldchange)
1612247964226:#不要顯示中間步驟的value，用DEXSeqResults
1612247964227:dxr1 = DEXSeqResults( foldchange )
1612247967046:dxr1
1612247968364:mcols(dxr1)$description
1612247969453:#From this object, we can ask how many exonic regions are significant
1612247969454:#with a false discovery rate of 10%
1612247969455:table ( dxr1$padj < 0.05 )
1612247970621:#We may also ask how many genes are affected
1612247970622:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612247971653:#cex是點,字體大小
1612247971653:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612247971654:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612247971654:#是150），Y軸是表達差異倍數取個log2
1612247971655:plotMA( dxr1, cex=1)
1612248298435:dxd = DEXSeqDataSetFromHTSeq(
1612248298455:countFiles,
1612248298455:sampleData = sampleTable,
1612248298456:design= ~ sample + exon + condition:exon,
1612248298457:flattenedfile = flattenedFile)
1612251001435:geneCounts1
1612251007518:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612251109861:countFiles = list.files("DEXseq/1p-pair/", pattern="count.txt$", full.names = TRUE)
1612251112572:basename(countFiles)
1612251118588:# Loading data frame, data.frame不同欄可放入不同屬性資料
1612251118589:sampleTable = data.frame(
1612251118590:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1612251118591:condition = c("control", "knockdown", "control", "knockdown"),
1612251118592:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1612251118593:)
1612251120479:sampleTable
1612251130772:write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1612251134179:export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1612251221450:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1612251222503:basename(flattenedFile)
1612251237561:flattenedFile <- list.files("./FA_GTF/", pattern="38.gff$", full.names = TRUE)
1612251238181:basename(flattenedFile)
1612251239889:dxd = DEXSeqDataSetFromHTSeq(
1612251239898:countFiles,
1612251239898:sampleData = sampleTable,
1612251239899:design= ~ sample + exon + condition:exon,
1612251239900:flattenedfile = flattenedFile)
1612251382882:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1612251383699:basename(flattenedFile)
1612251403251:flattenedFile <- list.files("./FA_GTF/", pattern="seq.gff$", full.names = TRUE)
1612251404370:basename(flattenedFile)
1612251412008:flattenedFile <- list.files("./FA_GTF/", pattern="Seq.gff$", full.names = TRUE)
1612251413128:basename(flattenedFile)
1612251414647:dxd = DEXSeqDataSetFromHTSeq(
1612251414648:countFiles,
1612251414649:sampleData = sampleTable,
1612251414650:design= ~ sample + exon + condition:exon,
1612251414650:flattenedfile = flattenedFile)
1612251642685:#挑幾個基因跑，免得跑太久
1612251642689:#this:特定exon; other:相同gene上其他的exon總和
1612251642690:genesForSubset = read.table(
1612251642693:file.path("DEXSeq_Result/Yun insterested gene_ENSG.txt" ),
1612251642695:stringsAsFactors=FALSE)[[1]]
1612251644491:# %in% 判斷是否在某個集合內
1612251644491:gene = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612251650047:#data內容，按this other 作 annotation
1612251650048:#前五行data,共8欄（有4個samples）
1612251650049:#前四欄the number of reads mapping to out exonic regions and
1612251650050:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612251650051:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612251650052:#1.按照一基因上某exon和total exon比較呈現
1612251650052:colData(gene)
1612251652128:head(counts(gene),5)
1612251672660:#2.按照KD treatment呈現
1612251672668:head( featureCounts(gene), 5 )
1612251676062:split( seq_len(ncol(gene)), colData(gene)$exon )
1612251677093:#看counting bin details
1612251677093:#GRange:儲存genomic regions or genomic intervals data
1612251677094:#genomic range contains chr name, star, end, strand
1612251677094:#start and end are both 1-based positions relative to the 5’ end
1612251677095:#of the plus strand of the chromosome, even when the range is
1612251677096:#on the minus strand
1612251677097:#range width: end - start +1
1612251677097:# end >= start, except for empty ranges where end = star-1
1612251677098:#固定最左是start，最右是end
1612251677099:head( rowRanges(gene), 10 )
1612251681520:sampleAnnotation( gene )
1612251682740:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612251682748:#gene length, 和RNA composition(極端差異或污染)影響
1612251682748:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612251682749:Normalisation = estimateSizeFactors( gene )
1612251686557:Normalisation
1612251687842:sizeFactors(Normalisation)
1612251689190:#每個樣本的讀段總數mapped read
1612251689190:colSums(counts(Normalisation))
1612251692864:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612251692865:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612251692865:#識別組間平均表達顯著不同的基因。
1612251692866:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612251692866:Dispersion = estimateDispersions( Normalisation )
1612251741035:Dispersion
1612251742282:plotDispEsts(Dispersion)
1612251771810:mcols(Dispersion)
1612251774360:#5 Testing for differential exon usage
1612251774361:deu = testForDEU( Dispersion )
1612251910948:deu
1612251912257:colData(deu)
1612251915097:#評估 relative exon usage fold changes
1612251915098:#based on the coefficients of a GLM fit that uses the formula
1612251915098:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612251923786:#不要顯示中間步驟的value，用DEXSeqResults
1612251923794:dxr1 = DEXSeqResults( foldchange )
1612251930840:#From this object, we can ask how many exonic regions are significant
1612251930841:#with a false discovery rate of 10%
1612251930841:table ( dxr1$padj < 0.05 )
1612251933326:#We may also ask how many genes are affected
1612251933327:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612251940420:#From this object, we can ask how many exonic regions are significant
1612251940425:#with a false discovery rate of 10%
1612251940426:table ( dxr1$padj < 0.1 )
1612251945273:#We may also ask how many genes are affected
1612251945275:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1612251946861:#cex是點,字體大小
1612251946871:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612251946871:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612251946872:#是150），Y軸是表達差異倍數取個log2
1612251946872:plotMA( dxr1, cex=1)
1612251950984:plotDEXSeq( dxr1, "ENSG00000140464", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612251958292:#看單一transcript
1612251958300:plotDEXSeq( dxr1, "ENSG00000140464", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612251964588:#look at the count values from the individual samples
1612251964597:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, norCounts=TRUE,
1612251964598:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612251967436:#remove overall changes in expression from the plots
1612251967445:#to see changes in the expression of individual exons
1612251967445:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, splicing=TRUE,
1612251967445:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612253188999:plotDEXSeq( dxr1, "ENSG00000197299", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612253846823:#挑幾個基因跑，免得跑太久
1612253846828:#this:特定exon; other:相同gene上其他的exon總和
1612253846828:genesForSubset = read.table(
1612253846831:file.path("DEXSeq_Result/TMEM231.txt.txt" ),
1612253846832:stringsAsFactors=FALSE)[[1]]
1612253854362:#挑幾個基因跑，免得跑太久
1612253854363:#this:特定exon; other:相同gene上其他的exon總和
1612253854364:genesForSubset = read.table(
1612253854364:file.path("DEXSeq_Result/TMEM231.txt" ),
1612253854365:stringsAsFactors=FALSE)[[1]]
1612253890933:#挑幾個基因跑，免得跑太久
1612253890935:#this:特定exon; other:相同gene上其他的exon總和
1612253890944:genesForSubset = read.table(
1612253890946:file.path("DEXSeq_Result/TMEM231.txt" ),
1612253890948:stringsAsFactors=FALSE)[[1]]
1612253901086:# %in% 判斷是否在某個集合內
1612253901088:gene = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612253910164:dxd = DEXSeqDataSetFromHTSeq(
1612253910170:countFiles,
1612253910173:sampleData = sampleTable,
1612253910177:design= ~ sample + exon + condition:exon,
1612253910181:flattenedfile = flattenedFile)
1612254039954:#挑幾個基因跑，免得跑太久
1612254039957:#this:特定exon; other:相同gene上其他的exon總和
1612254039958:genesForSubset = read.table(
1612254039959:file.path("DEXSeq_Result/TMEM231.txt" ),
1612254039959:stringsAsFactors=FALSE)[[1]]
1612254045423:#挑幾個基因跑，免得跑太久
1612254045424:#this:特定exon; other:相同gene上其他的exon總和
1612254045424:genesForSubset = read.table(
1612254045426:file.path("DEXSeq_Result/TMEM231.txt" ),
1612254045428:stringsAsFactors=FALSE)[[1]]
1612254086736:#挑幾個基因跑，免得跑太久
1612254086745:#this:特定exon; other:相同gene上其他的exon總和
1612254086747:genesForSubset = read.table(
1612254086748:"DEXSeq_Result/TMEM231.txt" )
1612254098574:#挑幾個基因跑，免得跑太久
1612254098576:#this:特定exon; other:相同gene上其他的exon總和
1612254098576:genesForSubset = read.table( path =
1612254098578:"DEXSeq_Result/TMEM231.txt")
1612254107167:#挑幾個基因跑，免得跑太久
1612254107170:#this:特定exon; other:相同gene上其他的exon總和
1612254107171:genesForSubset = read.table( path = "DEXSeq_Result/TMEM231.txt")
1612254240049:#挑幾個基因跑，免得跑太久
1612254240051:#this:特定exon; other:相同gene上其他的exon總和
1612254240051:genesForSubset = read.table(
1612254240052:file.path("DEXSeq_Result", pattern="/Yun insterested gene_ENSG.txt" ),
1612254240053:stringsAsFactors=FALSE)[[1]]
1612254243725:# %in% 判斷是否在某個集合內
1612254243733:gene = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612254262160:sampleAnnotation( gene )
1612254270043:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612254270046:#gene length, 和RNA composition(極端差異或污染)影響
1612254270049:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612254270051:Normalisation = estimateSizeFactors( gene )
1612254274700:Normalisation
1612254277034:sizeFactors(Normalisation)
1612254278530:#每個樣本的讀段總數mapped read
1612254278531:colSums(counts(Normalisation))
1612254279610:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612254279618:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612254279629:#識別組間平均表達顯著不同的基因。
1612254279630:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612254279630:Dispersion = estimateDispersions( Normalisation )
1612254402291:# %in% 判斷是否在某個集合內
1612254402293:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612254409347:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612254409348:#gene length, 和RNA composition(極端差異或污染)影響
1612254409349:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612254409349:Normalisation = estimateSizeFactors( dxd )
1612254411501:Normalisation
1612254412879:sizeFactors(Normalisation)
1612254413690:#每個樣本的讀段總數mapped read
1612254413699:colSums(counts(Normalisation))
1612254414604:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612254414606:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612254414606:#識別組間平均表達顯著不同的基因。
1612254414607:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612254414607:Dispersion = estimateDispersions( Normalisation )
1612254424779:sampleAnnotation( dxd )
1612254435042:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612254435049:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612254435051:#識別組間平均表達顯著不同的基因。
1612254435051:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612254435052:Dispersion = estimateDispersions( Normalisation )
1612254488514:#5 Testing for differential exon usage
1612254488524:deu = testForDEU( Dispersion )
1612254493665:#評估 relative exon usage fold changes
1612254493673:#based on the coefficients of a GLM fit that uses the formula
1612254493674:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612254592731:dxd = DEXSeqDataSetFromHTSeq(
1612254592732:countFiles,
1612254592733:sampleData = sampleTable,
1612254592733:design= ~ sample + exon + condition:exon,
1612254592734:flattenedfile = flattenedFile)
1612254743619:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612254744374:basename(countFiles)
1612254746473:# Loading data frame, data.frame不同欄可放入不同屬性資料
1612254746473:sampleTable = data.frame(
1612254746483:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1612254746485:condition = c("control", "knockdown", "control", "knockdown"),
1612254746486:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1612254746486:)
1612254748420:sampleTable
1612254757727:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1612254759191:basename(flattenedFile)
1612254761162:dxd = DEXSeqDataSetFromHTSeq(
1612254761171:countFiles,
1612254761171:sampleData = sampleTable,
1612254761172:design= ~ sample + exon + condition:exon,
1612254761173:flattenedfile = flattenedFile)
1612254881918:#挑幾個基因跑，免得跑太久
1612254881919:#this:特定exon; other:相同gene上其他的exon總和
1612254881920:genesForSubset = read.table(
1612254881922:file.path("DEXSeq_Result", pattern="/Yun insterested gene_ENSG.txt" ),
1612254881923:stringsAsFactors=FALSE)[[1]]
1612254884626:# %in% 判斷是否在某個集合內
1612254884626:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612254887028:#data內容，按this other 作 annotation
1612254887028:#前五行data,共8欄（有4個samples）
1612254887029:#前四欄the number of reads mapping to out exonic regions and
1612254887029:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612254887029:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612254887030:#1.按照一基因上某exon和total exon比較呈現
1612254887030:colData(dxd)
1612254896833:sampleAnnotation( dxd )
1612254897981:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612254897989:#gene length, 和RNA composition(極端差異或污染)影響
1612254897990:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612254897990:Normalisation = estimateSizeFactors( dxd )
1612254907358:Normalisation
1612254911134:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612254911135:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612254911141:#識別組間平均表達顯著不同的基因。
1612254911143:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612254911144:Dispersion = estimateDispersions( Normalisation )
1612254936977:plotDispEsts(Dispersion)
1612254954732:mcols(Dispersion)
1612254956106:#5 Testing for differential exon usage
1612254956115:deu = testForDEU( Dispersion )
1612255021859:deu
1612255022785:colData(deu)
1612255023569:#評估 relative exon usage fold changes
1612255023577:#based on the coefficients of a GLM fit that uses the formula
1612255023578:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612255473325:#不要顯示中間步驟的value，用DEXSeqResults
1612255473331:dxr1 = DEXSeqResults( foldchange )
1612255479742:dxr1
1612255526878:#From this object, we can ask how many exonic regions are significant
1612255526886:#with a false discovery rate of 10%
1612255526887:table ( dxr1$padj < 0.1 )
1612255528129:#We may also ask how many genes are affected
1612255528137:table ( tapply( dxr1$padj < 1, dxr1$groupID, any ) )
1612255534855:#cex是點,字體大小
1612255534856:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612255534856:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612255534856:#是150），Y軸是表達差異倍數取個log2
1612255534857:plotMA( dxr1, cex=1)
1612255630080:#挑幾個基因跑，免得跑太久
1612255630082:#this:特定exon; other:相同gene上其他的exon總和
1612255630082:genesForSubset = read.table(
1612255630085:file.path("DEXSeq_Result", pattern="./DEXSeq_Result/TMEM231.txt" ),
1612255630085:stringsAsFactors=FALSE)[[1]]
1612255637049:#挑幾個基因跑，免得跑太久
1612255637058:#this:特定exon; other:相同gene上其他的exon總和
1612255637059:genesForSubset = read.table(
1612255637059:file.path("DEXSeq_Result", pattern="/DEXSeq_Result/TMEM231.txt" ),
1612255637059:stringsAsFactors=FALSE)[[1]]
1612255640964:#挑幾個基因跑，免得跑太久
1612255640972:#this:特定exon; other:相同gene上其他的exon總和
1612255640973:genesForSubset = read.table(
1612255640973:file.path("DEXSeq_Result", pattern="DEXSeq_Result/TMEM231.txt" ),
1612255640973:stringsAsFactors=FALSE)[[1]]
1612255644360:#挑幾個基因跑，免得跑太久
1612255644361:#this:特定exon; other:相同gene上其他的exon總和
1612255644369:genesForSubset = read.table(
1612255644369:file.path("DEXSeq_Result", pattern="DEXSeq_Result/TMEM231.txt" ),
1612255644369:stringsAsFactors=FALSE)[[1]]
1612255766125:#挑幾個基因跑，免得跑太久
1612255766133:#this:特定exon; other:相同gene上其他的exon總和
1612255766133:genesForSubset = read.table(
1612255766134:file.path("DEXSeq_Result", pattern="TMEM231.txt" ),
1612255766134:stringsAsFactors=FALSE)[[1]]
1612255792873:#挑幾個基因跑，免得跑太久
1612255792875:#this:特定exon; other:相同gene上其他的exon總和
1612255792875:genesForSubset = read.table(
1612255792876:file.path("DEXSeq_Result", pattern="TMEM231.txt$" ),
1612255792877:stringsAsFactors=FALSE)[[1]]
1612255801996:#挑幾個基因跑，免得跑太久
1612255802004:#this:特定exon; other:相同gene上其他的exon總和
1612255802004:genesForSubset = read.table(
1612255802005:file.path("DEXSeq_Result", pattern=".txt" ),
1612255802005:stringsAsFactors=FALSE)[[1]]
1612255839401:#挑幾個基因跑，免得跑太久
1612255839402:#this:特定exon; other:相同gene上其他的exon總和
1612255839403:genesForSubset = read.table(
1612255839403:file.path("DEXSeq_Result", pattern="/Yun insterested gene_ENSG.txt" ),
1612255839404:stringsAsFactors=FALSE)[[1]]
1612255855259:#挑幾個基因跑，免得跑太久
1612255855267:#this:特定exon; other:相同gene上其他的exon總和
1612255855267:genesForSubset = read.table(
1612255855268:file.path("DEXSeq_Result", pattern="/TMEM231.txt" ),
1612255855268:stringsAsFactors=FALSE)[[1]]
1612255909078:#挑幾個基因跑，免得跑太久
1612255909087:#this:特定exon; other:相同gene上其他的exon總和
1612255909087:genesForSubset = read.table(
1612255909089:file.path("DEXSeq_Result", pattern="/TMEM231.txt" ),
1612255909090:stringsAsFactors=FALSE)[[1]]
1612255912979:#挑幾個基因跑，免得跑太久
1612255912987:#this:特定exon; other:相同gene上其他的exon總和
1612255912988:genesForSubset = read.table(
1612255912988:file.path("DEXSeq_Result", pattern="TMEM231.txt" ),
1612255912989:stringsAsFactors=FALSE)[[1]]
1612255916019:#挑幾個基因跑，免得跑太久
1612255916020:#this:特定exon; other:相同gene上其他的exon總和
1612255916021:genesForSubset = read.table(
1612255916022:file.path("DEXSeq_Result", pattern="TMEM231.txt" ),
1612255916022:stringsAsFactors=FALSE)[[1]]
1612255953653:#挑幾個基因跑，免得跑太久
1612255953654:#this:特定exon; other:相同gene上其他的exon總和
1612255953655:genesForSubset = read.table(
1612255953656:file.path("DEXSeq_Result", pattern="TMEM231.txt" ),
1612255953657:stringsAsFactors=FALSE)[[1]]
1612255973532:#挑幾個基因跑，免得跑太久
1612255973541:#this:特定exon; other:相同gene上其他的exon總和
1612255973541:genesForSubset = read.table(
1612255973541:file.path("DEXSeq_Result", pattern="DEXSeq_Result/TMEM231.txt" ),
1612255973542:stringsAsFactors=FALSE)[[1]]
1612255984960:#挑幾個基因跑，免得跑太久
1612255984969:#this:特定exon; other:相同gene上其他的exon總和
1612255984969:genesForSubset = read.table(
1612255984970:file.path("DEXSeq_Result/TMEM231.txt" ),
1612255984970:stringsAsFactors=FALSE)[[1]]
1612256973649:#挑幾個基因跑，免得跑太久
1612256973654:#this:特定exon; other:相同gene上其他的exon總和
1612256973655:genesForSubset = read.table("DEXSeq_Result/TMEM231.txt", header = F)
1612257087924:#挑幾個基因跑，免得跑太久
1612257087928:#this:特定exon; other:相同gene上其他的exon總和
1612257087930:genesForSubset = read.table(
1612257087933:"DEXSeq_Result/TMEM231.txt", header = F)
1612257092063:#挑幾個基因跑，免得跑太久
1612257092064:#this:特定exon; other:相同gene上其他的exon總和
1612257092064:genesForSubset = read.table(
1612257092076:"DEXSeq_Result/TMEM231.txt",
1612257092076:header = F)
1612257100199:#挑幾個基因跑，免得跑太久
1612257100200:#this:特定exon; other:相同gene上其他的exon總和
1612257100201:genesForSubset = read.table(
1612257100201:"DEXSeq_Result/TMEM231.txt", header = F)
1612257118836:#挑幾個基因跑，免得跑太久
1612257118844:#this:特定exon; other:相同gene上其他的exon總和
1612257118845:genesForSubset = read.table(
1612257118849:"DEXSeq_Result/TMEM231.txt", header = F)
1612257198248:#挑幾個基因跑，免得跑太久
1612257198250:#this:特定exon; other:相同gene上其他的exon總和
1612257198251:genesForSubset = read.table(
1612257198254:"DEXSeq_Result/TMEM231.txt", header = F)
1612257206423:# %in% 判斷是否在某個集合內
1612257206424:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612257214797:#挑幾個基因跑，免得跑太久
1612257214798:#this:特定exon; other:相同gene上其他的exon總和
1612257214799:genesForSubset = read.table(
1612257214799:"DEXSeq_Result/TMEM231.txt", header = TRUE)
1612257215938:# %in% 判斷是否在某個集合內
1612257215945:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612257225130:#挑幾個基因跑，免得跑太久
1612257225131:#this:特定exon; other:相同gene上其他的exon總和
1612257225132:genesForSubset = read.table(
1612257225132:"DEXSeq_Result/TMEM231.txt")
1612257226245:# %in% 判斷是否在某個集合內
1612257226245:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612257299123:#挑幾個基因跑，免得跑太久
1612257299125:#this:特定exon; other:相同gene上其他的exon總和
1612257299125:genesForSubset = read.table(
1612257299126:"DEXSeq_Result/TMEM231.txt",
1612257299127:stringsAsFactors=FALSE)[[1]]
1612257301023:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612257367193:dxd = DEXSeqDataSetFromHTSeq(
1612257367195:countFiles,
1612257367196:sampleData = sampleTable,
1612257367196:design= ~ sample + exon + condition:exon,
1612257367197:flattenedfile = flattenedFile)
1612257511930:#挑幾個基因跑，免得跑太久
1612257511933:#this:特定exon; other:相同gene上其他的exon總和
1612257511933:genesForSubset = read.table("DEXSeq_Result/TMEM231.txt",
1612257511934:stringsAsFactors=FALSE)[[1]]
1612257513237:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612257641630:#data內容，按this other 作 annotation
1612257641635:#前五行data,共8欄（有4個samples）
1612257641636:#前四欄the number of reads mapping to out exonic regions and
1612257641636:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612257641637:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612257641637:#1.按照一基因上某exon和total exon比較呈現
1612257641637:colData(dxd)
1612257694242:#data內容，按this other 作 annotation
1612257694243:#前五行data,共8欄（有4個samples）
1612257694244:#前四欄the number of reads mapping to out exonic regions and
1612257694244:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612257694245:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612257694245:#1.按照一基因上某exon和total exon比較呈現
1612257694246:colData(dxd)
1612257695367:head(counts(dxd),5)
1612257708417:#挑幾個基因跑，免得跑太久
1612257708426:#this:特定exon; other:相同gene上其他的exon總和
1612257708426:genesForSubset = read.table("DEXSeq_Result/TMEM231.txt",
1612257708428:stringsAsFactors=FALSE)[[1]]
1612257709884:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612257811909:#挑幾個基因跑，免得跑太久
1612257811925:#this:特定exon; other:相同gene上其他的exon總和
1612257811926:genesForSubset = read.table("DEXSeq_Result/TMEM231.txt",
1612257811935:stringsAsFactors=FALSE)[[1]]
1612257813080:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612257820826:#data內容，按this other 作 annotation
1612257820828:#前五行data,共8欄（有4個samples）
1612257820829:#前四欄the number of reads mapping to out exonic regions and
1612257820829:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612257820830:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612257820830:#1.按照一基因上某exon和total exon比較呈現
1612257820831:colData(dxd)
1612257822013:head(counts(dxd),5)
1612257827548:sampleAnnotation( dxd )
1612257828637:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612257828637:#gene length, 和RNA composition(極端差異或污染)影響
1612257828638:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612257828638:Normalisation = estimateSizeFactors( dxd )
1612257832685:Normalisation
1612257833537:sizeFactors(Normalisation)
1612257834408:#每個樣本的讀段總數mapped read
1612257834409:colSums(counts(Normalisation))
1612257835397:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612257835398:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612257835400:#識別組間平均表達顯著不同的基因。
1612257835401:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612257835401:Dispersion = estimateDispersions( Normalisation )
1612257860299:plotDispEsts(Dispersion)
1612258032858:#5 Testing for differential exon usage
1612258032861:deu = testForDEU( Dispersion )
1612258050702:colData(deu)
1612258052933:#評估 relative exon usage fold changes
1612258052934:#based on the coefficients of a GLM fit that uses the formula
1612258052934:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612258061794:mcols(foldchange)
1612258072870:#不要顯示中間步驟的value，用DEXSeqResults
1612258072871:dxr1 = DEXSeqResults( foldchange )
1612258095919:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1612258095920:dxr1 = DEXSeqResults( foldchange )
1612258103141:dxr1
1612258114939:#From this object, we can ask how many exonic regions are significant
1612258114940:#with a false discovery rate of 10%
1612258114941:table ( dxr1$padj < 0.1 )
1612258116108:#We may also ask how many genes are affected
1612258116110:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1612258121901:#We may also ask how many genes are affected
1612258121901:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1612258125559:#cex是點,字體大小
1612258125559:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612258125560:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612258125560:#是150），Y軸是表達差異倍數取個log2
1612258125561:plotMA( dxr1, cex=1)
1612258153935:#cex是點,字體大小
1612258153944:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612258153945:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612258153946:#是150），Y軸是表達差異倍數取個log2
1612258153946:plotMA( dxr1, cex=1)
1612258198173:#cex是點,字體大小
1612258198178:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612258198179:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612258198179:#是150），Y軸是表達差異倍數取個log2
1612258198179:plotMA( dxr1, cex=1)
1612258228318:plotMA( dxr1, cex=0.8)
1612258270822:#cex是點,字體大小
1612258270829:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612258270829:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612258270830:#是150），Y軸是表達差異倍數取個log2
1612258270830:plotMA( dxr1, cex=1)
1612258280357:#cex是點,字體大小
1612258280358:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612258280360:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612258280361:#是150），Y軸是表達差異倍數取個log2
1612258280361:plotMA( dxr1, cex=1)
1612258299230:plotDEXSeq( dxr1, "ENSG00000140464", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612258326673:plotDEXSeq( dxr1, "ENSG00000139842", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612258356705:#看單一transcript
1612258356714:plotDEXSeq( dxr1, "ENSG00000139842", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612258384963:#look at the count values from the individual samples
1612258384965:plotDEXSeq( dxr1, "ENSG00000139842", expression=FALSE, norCounts=TRUE,
1612258384966:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612258408020:#remove overall changes in expression from the plots
1612258408021:#to see changes in the expression of individual exons
1612258408021:plotDEXSeq( dxr1, "ENSG00000139842", expression=FALSE, splicing=TRUE,
1612258408022:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612258438371:#這裡應該要標出有顯著差異的exon,但FM no significant
1612258438371:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1612258662838:#挑幾個基因跑，免得跑太久
1612258662842:#this:特定exon; other:相同gene上其他的exon總和
1612258662843:genesForSubset = read.table("DEXSeq_Result/TMEM231.txt",
1612258662845:stringsAsFactors=FALSE)[[1]]
1612258692709:dxd = DEXSeqDataSetFromHTSeq(
1612258692710:countFiles,
1612258692711:sampleData = sampleTable,
1612258692711:design= ~ sample + exon + condition:exon,
1612258692712:flattenedfile = flattenedFile)
1612258838895:#挑幾個基因跑，免得跑太久
1612258838896:#this:特定exon; other:相同gene上其他的exon總和
1612258838897:genesForSubset = read.table("DEXSeq_Result/TMEM231.txt",
1612258838898:stringsAsFactors=FALSE)[[1]]
1612258840789:exon = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612258863047:#data內容，按this other 作 annotation
1612258863048:#前五行data,共8欄（有4個samples）
1612258863049:#前四欄the number of reads mapping to out exonic regions and
1612258863049:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612258863050:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612258863050:#1.按照一基因上某exon和total exon比較呈現
1612258863050:colData(exon)
1612258864231:head(counts(exon),5)
1612258899897:sampleAnnotation( exon )
1612258903788:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612258903789:#gene length, 和RNA composition(極端差異或污染)影響
1612258903790:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612258903790:Normalisation = estimateSizeFactors( exon )
1612258938513:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612258938514:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612258938514:#識別組間平均表達顯著不同的基因。
1612258938514:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612258938515:Dispersion = estimateDispersions( Normalisation )
1612258953276:plotDispEsts(Dispersion)
1612258965400:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612258965401:#gene length, 和RNA composition(極端差異或污染)影響
1612258965401:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612258965403:Normalisation = estimateSizeFactors( exon )
1612258970524:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612258970525:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612258970527:#識別組間平均表達顯著不同的基因。
1612258970529:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612258970530:Dispersion = estimateDispersions( Normalisation )
1612258980960:plotDispEsts(Dispersion)
1612258987970:#每個樣本的讀段總數mapped read
1612258987971:colSums(counts(Normalisation))
1612258997711:head(counts(exon),5)
1612259001073:#data內容，按this other 作 annotation
1612259001073:#前五行data,共8欄（有4個samples）
1612259001075:#前四欄the number of reads mapping to out exonic regions and
1612259001076:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612259001077:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612259001078:#1.按照一基因上某exon和total exon比較呈現
1612259001078:colData(exon)
1612259006682:#看counting bin details
1612259006682:#GRange:儲存genomic regions or genomic intervals data
1612259006683:#genomic range contains chr name, star, end, strand
1612259006683:#start and end are both 1-based positions relative to the 5’ end
1612259006683:#of the plus strand of the chromosome, even when the range is
1612259006684:#on the minus strand
1612259006684:#range width: end - start +1
1612259006685:# end >= start, except for empty ranges where end = star-1
1612259006685:#固定最左是start，最右是end
1612259006686:head( rowRanges(exon), 10 )
1612259008641:sampleAnnotation( exon )
1612259009716:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612259009718:#gene length, 和RNA composition(極端差異或污染)影響
1612259009721:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612259009724:Normalisation = estimateSizeFactors( exon )
1612259011395:Normalisation
1612259016983:sizeFactors(Normalisation)
1612259018663:#每個樣本的讀段總數mapped read
1612259018664:colSums(counts(Normalisation))
1612259019765:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612259019765:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612259019768:#識別組間平均表達顯著不同的基因。
1612259019769:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612259019770:Dispersion = estimateDispersions( Normalisation )
1612259028428:Dispersion
1612259033054:mcols(Dispersion)
1612259036037:plotDispEsts(Dispersion)
1612259166414:#每個樣本的讀段總數mapped read
1612259166419:colSums(counts(Normalisation))
1612259167585:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612259167587:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612259167587:#識別組間平均表達顯著不同的基因。
1612259167588:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612259167589:Dispersion = estimateDispersions( Normalisation )
1612259282683:sizeFactors(Normalisation)
1612259284777:#每個樣本的讀段總數mapped read
1612259284780:colSums(counts(Normalisation))
1612259286953:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612259286955:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612259286957:#識別組間平均表達顯著不同的基因。
1612259286962:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612259286966:Dispersion = estimateDispersions( Normalisation )
1612259302571:Dispersion
1612259307228:plotDispEsts(Dispersion)
1612259309463:mcols(Dispersion)
1612259310991:#5 Testing for differential exon usage
1612259310992:deu = testForDEU( Dispersion )
1612259314453:deu
1612259317717:colData(deu)
1612259321037:#評估 relative exon usage fold changes
1612259321046:#based on the coefficients of a GLM fit that uses the formula
1612259321046:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612259392500:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1612259392504:dxr1 = DEXSeqResults( foldchange )
1612259474828:dxr1
1612259476940:mcols(dxr1)$description
1612259478170:#From this object, we can ask how many exonic regions are significant
1612259478170:#with a false discovery rate of 10%
1612259478173:table ( dxr1$padj < 0.1 )
1612259479745:#We may also ask how many genes are affected
1612259479745:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1612259486501:#cex是點,字體大小
1612259486502:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612259486507:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612259486508:#是150），Y軸是表達差異倍數取個log2
1612259486509:plotMA( dxr1, cex=1)
1612259494152:#cex是點,字體大小
1612259494153:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612259494154:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612259494156:#是150），Y軸是表達差異倍數取個log2
1612259494158:plotMA( dxr1, cex=1)
1612259512760:#cex是點,字體大小
1612259512763:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612259512763:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612259512763:#是150），Y軸是表達差異倍數取個log2
1612259512764:plotMA( dxr1, cex=1)
1612259544851:#cex是點,字體大小
1612259544861:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612259544861:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612259544862:#是150），Y軸是表達差異倍數取個log2
1612259544862:plotMA( dxr1, cex=1)
1612259574320:#cex是點,字體大小
1612259574332:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612259574334:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612259574336:#是150），Y軸是表達差異倍數取個log2
1612259574336:plotMA( dxr1, cex=1)
1612259623842:#cex是點,字體大小
1612259623843:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612259623844:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612259623844:#是150），Y軸是表達差異倍數取個log2
1612259623845:plotMA( dxr1, cex=0.5)
1612259671769:plotDEXSeq( dxr1, "ENSG00000116560", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612259674320:#看單一transcript
1612259674321:plotDEXSeq( dxr1, "ENSG00000116560", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612259680626:plotDEXSeq( dxr1, "ENSG00000116560", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612270513350:#cex是點,字體大小
1612270513354:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612270513354:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612270513354:#是150），Y軸是表達差異倍數取個log2
1612270513355:plotMA( dxr1, cex=0.5)
1612270540637:#cex是點,字體大小
1612270540647:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612270540647:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612270540648:#是150），Y軸是表達差異倍數取個log2
1612270540649:plotMA( dxr1, cex=1)
1612270573486:#From this object, we can ask how many exonic regions are significant
1612270573494:#with a false discovery rate of 10%
1612270573495:table ( dxr1$padj < 0.05 )
1612270579323:#cex是點,字體大小
1612270579324:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612270579324:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612270579325:#是150），Y軸是表達差異倍數取個log2
1612270579325:plotMA( dxr1, cex=1)
1612270613221:plotDEXSeq( dxr1, "ENSG00000116560", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612270676415:#看單一transcript
1612270676419:plotDEXSeq( dxr1, "ENSG00000116560", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612270696039:#look at the count values from the individual samples
1612270696040:plotDEXSeq( dxr1, "ENSG00000116560", expression=FALSE, norCounts=TRUE,
1612270696040:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612270712529:#remove overall changes in expression from the plots
1612270712530:#to see changes in the expression of individual exons
1612270712530:plotDEXSeq( dxr1, "ENSG00000116560", expression=FALSE, splicing=TRUE,
1612270712531:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612270776151:plotDispEsts(Dispersion)
1612270945471:#remove overall changes in expression from the plots
1612270945473:#to see changes in the expression of individual exons
1612270945474:plotDEXSeq( dxr1, "ENSG00000116560", expression=FALSE, splicing=TRUE,
1612270945474:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612270978582:plotDispEsts(Dispersion)
1612271027710:warning(Dispersion)
1612283938785:Dispersion
1612283969284:warings(Dispersion)
1612283979409:warnings(Dispersion)
1612283987952:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612286069046:#這裡應該要標出有顯著差異的exon,但FM no significant
1612286069050:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80") )
1612286117986:warnings(DEXSeqHTML())
1612286139931:warnings(DEXSeqHTML(dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80"))
1612286149024:)
1612286258316:#這裡應該要標出有顯著差異的exon,但FM no significant
1612286258322:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80"),fitExpToVar="condition" )
1612328696811:mcols(Dispersion)
1612328711924:mcols(foldchange)
1612328719035:mcols(dxr1)$description
1612328746264:#From this object, we can ask how many exonic regions are significant
1612328746272:#with a false discovery rate of 10%
1612328746272:table ( dxr1$padj < 0.05 )
1612328747967:#False(false positive):rarer possibility,說結果有差，其實沒有
1612328747975:#TRUE:結果有差，真的 有
1612328747976:#We may also ask how many genes are affected
1612328747976:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1612328876374:head(foldchange)
1612328967338:export(siD8exon, "DEXseq/siD8exon.csv", format = "csv")
1612328981414:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612328990229:export(siD8exon, "DEXseq/siD8exon.csv", format = "csv")
1612329034963:write.csv(siD8exon, "DEXseq/siD8exon.csv", row.names = FALSE)
1612329067535:dxr1
1612329077402:write.csv(dxr1, "DEXseq/siD8exon.csv", row.names = FALSE)
1612329088699:export(dxr1, "DEXseq/siD8exon.csv", format = "csv")
1612329102123:dxr1
1612329127438:export(siD8exon, "DEXseq/siD8exon.csv", format = "csv")
1612329210909:library(readr)
1612329211221:siD8exon <- read_csv("DEXseq/siD8exon.csv")
1612329212374:View(siD8exon)
1612329241216:export(siD8exon, "DEXseq/siD8exon.csv", format = "csv")
1612329281436:View(siD8exon)
1612329704086:dxr1
1612329720263:write.csv(dxr1, "DEXseq/siD8exon.csv", row.names = TRUE)
1612329771849:View(foldchange)
1612329785651:foldchange
1612329883371:exon
1612329903127:dxr1
1612329917047:View(dxr1)
1612329930848:dxr1@rownames
1612330000763:dxr1@transcripts
1612330036078:View(dxr1)
1612330082744:dxr1@listData[["featureID"]]
1612330095426:dxr1@listData[["pvalue"]]
1612330814135:setwd ("geneCounts1/") # ?Ч??o?洫???A???ɮצb?q???W?????m?C
1612330832823:gene <- read.csv ("make_geneID_list.csv", stringsAsFactors = F) # import file.
1612330837947:a <- strsplit (gene$V1, split = ":") # substringing, separate the genes & counts
1612330844125:b <- sapply (a, function (x) x [1], USE.NAMES = F) # remove counts, remain genes.
1612330848889:c <- strsplit (b, "[+]") # substringing, separate each gene in each row.
1612330852754:d <- unlist (c) # unlist to make a list of every gene occurred in the dataset.
1612330855595:length (unique (d)) # count the number of the genes, n = 64252.
1612330857230:e <- sapply (1: length (c), function (x) length (c [[x]])) # count the number of the genes in each row.
1612330860757:sum (e) == length (d) # check if the sum of the genes in each row would fit the number of the total gene number.
1612330884255:e
1612330912627:#2.按照KD treatment呈現
1612330912628:head( featureCounts(exon), 5 )
1612330958423:View(featureCounts(exon))
1612331067101:#data內容，按this other 作 annotation
1612331067109:#前五行data,共8欄（有4個samples）
1612331067109:#前四欄the number of reads mapping to out exonic regions and
1612331067110:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612331067110:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612331067112:#1.按照一基因上某exon和total exon比較呈現
1612331067113:colData(exon)
1612331470696:unique(c)
1612331520012:f <- unique(c)
1612331523606:f
1612331617545:g <- matrix(unique(c),ncol = 1)
1612331649862:h <- as.data.frame(martix(c),ncol = 1)
1612331663580:h <- as.data.frame(matrix(c),ncol = 1)
1612331668565:h
1612331699749:c <- strsplit (b, "[+]") # substringing, separate each gene in each row.
1612331705151:g <- matrix(unique(c),ncol = 1)
1612331709341:h <- as.data.frame(matrix(c),ncol = 1)
1612331710846:h
1612331737987:View(h)
1612331767936:i <- unique(h)
1612331772786:View(i)
1612331919258:setwd ("geneCounts1/") # ?Ч??o?洫???A???ɮצb?q???W?????m?C
1612331922360:gene <- read.csv ("make_geneID_list.csv", stringsAsFactors = F) # import file.
1612331925626:a <- strsplit (gene$V1, split = ":") # substringing, separate the genes & counts
1612331928917:b <- sapply (a, function (x) x [1], USE.NAMES = F) # remove counts, remain genes.
1612331932961:c <- strsplit (b, "[+]") # substringing, separate each gene in each row.
1612331944812:f <- as.data.frame(matrix(c),ncol = 1)
1612331951962:View(f)
1612332310823:#看counting bin details
1612332310828:#GRange:儲存genomic regions or genomic intervals data
1612332310828:#genomic range contains chr name, star, end, strand
1612332310829:#start and end are both 1-based positions relative to the 5’ end
1612332310829:#of the plus strand of the chromosome, even when the range is
1612332310830:#on the minus strand
1612332310830:#range width: end - start +1
1612332310831:# end >= start, except for empty ranges where end = star-1
1612332310831:#固定最左是start，最右是end
1612332310831:View( rowRanges(exon), 10 )
1612332352866:f <- as.data.frame (matrix (unique (d), ncol = 1))
1612332354278:View(f)
1612333594849:g <- sort (unique (d))
1612333596256:h <- as.data.frame (matrix (g, ncol = 1))
1612333606632:View(h)
1612333882487:plot (1:100)
1612334029486:letters ()
1612334078062:letters
1612334091154:letters [5]
1612334112549:LETTERS
1612334123866:d [3]
1612334173946:matrix (letters, ncol = 2)
1612334214675:data.frame (letters, ncol = 2)
1612334320140:setwd ("RNAseq1")
1612334443778:genelist
1612334512814:h
1612334521929:write.csv (h, "count.gene.csv")
1612334619798:write.csv (h, "count.gene.csv", row.names = F, col.names = F)
1612334692547:genelist
1612334701910:h
1612334754403:genelist <- h
1612334760840:write.csv (genelist, "DEXseq/genelist.csv", row.names = FALSE)
1612334784449:write.csv (genelist, "genelist.csv", row.names = FALSE)
1612334839235:setwd ("DEXseq")
1612334860523:setwd ("./DEXseq")
1612334871584:setwd ("RNAseq1/DEXseq")
1612334891414:setwd ("TOSHIBA EXT/RNAseq1/DEXseq")
1612335137107:View(dxr1)
1612335149610:dxr1
1612335176049:str (dxr1)
1612335366160:dxr1$groupID
1612335383349:dxr1$
1612335383350:mcols(dxr1)$description
1612335398421:View(f)
1612335404768:mcols(dxr1)$description
1612335416664:dxr1$featureID
1612335438909:dxr1$exonBaseMean
1612335469998:library (dpylr)
1612335479188:library (dplyr)
1612335510848:colnames (dxr1)
1612335537735:dxr1$stat
1612335573329:dxr1$knockdown
1612335693396:dxr1 %>% select (groupID, featureID, padj, genomicData, transcripts)
1612335712435:dxr1 %>% select (groupID, featureID, padj)
1612335725260:summary (dxr1)
1612335732034:mcols(dxr1)$description
1612335794290:dxr1 [1]
1612335809089:dxr1 [13]
1612335844835:colnames (dxr1)
1612335922546:dxr1 [c(1, 2, 3, 7)]
1612335953861:x <- dxr1 [c(1, 2, 3, 7)]
1612335956475:View(x)
1612336164292:library(DEXSeq)
1612336165627:library(GenomicFeatures)
1612336173179:library(GenomicRanges)
1612336384524:library (pasilla)
1612336405687:data (pasillaExon, package = "pasilla")
1612336430283:data (pasillaExons, package = "pasilla")
1612336524741:data("pasillaExons", package="pasilla")
1612337569059:plotDEXSeq( dxr1, "ENSG00000116560", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612337658249:warnings ()
1612337908963:#看單一transcript
1612337908969:plotDEXSeq( dxr1, "ENSG00000116560", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612337977646:#look at the count values from the individual samples
1612337977650:plotDEXSeq( dxr1, "ENSG00000116560", expression=FALSE, norCounts=TRUE,
1612337977653:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612338002750:#remove overall changes in expression from the plots
1612338002751:#to see changes in the expression of individual exons
1612338002752:plotDEXSeq( dxr1, "ENSG00000116560", expression=FALSE, splicing=TRUE,
1612338002752:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1612343372342:View(counts(exon),5)
1612343387545:head(counts(exon),5)
1612343464357:#data內容，按this other 作 annotation
1612343464358:#前五行data,共8欄（有4個samples）
1612343464359:#前四欄the number of reads mapping to out exonic regions and
1612343464359:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612343464360:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612343464362:#1.按照一基因上某exon和total exon比較呈現
1612343464362:colData(exon)
1612343582601:#2.按照KD treatment呈現
1612343582612:head( featureCounts(exon), 5 )
1612343653132:split( seq_len(ncol(exon)), colData(exon)$exon )
1612426650694:dxr1
1612426708151:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612426724701:library(DEXSeq,readr)
1612426749376:#read:讀一鹼基片段，很多read根據序列重複數量接成一個counting bin
1612426749377:#理論上同一chr上的read結合拼出一個counting bin，但實際上做不到
1612426749377:#所以事實上是根據由已知的library
1612426749378:#read count數值越高，說明該RNA豐度越高
1612426749378:## Loading files
1612426749379:inDir = system.file("")
1612426751729:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612426753593:basename(countFiles)
1612426754743:# Loading data frame, data.frame不同欄可放入不同屬性資料
1612426754751:sampleTable = data.frame(
1612426754752:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1612426754752:condition = c("control", "knockdown", "control", "knockdown"),
1612426754753:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1612426754753:)
1612426756828:sampleTable
1612426758725:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1612426781134:basename(flattenedFile)
1612426785231:dxd = DEXSeqDataSetFromHTSeq(
1612426785239:countFiles,
1612426785239:sampleData = sampleTable,
1612426785240:design= ~ sample + exon + condition:exon,
1612426785240:flattenedfile = flattenedFile)
1612615235738:dxd
1612615246609:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612615260598:library(DEXSeq,readr)
1612615307656:#read:讀一鹼基片段，很多read根據序列重複數量接成一個counting bin
1612615307665:#理論上同一chr上的read結合拼出一個counting bin，但實際上做不到
1612615307665:#所以事實上是根據由已知的library
1612615307666:#read count數值越高，說明該RNA豐度越高
1612615307666:## Loading files
1612615307667:inDir = system.file("")
1612615307668:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612615307705:basename(countFiles)
1612615307708:# Loading data frame, data.frame不同欄可放入不同屬性資料
1612615307709:sampleTable = data.frame(
1612615307710:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1612615307712:condition = c("control", "knockdown", "control", "knockdown"),
1612615307713:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1612615307714:)
1612615307716:sampleTable
1612615307720:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1612615307731:basename(flattenedFile)
1612615307732:dxd = DEXSeqDataSetFromHTSeq(
1612615307732:countFiles,
1612615307733:sampleData = sampleTable,
1612615307733:design= ~ sample + exon + condition:exon,
1612615307733:flattenedfile = flattenedFile)
1612615404525:dxd
1612615423477:View(dxd)
1612615445243:dxd@dispersionFunction
1612615515059:head(dxd)
1612615617457:View(dxd)
1612615625374:#挑幾個基因跑，免得跑太久
1612615625382:#this:特定exon; other:相同gene上其他的exon總和
1612615625383:genesForSubset = read.table("DEXSeq_Result/TMEM231.txt",
1612615625384:stringsAsFactors=FALSE)[[1]]
1612615627252:exon = dxd[geneI1Ds( dxd ) %in% genesForSubset,]
1612615646590:exon = dxd[geneIDs( dxd ) %in% genesForSubset,]
1612615649598:#data內容，按this other 作 annotation
1612615649600:#前五行data,共8欄（有4個samples）
1612615649600:#前四欄the number of reads mapping to out exonic regions and
1612615649601:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1612615649601:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1612615649602:#1.按照一基因上某exon和total exon比較呈現
1612615649602:colData(exon)
1612615651991:head(counts(exon),5)
1612615652901:#2.按照featureIDs/exonIDs呈現
1612615652902:head( featureCounts(exon), 5 )
1612615653395:split( seq_len(ncol(exon)), colData(exon)$exon )
1612615654395:#看counting bin details
1612615654404:#GRange:儲存genomic regions or genomic intervals data
1612615654404:#genomic range contains chr name, star, end, strand
1612615654404:#start and end are both 1-based positions relative to the 5’ end
1612615654405:#of the plus strand of the chromosome, even when the range is
1612615654405:#on the minus strand
1612615654405:#range width: end - start +1
1612615654406:# end >= start, except for empty ranges where end = star-1
1612615654406:#固定最左是start，最右是end
1612615654406:head( rowRanges(exon), 10 )
1612615655221:sampleAnnotation( exon )
1612615656485:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1612615656494:#gene length, 和RNA composition(極端差異或污染)影響
1612615656494:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1612615656495:Normalisation = estimateSizeFactors( exon )
1612615658306:Normalisation
1612615659295:sizeFactors(Normalisation)
1612615660364:#每個樣本的讀段總數mapped read
1612615660364:colSums(counts(Normalisation))
1612615661305:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612615661313:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612615661313:#識別組間平均表達顯著不同的基因。
1612615661314:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612615661314:#dispersion在看是KD造成影響，還是replicate沒做好
1612615661314:Dispersion = estimateDispersions( Normalisation )
1612615672781:#4.3Dispersion estimation解釋了基因的變異和mean水平
1612615672789:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1612615672790:#識別組間平均表達顯著不同的基因。
1612615672790:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1612615672791:#dispersion在看是KD造成影響，還是replicate沒做好
1612615672791:Dispersion = estimateDispersions( Normalisation )
1612615680586:Dispersion
1612615681579:plotDispEsts(Dispersion)
1612615786812:#5 Testing for differential exon usage
1612615786814:deu = testForDEU( Dispersion )
1612615790792:deu
1612615791951:colData(deu)
1612615792791:#評估 relative exon usage fold changes
1612615792799:#based on the coefficients of a GLM fit that uses the formula
1612615792800:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1612615796967:foldchange
1612615798093:mcols(foldchange)
1612615800209:View(foldchange)
1612615808872:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1612615808873:dxr1 = DEXSeqResults( foldchange )
1612615812794:dxr1
1612615814465:summary (dxr1)
1612615816673:library (dplyr)
1612615853388:#From this object, we can ask how many exonic regions are significant
1612615853389:#with a false discovery rate of 10%
1612615853389:table ( dxr1$padj < 0.05 )
1612615854536:#False(false positive):rarer possibility,說結果有差，其實沒有
1612615854537:#TRUE:結果有差，真的 有
1612615854537:#We may also ask how many genes are affected
1612615854538:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1612615855592:#當sample來自相同distribution (e.g.KD後沒差異),
1612615855600:#the p-values are uniformly distributed
1612615855600:#當sample來自不同distribution (e.g.KD後有差異),
1612615855601:#the p-values are heavily skewed and closer to 0
1612615855601:#padj:distribution of p-value to get a new p-value(???)
1612615855601:#reduce FDR by increasing sample sizes
1612615855602:#cex是點,字體大小
1612615855602:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1612615855602:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1612615855603:#是150），Y軸是表達差異倍數取個log2
1612615855603:plotMA( dxr1, cex=1)
1612766244955:library(DEXSeq,readr,rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612766250761:library(DEXSeq,readr,rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612766258483:rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2
1612766264517:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1612766266339:library(DEXSeq,readr)
1612766305893:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1612766305902:library(DEXSeq,readr)
1612766305903:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612766305904:basename(countFiles)
1612766305912:# Loading data frame, data.frame不同欄可放入不同屬性資料
1612766305913:sampleTable = data.frame(
1612766305914:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1612766305915:condition = c("control", "knockdown", "control", "knockdown"),
1612766305916:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1612766305917:)
1612766305922:sampleTable
1612766305933:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1612766305933:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1612766305933:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1612766305934:basename(flattenedFile)
1612766305934:dxd = DEXSeqDataSetFromHTSeq(
1612766305935:countFiles,
1612766305935:sampleData = sampleTable,
1612766305935:design= ~ sample + exon + condition:exon,
1612766305936:flattenedfile = flattenedFile)
1612766318079:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612766319054:basename(countFiles)
1612766327132:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612766327785:basename(countFiles)
1612766371713:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1612766386786:library(DEXSeq,readr)
1612766405278:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1612766406253:basename(countFiles)
1612766413398:# Loading data frame, data.frame不同欄可放入不同屬性資料
1612766413404:sampleTable = data.frame(
1612766413405:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1612766413405:condition = c("control", "knockdown", "control", "knockdown"),
1612766413406:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1612766413406:)
1612766417468:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1612766420718:dxd = DEXSeqDataSetFromHTSeq(
1612766420726:countFiles,
1612766420727:sampleData = sampleTable,
1612766420727:design= ~ sample + exon + condition:exon,
1612766420728:flattenedfile = flattenedFile)
1612766531100:dxr = DEXSeq(dxd)
1612767960102:dxr = DEXSeq(dxd)
1613497330074:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1613497347884:library(DEXSeq,readr)
1613497367790:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1613497367791:library(DEXSeq,readr)
1613497367792:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1613497367793:basename(countFiles)
1613497367794:# Loading data frame, data.frame不同欄可放入不同屬性資料
1613497367795:sampleTable = data.frame(
1613497367796:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1613497367796:condition = c("control", "knockdown", "control", "knockdown"),
1613497367797:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1613497367797:)
1613497367799:sampleTable
1613497367804:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1613497367805:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1613497367805:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1613497367806:basename(flattenedFile)
1613497367806:dxd = DEXSeqDataSetFromHTSeq(
1613497367807:countFiles,
1613497367807:sampleData = sampleTable,
1613497367807:design= ~ sample + exon + condition:exon,
1613497367808:flattenedfile = flattenedFile)
1613497367813:dxr = DEXSeq(dxd)
1613497368765:class(dxr)
1613497380334:dnd = DEXSeqDataSetFromHTSeq(
1613497380335:countFiles,
1613497380335:sampleData = sampleTable,
1613497380336:design= ~ sample + exon + condition:exon,
1613497380336:flattenedfile = flattenedFile)
1613497405173:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1613497405182:library(DEXSeq,readr)
1613497405184:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1613497405185:basename(countFiles)
1613497405187:# Loading data frame, data.frame不同欄可放入不同屬性資料
1613497405187:sampleTable = data.frame(
1613497405188:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1613497405189:condition = c("control", "knockdown", "control", "knockdown"),
1613497405189:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1613497405190:)
1613497405196:sampleTable
1613497405199:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1613497405199:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1613497405200:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1613497405201:basename(flattenedFile)
1613497405202:dxd = DEXSeqDataSetFromHTSeq(
1613497405204:countFiles,
1613497405205:sampleData = sampleTable,
1613497405206:design= ~ sample + exon + condition:exon,
1613497405207:flattenedfile = flattenedFile)
1613497405210:dxr = DEXSeq(dxd)
1613497405212:class(dxr)
1613497412593:dxr = DEXSeq(dxd)
1613497420374:countFiles = list.files("geneCounts1", pattern="count.txt$", full.names = TRUE)
1613497422755:basename(countFiles)
1613497477164:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1613497481826:library(DEXSeq,readr)
1613497500847:inDir = system.file("DEXseq/1p-pair/")
1613497500849:countFiles = list.files(inDir, pattern="count.txt$", full.names = TRUE)
1613497500849:basename(countFiles)
1613497500851:# Loading data frame, data.frame不同欄可放入不同屬性資料
1613497500851:sampleTable = data.frame(
1613497500851:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1613497500852:condition = c("control", "knockdown", "control", "knockdown"),
1613497500852:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1613497500853:)
1613497500858:sampleTable
1613497500864:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1613497500864:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1613497500865:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1613497500892:basename(flattenedFile)
1613497500893:dnd = DEXSeqDataSetFromHTSeq(
1613497500893:countFiles,
1613497500893:sampleData = sampleTable,
1613497500894:design= ~ sample + exon + condition:exon,
1613497500894:flattenedfile = flattenedFile)
1613497500897:dnr = DEXSeq(dnd)
1613497502836:class(dnr)
1613497673137:inDir = system.file("DEXseq/1p-pair/")
1613497748482:inDir
1613497774620:countFiles = list.files(path="DEXseq/1p-pair/", pattern="count.txt$", full.names = TRUE)
1613497776446:basename(countFiles)
1613497778810:# Loading data frame, data.frame不同欄可放入不同屬性資料
1613497778811:sampleTable = data.frame(
1613497778812:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1613497778812:condition = c("control", "knockdown", "control", "knockdown"),
1613497778813:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1613497778813:)
1613497780745:sampleTable
1613497781850:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1613497783539:basename(flattenedFile)
1613497784706:dnd = DEXSeqDataSetFromHTSeq(
1613497784707:countFiles,
1613497784707:sampleData = sampleTable,
1613497784708:design= ~ sample + exon + condition:exon,
1613497784708:flattenedfile = flattenedFile)
1613497882302:dnr = DEXSeq(dnd)
1613504086613:class(dnr)
1613528944306:class(dnr)
1613528950282:dnr
1614432686201:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1614432690377:library(DEXSeq,readr)
1614432707846:countFiles = list.files(path="DEXseq/1p-pair/", pattern="count.txt$", full.names = TRUE)
1614432708240:basename(countFiles)
1614432708243:# Loading data frame, data.frame不同欄可放入不同屬性資料
1614432708243:sampleTable = data.frame(
1614432708245:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1614432708246:condition = c("control", "knockdown", "control", "knockdown"),
1614432708246:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1614432708247:)
1614432708250:sampleTable
1614432708255:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1614432708256:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1614432708257:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1614432708270:basename(flattenedFile)
1614432892959:dnd = DEXSeqDataSetFromHTSeq(
1614432892961:countFiles,
1614432892962:sampleData = sampleTable,
1614432892963:design= ~ sample + exon + condition:exon,
1614432892965:flattenedfile = flattenedFile)
1614432999534:dnr = DEXSeq(dnd)
1614436266376:#class:查詢物件的類別
1614436266396:class(dnr)
1614436321342:summary(dnr)
1614436348223:table ( tapply( dnr$padj < 0.1, dxr1$groupID, any ) )
1614436355186:table ( tapply( dnr$padj < 0.1, dnr$groupID, any ) )
1614436369768:table ( dnr$padj < 0.05 )
1614436380805:table ( dnr$padj < 0.1 )
1614436410318:plot(dnr)
1614436461498:plotMA(dnr)
1614436513006:plotMA(dnr)
1614439607317:plotDispEsts(Dispersion)
1614439633542:plotDEXSeq( dnr, "ENSG00000116560", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614439768225:plotDEXSeq( dnr, "ENSG00000116560", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614439812735:plotDEXSeq( dnr, "ENSG00000116560", expression=FALSE, norCounts=TRUE,
1614439812738:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614439863172:DEXSeqHTML( dnr, FDR=0.05, color=c("#FF000080", "#0000FF80") )
1614440564324:dnr.sig <- as.data.frame(dnr[dnr$padj < 0.1 & !is.na(dnr$padj),])
1614440566457:library(dplyr)
1614440568081:dnr.sig.genes <- dnr.sig %>%
1614440568082:select(groupID, featureID) %>%
1614440568082:group_by(groupID) %>%
1614440568083:mutate(featureID_by_groupID = paste(featureID, collapse = ",")) %>%
1614440568085:select(-featureID) %>%
1614440568085:unique()
1614440628527:write.table(dnr, "DEXSeq_results0227" , sep="\t", col.names=T, row.names = T)
1614440708819:dnd.sig <- as.data.frame(dnd[dnd$padj < 0.1 & !is.na(dnd$padj),])
1614441135778:dnd.sig.genes <- dnd.sig %>%
1614441135781:select(groupID, featureID) %>%
1614441135782:group_by(groupID) %>%
1614441135783:mutate(featureID_by_groupID = paste(featureID, collapse = ",")) %>%
1614441135784:select(-featureID) %>%
1614441135785:unique()
1614441139763:dnd.sig <- as.data.frame(dnd[dnd$padj < 0.1 & !is.na(dnd$padj),])
1614441217575:dnr.sig <- as.data.frame(dnr[dnr$padj < 0.1 & !is.na(dnr$padj),])
1614441247141:write.table(dnr, "DEXSeq_results0227" , sep="\t", col.names=T, row.names = T)
1614441590538:write.table(dnr.sig, "DEXSeq_results0227" , sep="\t", col.names=T, row.names = T)
1614441721247:write.csv(dnr.sig, "DEXSeq_results0227" , sep="\t", col.names=T, row.names = T)
1614441752870:write.csv(dnr, "DEXSeq_results0227" , sep="\t", col.names=T, row.names = T)
1614442589437:library(DEXSeq,readr, magrittr)
1614442660848:dnr.sig.genes <- dnr.sig %>%
1614442660852:select(groupID, featureID) %>%
1614442660853:group_by(groupID) %>%
1614442660854:mutate(featureID_by_groupID = paste(featureID, collapse = ",")) %>%
1614442660855:select(-featureID) %>%
1614442660856:unique()
1614442743500:#class:查詢物件的類別
1614442743509:class(dnr)
1614442753693:dnr = DEXSeq(dnd)
1614503877141:table ( dnr$padj < 0.1 )
1614503877682:sampleTable
1614506002487:dnr
1614506248579:dnr
1614506282465:dnd
1614513353248:dxd = DEXSeqDataSetFromHTSeq(
1614513353255:countFiles,
1614513353256:sampleData = sampleTable,
1614513353256:design= ~ sample + exon + condition:exon,
1614513353257:flattenedfile = flattenedFile)
1614513447977:dxd
1614513459962:class(dxd)
1614538296753:table ( tapply( dnr$padj < 0.1, dnr$groupID, any ) )
1614542172252:table ( dnr$padj < 0.1 )
1614542546644:View{table ( dnr$padj < 0.1 )}
1614542553985:view{table ( dnr$padj < 0.1 )}
1614542565187:View(table ( dnr$padj < 0.1 ))
1614546635789:genesForSubset <- read.table("geneCounts1/all_ensg_list.csv",
1614546635791:stringsAsFactors=FALSE)[[1]]
1614546652456:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1614546652465:exon <- dxd[geneIDs( dxd ) %in% genesForSubset,]
1614546755933:colData(exon)
1614546760225:head(counts(exon), 5)
1614546911087:# 這是star 2p ensemble count
1614546911088:countFiles = list.files(path="DEXseq/1p-pair/", pattern="count.txt$", full.names = TRUE)
1614546913565:basename(countFiles)
1614546914390:# Loading data frame, data.frame不同欄可放入不同屬性資料
1614546914398:sampleTable = data.frame(
1614546914399:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1614546914400:condition = c("control", "knockdown", "control", "knockdown"),
1614546914400:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1614546914401:)
1614546916395:sampleTable
1614546918282:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1614546920637:basename(flattenedFile)
1614546921942:dnd = DEXSeqDataSetFromHTSeq(
1614546921951:countFiles,
1614546921951:sampleData = sampleTable,
1614546921952:design= ~ sample + exon + condition:exon,
1614546921953:flattenedfile = flattenedFile)
1614547335747:genesForSubset <- read.table("geneCounts1/all_ensg_list.csv",
1614547335757:stringsAsFactors=FALSE)[[1]]
1614547341424:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1614547341424:exon <- dxd[geneIDs( dxd ) %in% genesForSubset,]
1614547351662:colData(exon)
1614547352545:head(counts(exon), 5)
1614547355432:head( rowRanges(exon), 10 )
1614547370229:sampleAnnotation( exon )
1614547376667:Normalisation = estimateSizeFactors( exon )
1614547392563:Normalisation
1614547418774:View(Normalisation)
1614547430021:class(Normalisation)
1614547440400:sizeFactors(Normalisation)
1614547447617:#每個樣本的讀段總數mapped read
1614547447627:colSums(counts(Normalisation))
1614547450584:Dispersion = estimateDispersions( Normalisation )
1614548083869:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1614548083876:exon <- dnd[geneIDs( dnd ) %in% genesForSubset,]
1614548170972:colData(exon)
1614548172041:head(counts(exon), 5)
1614548173508:head( rowRanges(exon), 10 )
1614548177324:sampleAnnotation( exon )
1614548180622:Normalisation = estimateSizeFactors( exon )
1614548190051:Normalisation
1614548191839:sizeFactors(Normalisation)
1614548193732:#每個樣本的讀段總數mapped read
1614548193740:colSums(counts(Normalisation))
1614548195935:Dispersion = estimateDispersions( Normalisation )
1614548820898:Dispersion
1614548822642:plotDispEsts(Dispersion)
1614548827805:mcols(Dispersion)
1614548838657:#5 Testing for differential exon usage
1614548838657:deu = testForDEU( Dispersion )
1614548902416:#評估 relative exon usage fold changes
1614548902418:#based on the coefficients of a GLM fit that uses the formula
1614548902419:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1614551138423:dnr = DEXSeq(foldchange)
1614574378690:quit
1614574378709:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1614574439943:mcols(foldchange)
1614574583745:write.csv(foldchange, "DEXseq/1p-pair/all_gene.csv", row.names = FALSE)
1614574618307:write.csv(foldchange, "DEXseq/1p-pair/allgene.csv", row.names = FALSE)
1614574624004:foldchange
1614574655790:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1614574657035:library(DEXSeq,readr, magrittr)
1614574663231:write.csv(foldchange, "DEXseq/1p-pair/allgene.csv", row.names = FALSE)
1614574673840:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1614574673841:dxr1 = DEXSeqResults( foldchange )
1614574727473:dxr1
1614574741056:write.csv(dxr1, "DEXseq/1p-pair/allgene.csv", row.names = FALSE)
1614575429281:table ( tapply( dnr$padj < 0.1, dnr$groupID, any ) )
1614575444615:table ( tapply( dxr1$padj < 0.1, dnr$groupID, any ) )
1614575456024:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1614575466736:table ( dxr1$padj < 0.1 )
1614575650241:plotMA(dxr1)
1614576008060:load("/Volumes/TOSHIBA EXT/RNAseq1/.RData")
1614576125668:write.table(as.data.frame(DEXSeqResults(foldchange)), "allgeneResults.tsv", quote=FALSE, sep="\t", dec=".")
1614576175405:write.table(as.data.frame(DEXSeqResults(foldchange)), "allgeneResults.csv", quote=FALSE, sep="\t", dec=".")
1614591933286:load("/Volumes/TOSHIBA EXT/RNAseq1/.RData")
1614592049985:write.table(dxr1, "DEXSeq_results" , sep="\t", col.names=T, row.names = T)
1614592154001:,
1614592158148:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80"), fitExpToVar="condition")
1614592185571:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"), fitExpToVar="condition")
1614622749083:load("/Volumes/TOSHIBA EXT/RNAseq1/.RData")
1614623393163:DEXSeqHTML( foldchange, FDR=0.1, color=c("#FF000080", "#0000FF80"), fitExpToVar="condition")
1614623404897:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"), fitExpToVar="condition")
1614623446356:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"), fitExpToVar="condition")
1614623547320:basename(countFiles)
1614623581727:# 這是star 2p ensemble count
1614623581728:countFiles = list.files(path="geneCounts1/", pattern="count.txt$", full.names = TRUE)
1614623583858:basename(countFiles)
1614623622646:dxd = DEXSeqDataSetFromHTSeq(
1614623622647:countFiles,
1614623622648:sampleData = sampleTable,
1614623622648:design= ~ sample + exon + condition:exon,
1614623622650:flattenedfile = flattenedFile)
1614627760002:#挑幾個基因跑，免得跑太久
1614627760024:#this:特定exon; other:相同gene上其他的exon總和
1614627760030:genes <- read.table("geneCounts1/all_ensg_list.csv",
1614627760070:stringsAsFactors=FALSE)[[1]]
1614627806497:#看counting bin details
1614627806500:#GRange:儲存genomic regions or genomic intervals data
1614627806501:#genomic range contains chr name, star, end, strand
1614627806503:#start and end are both 1-based positions relative to the 5’ end
1614627806507:#of the plus strand of the chromosome, even when the range is
1614627806516:#on the minus strand
1614627806524:#range width: end - start +1
1614627806560:# end >= start, except for empty ranges where end = star-1
1614627806564:#固定最左是start，最右是end
1614627806584:head( rowRanges(exon2), 10 )
1614627811270:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1614627811272:exon2 <- dxd[geneIDs( dxd ) %in% genes,]
1614628021807:#data內容，按this other 作 annotation
1614628021848:#前五行data,共8欄（有4個samples）
1614628021856:#前四欄the number of reads mapping to out exonic regions and
1614628021862:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1614628021874:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1614628021886:#1.按照一基因上某exon和total exon比較呈現
1614628021888:colData(exon2)
1614628024446:head(counts(exon2), 5)
1614629022490:head(counts(exon2), 5)
1614629053988:#2.按照featureIDs/exonIDs呈現
1614629053991:head( featureCounts(exon2), 5 )
1614629064308:split( seq_len(ncol(exon2)), colData(exon2)$exon2 )
1614629076200:split( seq_len(ncol(exon2)), colData(exon2)$exon )
1614629169330:#看counting bin details
1614629169337:#GRange:儲存genomic regions or genomic intervals data
1614629169339:#genomic range contains chr name, star, end, strand
1614629169340:#start and end are both 1-based positions relative to the 5’ end
1614629169341:#of the plus strand of the chromosome, even when the range is
1614629169366:#on the minus strand
1614629169377:#range width: end - start +1
1614629169442:# end >= start, except for empty ranges where end = star-1
1614629169453:#固定最左是start，最右是end
1614629169454:head( rowRanges(exon2), 10 )
1614629240849:write.csv(exon2, "DEXseq/1p-pair/a.csv", row.names = FALSE)
1614629428756:#看counting bin details
1614629428764:#GRange:儲存genomic regions or genomic intervals data
1614629428764:#genomic range contains chr name, star, end, strand
1614629428767:#start and end are both 1-based positions relative to the 5’ end
1614629428769:#of the plus strand of the chromosome, even when the range is
1614629428799:#on the minus strand
1614629428805:#range width: end - start +1
1614629428806:# end >= start, except for empty ranges where end = star-1
1614629428816:#固定最左是start，最右是end
1614629428842:head( rowRanges(exon2), 5 )
1614629442252:#2.按照featureIDs/exonIDs呈現
1614629442260:head( featureCounts(exon2), 5 )
1614630382780:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1614630382786:#gene length, 和RNA composition(極端差異或污染)影響
1614630382788:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1614630382789:Normalisation = estimateSizeFactors( exon2 )
1614630408945:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1614630408954:#gene length, 和RNA composition(極端差異或污染)影響
1614630408957:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1614630408960:Normalisation2 = estimateSizeFactors( exon2 )
1614630416913:sizeFactors(Normalisation2)
1614630416996:#每個樣本的讀段總數mapped read
1614630416997:colSums(counts(Normalisation2))
1614630417109:sizeFactors2(Normalisation2)
1614630422889:#每個樣本的讀段總數mapped read
1614630422890:colSums(counts(Normalisation2))
1614630482315:#4.3Dispersion estimation解釋了基因的變異和mean水平
1614630482316:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1614630482318:#識別組間平均表達顯著不同的基因。
1614630482319:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1614630482319:#dispersion在看是KD造成影響，還是replicate沒做好
1614630482319:Dispersion2 = estimateDispersions( Normalisation2 )
1614635438799:load("/Volumes/TOSHIBA EXT/RNAseq1/.RData")
1614635678659:plotDEXSeq( dxr1, "ENSG00000175166", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614635694602:plotDEXSeq( dxr1, "ENSG00000175166", expression=FALSE, norCounts=TRUE,
1614635694610:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614635709927:plotDEXSeq( dxr1, "ENSG00000175166", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614635768212:plotDEXSeq( dxr1, "ENSG00000176014", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614635776199:plotDEXSeq( dxr1, "ENSG00000176014", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614635798298:plotDEXSeq( dxr1, "ENSG00000176014", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1614635872656:plotDEXSeq( dxr1, "ENSG00000116560", expression=FALSE, norCounts=TRUE,
1614635872666:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615304934049:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1615304941032:library(DEXSeq,readr, magrittr)
1615304941049:# 這是star 2p ensemble count
1615304941049:countFiles = list.files(path="DEXseq-no/", pattern="count2.txt$", full.names = TRUE)
1615304941087:basename(countFiles)
1615304941089:# Loading data frame, data.frame不同欄可放入不同屬性資料
1615304941089:sampleTable = data.frame(
1615304941091:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1615304941093:condition = c("control", "knockdown", "control", "knockdown"),
1615304941095:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1615304941096:)
1615304941101:sampleTable
1615304941109:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1615304941110:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1615304941111:basename(flattenedFile)
1615304941112:dnd = DEXSeqDataSetFromHTSeq(
1615304941113:countFiles,
1615304941113:sampleData = sampleTable,
1615304941114:design= ~ sample + exon + condition:exon,
1615304941114:flattenedfile = flattenedFile)
1615304941430:genesForSubset <- read.table("geneCounts1/all_ensg_list.csv",
1615304941430:stringsAsFactors=FALSE)[[1]]
1615304941459:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615304941460:exon <- dnd[geneIDs( dnd ) %in% genesForSubset,]
1615304941462:colData(exon)
1615304941463:head(counts(exon), 5)
1615304941474:head( rowRanges(exon), 10 )
1615304941476:sampleAnnotation( exon )
1615304941478:Normalisation = estimateSizeFactors( exon )
1615304941479:Normalisation
1615304941482:sizeFactors(Normalisation)
1615304941483:#每個樣本的讀段總數mapped read
1615304941484:colSums(counts(Normalisation))
1615304941486:Dispersion = estimateDispersions( Normalisation )
1615304941487:Dispersion
1615304941488:plotDispEsts(Dispersion)
1615304941490:mcols(Dispersion)
1615304941495:#5 Testing for differential exon usage
1615304941498:deu = testForDEU( Dispersion )
1615304941499:deu
1615304941500:colData(deu)
1615304941500:#評估 relative exon usage fold changes
1615304941501:#based on the coefficients of a GLM fit that uses the formula
1615304941501:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615304941502:foldchange
1615304941503:mcols(foldchange)
1615304941504:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615304941505:dxr1 = DEXSeqResults( foldchange )
1615304941505:dxr1
1615304941506:write.csv(dxr1, "DEXseq-no/count0309.csv", row.names = FALSE)
1615304973870:flattenedFile <- list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1615304977147:basename(flattenedFile)
1615305069242:flattenedFile=list.files("./FA_GTF/", pattern=".gff$", full.names = TRUE)
1615305070399:basename(flattenedFile)
1615305128863:basename(countFiles)
1615305366621:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615305367380:basename(flattenedFile)
1615305383414:dnd = DEXSeqDataSetFromHTSeq(
1615305383422:countFiles,
1615305383423:sampleData = sampleTable,
1615305383423:design= ~ sample + exon + condition:exon,
1615305383424:flattenedfile = flattenedFile)
1615305383428:genesForSubset <- read.table("geneCounts1/all_ensg_list.csv",
1615305383430:stringsAsFactors=FALSE)[[1]]
1615305383444:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615305383445:exon <- dnd[geneIDs( dnd ) %in% genesForSubset,]
1615305383448:colData(exon)
1615305383449:head(counts(exon), 5)
1615305383450:head( rowRanges(exon), 10 )
1615305383451:sampleAnnotation( exon )
1615305383452:Normalisation = estimateSizeFactors( exon )
1615305383455:Normalisation
1615305383460:sizeFactors(Normalisation)
1615305383462:#每個樣本的讀段總數mapped read
1615305383463:colSums(counts(Normalisation))
1615305383465:Dispersion = estimateDispersions( Normalisation )
1615305383466:Dispersion
1615305383467:plotDispEsts(Dispersion)
1615305383467:mcols(Dispersion)
1615305383468:#5 Testing for differential exon usage
1615305383468:deu = testForDEU( Dispersion )
1615305383469:deu
1615305383470:colData(deu)
1615305383479:#評估 relative exon usage fold changes
1615305383480:#based on the coefficients of a GLM fit that uses the formula
1615305383480:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615305383484:foldchange
1615305383491:mcols(foldchange)
1615305383516:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615305383516:dxr1 = DEXSeqResults( foldchange )
1615305383517:dxr1
1615305383518:write.csv(dxr1, "DEXseq-no/count.csv", row.names = FALSE)
1615305383519:# dnr = DEXSeq(foldchange)
1615305383520:# class:查詢物件的類別
1615305383520:class(dnr)
1615305383522:dxr1
1615305465842:nd = DEXSeqDataSetFromHTSeq(
1615305465842:countFiles,
1615305465843:sampleData = sampleTable,
1615305465843:design= ~ sample + exon + condition:exon,
1615305465844:flattenedfile = flattenedFile)
1615305476148:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1615305477177:library(DEXSeq,readr, magrittr)
1615305486026:library(DEXSeq,readr)
1615305532030:dnd = DEXSeqDataSetFromHTSeq(
1615305532033:countFiles,
1615305532034:sampleData = sampleTable,
1615305532034:design= ~ sample + exon + condition:exon,
1615305532035:flattenedfile = flattenedFile)
1615305980122:genesForSubset <- read.table("geneCounts1/all_ensg_list.csv",
1615305980126:stringsAsFactors=FALSE)[[1]]
1615305980138:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615305980138:exon <- dnd[geneIDs( dnd ) %in% genesForSubset,]
1615305982811:colData(exon)
1615305982812:head(counts(exon), 5)
1615305982814:head( rowRanges(exon), 10 )
1615305982815:sampleAnnotation( exon )
1615305982816:Normalisation = estimateSizeFactors( exon )
1615305982817:Normalisation
1615305982818:sizeFactors(Normalisation)
1615305982819:#每個樣本的讀段總數mapped read
1615305982822:colSums(counts(Normalisation))
1615305982824:Dispersion = estimateDispersions( Normalisation )
1615305982826:Dispersion
1615305982827:plotDispEsts(Dispersion)
1615305982828:mcols(Dispersion)
1615305982829:#5 Testing for differential exon usage
1615305982829:deu = testForDEU( Dispersion )
1615305982830:deu
1615305982831:colData(deu)
1615305982831:#評估 relative exon usage fold changes
1615305982832:#based on the coefficients of a GLM fit that uses the formula
1615305982832:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615305982833:foldchange
1615305982834:mcols(foldchange)
1615305982835:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615305982836:dxr1 = DEXSeqResults( foldchange )
1615305982837:dxr1
1615305982838:write.csv(dxr1, "DEXseq-no/count.csv", row.names = FALSE)
1615308323190:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615308328491:colData(exon)
1615308328493:head(counts(exon), 5)
1615308328495:head( rowRanges(exon), 10 )
1615308328498:sampleAnnotation( exon )
1615308328501:Normalisation = estimateSizeFactors( exon )
1615308328503:Normalisation
1615308328507:sizeFactors(Normalisation)
1615308328510:#每個樣本的讀段總數mapped read
1615308328510:colSums(counts(Normalisation))
1615308328515:Dispersion = estimateDispersions( Normalisation )
1615308328540:Dispersion
1615308328541:plotDispEsts(Dispersion)
1615308328546:mcols(Dispersion)
1615308328547:#5 Testing for differential exon usage
1615308328548:deu = testForDEU( Dispersion )
1615308328559:deu
1615308328560:colData(deu)
1615308328562:#評估 relative exon usage fold changes
1615308328563:#based on the coefficients of a GLM fit that uses the formula
1615308328563:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615308328573:foldchange
1615308328574:mcols(foldchange)
1615308328578:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615308328578:dxr1 = DEXSeqResults( foldchange )
1615308328580:dxr1
1615308328581:write.csv(dxr1, "DEXseq-no/count.csv", row.names = FALSE)
1615308328605:# dnr = DEXSeq(foldchange)
1615308328606:# class:查詢物件的類別
1615308328613:class(dnr)
1615308328614:dxr1
1615308343469:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615308343470:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615308357437:genes <- read.table("geneCounts1/all_ensg_list.csv",
1615308357442:stringsAsFactors=FALSE)[[1]]
1615308574849:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1615308574856:stringsAsFactors=FALSE)[[1]]
1615308589206:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615308598534:colData(exon)
1615308598765:head(counts(exon), 5)
1615308598824:head( rowRanges(exon), 10 )
1615308599302:sampleAnnotation( exon )
1615308599822:Normalisation = estimateSizeFactors( exon )
1615308606605:Normalisation
1615308606915:sizeFactors(Normalisation)
1615308606951:#每個樣本的讀段總數mapped read
1615308606952:colSums(counts(Normalisation))
1615308607013:Dispersion = estimateDispersions( Normalisation )
1615312704074:Dispersion
1615312704305:plotDispEsts(Dispersion)
1615312816284:mcols(Dispersion)
1615312886083:#5 Testing for differential exon usage
1615312886084:deu = testForDEU( Dispersion )
1615320575252:deu
1615320575519:colData(deu)
1615320575565:#評估 relative exon usage fold changes
1615320575566:#based on the coefficients of a GLM fit that uses the formula
1615320575567:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615341980481:foldchange
1615341980712:mcols(foldchange)
1615341980841:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615341980842:dxr1 = DEXSeqResults( foldchange )
1615341996243:dxr1
1615341996554:write.csv(dxr1, "DEXseq-no/count.csv", row.names = FALSE)
1615609974268:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1615609978815:library(DEXSeq,readr)
1615609996825:# 這是star 2p ensemble count
1615609996826:countFiles = list.files(path="DEXseq-no/", pattern="count2.txt$", full.names = TRUE)
1615609996842:basename(countFiles)
1615609996844:# Loading data frame, data.frame不同欄可放入不同屬性資料
1615609996844:sampleTable = data.frame(
1615609996846:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1615609996847:condition = c("control", "knockdown", "control", "knockdown"),
1615609996847:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1615609996847:)
1615609996849:sampleTable
1615609996856:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1615609996856:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615609996858:basename(flattenedFile)
1615609996858:dnd = DEXSeqDataSetFromHTSeq(
1615609996859:countFiles,
1615609996859:sampleData = sampleTable,
1615609996859:design= ~ sample + exon + condition:exon,
1615609996860:flattenedfile = flattenedFile)
1615610173269:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1615610173274:stringsAsFactors=FALSE)[[1]]
1615610173445:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615610173445:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615610177322:colData(exon)
1615610177356:head(counts(exon), 5)
1615610177392:head( rowRanges(exon), 10 )
1615610177510:sampleAnnotation( exon )
1615610178386:Normalisation = estimateSizeFactors( exon )
1615610184653:Normalisation
1615610184956:sizeFactors(Normalisation)
1615610185007:#每個樣本的讀段總數mapped read
1615610185010:colSums(counts(Normalisation))
1615610185068:Dispersion = estimateDispersions( Normalisation )
1615617168261:Dispersion
1615617168537:plotDispEsts(Dispersion)
1615617260916:mcols(Dispersion)
1615617319550:#5 Testing for differential exon usage
1615617319552:deu = testForDEU( Dispersion )
1615617429809:deu
1615617430045:colData(deu)
1615617430057:#評估 relative exon usage fold changes
1615617430057:#based on the coefficients of a GLM fit that uses the formula
1615617430059:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615622682189:load("/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/.RData")
1615623478315:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1615623483438:table ( dxr1$padj < 0.1 )
1615623488022:plotMA(dxr1)
1615623629222:plotMA(dxr1)
1615623719242:plotDEXSeq( dxr1, "ENSG00000176014", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615627909714:plotDEXSeq( dxr1, "ENSG00000158062", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615627914060:plotDEXSeq( dxr1, "ENSG00000158062", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615627918557:plotDEXSeq( dxr1, "ENSG00000158062", expression=FALSE, norCounts=TRUE,
1615627918558:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615630476092:countFiles = list.files(path="DEXseq-pair/", pattern="count2.txt$", full.names = TRUE)
1615630476443:basename(countFiles)
1615630476625:# Loading data frame, data.frame不同欄可放入不同屬性資料
1615630476626:sampleTable = data.frame(
1615630476629:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1615630476637:condition = c("control", "knockdown", "control", "knockdown"),
1615630476642:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1615630476645:)
1615630476681:sampleTable
1615630476907:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1615630476909:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615630476961:basename(flattenedFile)
1615630476967:dnd = DEXSeqDataSetFromHTSeq(
1615630476967:countFiles,
1615630476974:sampleData = sampleTable,
1615630476978:design= ~ sample + exon + condition:exon,
1615630476981:flattenedfile = flattenedFile)
1615630955856:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1615630971632:library(DEXSeq,readr)
1615631035158:# 這是star 2p ensemble count
1615631035164:countFiles = list.files(path="DEXseq-pair/", pattern="count2.txt$", full.names = TRUE)
1615631035167:basename(countFiles)
1615631035173:# Loading data frame, data.frame不同欄可放入不同屬性資料
1615631035173:sampleTable = data.frame(
1615631035175:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1615631035175:condition = c("control", "knockdown", "control", "knockdown"),
1615631035175:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1615631035176:)
1615631035181:sampleTable
1615631035196:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1615631035197:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615631035511:basename(flattenedFile)
1615631035513:dnd = DEXSeqDataSetFromHTSeq(
1615631035514:countFiles,
1615631035515:sampleData = sampleTable,
1615631035516:design= ~ sample + exon + condition:exon,
1615631035517:flattenedfile = flattenedFile)
1615631035549:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1615631035550:stringsAsFactors=FALSE)[[1]]
1615631035947:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615631035948:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615631038389:colData(exon)
1615631038407:head(counts(exon), 5)
1615631038408:head( rowRanges(exon), 10 )
1615631038410:sampleAnnotation( exon )
1615631038417:Normalisation = estimateSizeFactors( exon )
1615631038423:Normalisation
1615631038424:sizeFactors(Normalisation)
1615631038425:#每個樣本的讀段總數mapped read
1615631038426:colSums(counts(Normalisation))
1615631038427:Dispersion = estimateDispersions( Normalisation )
1615631038428:Dispersion
1615631038429:plotDispEsts(Dispersion)
1615631038431:mcols(Dispersion)
1615631038433:#5 Testing for differential exon usage
1615631038435:deu = testForDEU( Dispersion )
1615631038437:deu
1615631038438:colData(deu)
1615631038439:#評估 relative exon usage fold changes
1615631038441:#based on the coefficients of a GLM fit that uses the formula
1615631038442:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615631038444:foldchange
1615631038446:mcols(foldchange)
1615631038447:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615631038448:dxr1 = DEXSeqResults( foldchange )
1615631038450:dxr1
1615631038451:write.csv(dxr1, "DEXseq-pair/count-pair.csv", row.names = FALSE)
1615631225867:# 這是star 2p ensemble count
1615631225880:countFiles = list.files(path="DEXseq-pair/", pattern="count2.txt$", full.names = TRUE)
1615631227130:basename(countFiles)
1615631318593:# 這是star 2p ensemble count
1615631318594:countFiles = list.files(path="./2p-star-ensembl/DEXseq-pair/", pattern="count2.txt$", full.names = TRUE)
1615631319387:basename(countFiles)
1615631334767:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615631334804:basename(flattenedFile)
1615631334807:dnd = DEXSeqDataSetFromHTSeq(
1615631334808:countFiles,
1615631334811:sampleData = sampleTable,
1615631334811:design= ~ sample + exon + condition:exon,
1615631334821:flattenedfile = flattenedFile)
1615631468056:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1615631468062:stringsAsFactors=FALSE)[[1]]
1615631468444:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615631468448:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615631472196:colData(exon)
1615631472213:head(counts(exon), 5)
1615631472246:head( rowRanges(exon), 10 )
1615631472344:sampleAnnotation( exon )
1615631472739:Normalisation = estimateSizeFactors( exon )
1615631478400:Normalisation
1615631478686:sizeFactors(Normalisation)
1615631478725:#每個樣本的讀段總數mapped read
1615631478725:colSums(counts(Normalisation))
1615631478786:Dispersion = estimateDispersions( Normalisation )
1615631921586:Dispersion
1615631921802:plotDispEsts(Dispersion)
1615631954390:mcols(Dispersion)
1615631966539:#5 Testing for differential exon usage
1615631966541:deu = testForDEU( Dispersion )
1615632006288:deu
1615632006494:colData(deu)
1615632006501:#評估 relative exon usage fold changes
1615632006503:#based on the coefficients of a GLM fit that uses the formula
1615632006504:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615637150241:foldchange
1615637150472:mcols(foldchange)
1615637150606:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615637150609:dxr1 = DEXSeqResults( foldchange )
1615637159950:dxr1
1615637160284:write.csv(dxr1, "DEXseq-pair/count-pair.csv", row.names = FALSE)
1615637164128:# dnr = DEXSeq(foldchange)
1615637164131:# class:查詢物件的類別
1615637164132:class(dnr)
1615637164134:dxr1
1615637279453:write.csv(dxr1, "2p-star-ensembl/DEXseq-pair/count-pair.csv", row.names = FALSE)
1615637328579:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1615637330215:table ( dxr1$padj < 0.1 )
1615637333692:plotMA(dxr1)
1615637355785:plotMA(dxr1)
1615639803968:View(foldchange)
1615640066367:plotDEXSeq( dxr1, "ENSG00000000419", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615640079872:plotDEXSeq( dxr1, "ENSG00000000419", expression=FALSE, norCounts=TRUE,
1615640079873:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615648114127:plotDEXSeq( dxr1, "ENSG00000000419", expression=FALSE, norCounts=TRUE,
1615648114182:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615648145284:plotDEXSeq( dxr1, "ENSG00000000419", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615648153576:plotDEXSeq( dxr1, "ENSG00000000419", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615648451623:countFile = list.files(path="2p-star-ensembl/DEXseq-no/", pattern="count2.txt$", full.names = TRUE)
1615648451627:basename(countFile)
1615648451653:# Loading data frame, data.frame不同欄可放入不同屬性資料
1615648451653:sampleTables = data.frame(
1615648451654:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1615648451654:condition = c("control", "knockdown", "control", "knockdown"),
1615648451655:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1615648451655:)
1615648451665:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1615648451666:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615648451666:basename(flattenedFile)
1615648451667:dxd = DEXSeqDataSetFromHTSeq(
1615648451670:countFile,
1615648451670:sampleData = sampleTables,
1615648451671:design= ~ sample + exon + condition:exon,
1615648451671:flattenedfile = flattenedFile)
1615648679246:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1615648679251:stringsAsFactors=FALSE)[[1]]
1615648679415:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615648679415:exons <- dxd[geneIDs( dxd ) %in% genes,]
1615648684195:colData(exons)
1615648684247:head(counts(exons), 5)
1615648684307:head( rowRanges(exons), 10 )
1615648684547:sampleAnnotation( exons )
1615648686990:Normalisations = estimateSizeFactors( exons )
1615648693879:sizeFactors(Normalisations)
1615648693915:#每個樣本的讀段總數mapped read
1615648693916:colSums(counts(Normalisations))
1615648693974:Dispersions = estimateDispersions( Normalisations )
1615651115293:plotDispEsts(Dispersions)
1615651116592:mcols(Dispersions)
1615651116701:#5 Testing for differential exon usage
1615651116704:dex = testForDEU( Dispersions )
1615651261831:colData(dex)
1615651261899:#評估 relative exon usage fold changes
1615651261907:#based on the coefficients of a GLM fit that uses the formula
1615651261934:foldchanges = estimateExonFoldChanges( dex, fitExpToVar="condition")
1615658794076:mcols(foldchanges)
1615658794253:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615658794255:dxr2 = DEXSeqResults( foldchanges )
1615666405433:table ( tapply( dxr2$padj < 0.1, dxr2$groupID, any ) )
1615666409186:table ( dxr2$padj < 0.1 )
1615666511798:plotDEXSeq( dxr2, "ENSG00000176014", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615666545230:dnr.sig <- as.data.frame(dnr[dnr$padj < 0.1 & !is.na(dnr$padj),])
1615666560665:dnr.sig <- as.data.frame(dxr1[dxr1$padj < 0.1 & !is.na(dnr$padj),])
1615666566459:dnr.sig <- as.data.frame(dxr1[dxr1$padj < 0.1 & !is.na(dxr1$padj),])
1615666578690:drn.sig
1615666584354:dnr.sig
1615666776896:write.csv(dnr.sig, "2p-star-ensembl/DEXseq-pair/sig-pair.csv", row.names = FALSE)
1615666904176:dnr.sig <- as.data.frame(dxr1[dxr1$padj < 0.1 & !is.na(dxr1$padj)])
1615666908125:dnr.sig
1615666912431:write.csv(dnr.sig, "2p-star-ensembl/DEXseq-pair/sig-pair.csv", row.names = FALSE)
1615666960213:dnr.sig <- as.data.frame(dxr1[dxr1$padj < 0.1 & !is.na,(dxr1$padj)])
1615666969321:dnr.sig <- as.data.frame(dxr1[dxr1$padj < 0.1 & !,is.na(dxr1$padj)])
1615667309719:plotDEXSeq( dxr1, "ENSG00000000419", expression=TRUE, norCounts=TRUE,
1615667309725:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667347239:plotDEXSeq( dxr1, "ENSG00000000419", expression=FALSE, norCounts=TRUE,
1615667347242:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667435144:#expression=FALSE只會出現normalized counts
1615667435146:plotDEXSeq( dxr1, "ENSG00000000419", expression=TRUE, norCounts=TRUE,
1615667435146:legend=FALSE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667525272:#expression=FALSE只會出現normalized counts
1615667525273:plotDEXSeq( dxr1, "ENSG00000000419", expression=TRUE, norCounts=FALSE,
1615667525273:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667586205:plotDEXSeq( dxr1, "ENSG00000000419", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667596948:plotDEXSeq( dxr1, "ENSG00000000419", displayTranscripts=FALSE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667692113:#expression=FALSE只會出現normalized counts
1615667692114:#norCounts=FALSE不會顯示normalized counts
1615667692115:plotDEXSeq( dxr1, "ENSG00000000419", expression=TRUE, norCounts=FALSE,displayTranscripts=TRUE,
1615667692121:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667702347:#expression=FALSE只會出現normalized counts
1615667702350:#norCounts=FALSE不會顯示normalized counts
1615667702352:plotDEXSeq( dxr1, "ENSG00000000419", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,
1615667702354:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667775721:plotDEXSeq( dxr1, "ENSG00000116560", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,
1615667775726:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667814296:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,
1615667814307:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615667873075:plotDEXSeq( dxr2, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,
1615667873078:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669121901:#expression=FALSE只會出現normalized counts
1615669121909:#norCounts=FALSE不會顯示normalized counts
1615669121910:plotDEXSeq( dxr1, "ENSG00000000419", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=T
1615669121963:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669134487:#expression=FALSE只會出現normalized counts
1615669134487:plotDEXSeq( dxr2, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=T
1615669134489:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669140815:#expression=FALSE只會出現normalized counts
1615669140821:plotDEXSeq( dxr2, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1615669140821:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669162434:#expression=FALSE只會出現normalized counts
1615669162435:#norCounts=FALSE不會顯示normalized counts
1615669162437:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1615669162439:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669244227:#expression=FALSE只會出現normalized counts
1615669244228:plotDEXSeq( dxr2, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,
1615669244228:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669316141:#expression=FALSE只會出現normalized counts
1615669316141:plotDEXSeq( dxr2, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,averageOutExpression=TRUE,
1615669316142:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669346081:#expression=FALSE只會出現normalized counts
1615669346082:plotDEXSeq( dxr2, "ENSG00000000457", expression=TRUE, norCounts=TRUE,averageOutExpression=TRUE,
1615669346083:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615669371347:#expression=FALSE只會出現normalized counts
1615669371355:warnings(plotDEXSeq( dxr2, "ENSG00000000457", expression=TRUE, norCounts=TRUE,averageOutExpression=TRUE,
1615669371355:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 ))
1615696548985:# 這是star 2p ensemble count
1615696548986:countFiles = list.files(path="./2p-star-ensembl/no-strand/", pattern="count3.txt$", full.names = TRUE)
1615696550909:basename(countFiles)
1615696559692:dnd = DEXSeqDataSetFromHTSeq(
1615696559693:countFiles,
1615696559693:sampleData = sampleTable,
1615696559694:design= ~ sample + exon + condition:exon,
1615696559694:flattenedfile = flattenedFile)
1615696563332:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1615696563341:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1615696566922:library(DEXSeq,readr)
1615696584522:dnd = DEXSeqDataSetFromHTSeq(
1615696584523:countFiles,
1615696584523:sampleData = sampleTable,
1615696584524:design= ~ sample + exon + condition:exon,
1615696584524:flattenedfile = flattenedFile)
1615696600235:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615696600245:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615696602317:# Loading data frame, data.frame不同欄可放入不同屬性資料
1615696602318:sampleTable = data.frame(
1615696602318:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1615696602318:condition = c("control", "knockdown", "control", "knockdown"),
1615696602321:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1615696602321:)
1615696603131:sampleTable
1615696603824:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615696605376:basename(flattenedFile)
1615696605958:dnd = DEXSeqDataSetFromHTSeq(
1615696605959:countFiles,
1615696605959:sampleData = sampleTable,
1615696605960:design= ~ sample + exon + condition:exon,
1615696605960:flattenedfile = flattenedFile)
1615696710990:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1615696710996:stringsAsFactors=FALSE)[[1]]
1615696711145:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615696711146:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615696718635:colData(exon)
1615696718685:head(counts(exon), 5)
1615696718730:head( rowRanges(exon), 10 )
1615696718852:sampleAnnotation( exon )
1615696719448:Normalisation = estimateSizeFactors( exon )
1615696725407:Normalisation
1615696725652:sizeFactors(Normalisation)
1615696725690:#每個樣本的讀段總數mapped read
1615696725691:colSums(counts(Normalisation))
1615696725762:Dispersion = estimateDispersions( Normalisation )
1615698922919:Dispersion
1615698923160:plotDispEsts(Dispersion)
1615699038508:mcols(Dispersion)
1615699096540:#5 Testing for differential exon usage
1615699096541:deu = testForDEU( Dispersion )
1615699223358:deu
1615699223613:colData(deu)
1615699223621:#評估 relative exon usage fold changes
1615699223637:#based on the coefficients of a GLM fit that uses the formula
1615699223638:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615701867807:foldchange
1615701867820:mcols(foldchange)
1615701867828:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615701867828:dxr1 = DEXSeqResults( foldchange )
1615701867830:dxr1
1615701867833:write.csv(dxr1, "2p-star-ensembl/no-strand/no-strand.csv", row.names = FALSE)
1615701867845:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1615701867849:table ( dxr1$padj < 0.1 )
1615701867850:View(sampleTable)
1615701868035:#評估 relative exon usage fold changes
1615701868035:#based on the coefficients of a GLM fit that uses the formula
1615701868036:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615701902725:#評估 relative exon usage fold changes
1615701902726:#based on the coefficients of a GLM fit that uses the formula
1615701902727:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615703654301:#評估 relative exon usage fold changes
1615703654311:#based on the coefficients of a GLM fit that uses the formula
1615703654312:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615708892717:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615708892725:dxr1 = DEXSeqResults( foldchange )
1615708913214:write.csv(dxr1, "2p-star-ensembl/no-strand/no-strand.csv", row.names = FALSE)
1615709234280:plotDispEsts(Dispersion)
1615709319230:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1615709370778:table ( dxr1$padj < 0.1 )
1615709370871:plotMA(dxr1)
1615709376102:#legend=TRUE會有顯示control和KD的圖標
1615709376105:plotDEXSeq( dxr1, "ENSG00000000419", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615711138676:#legend=TRUE會有顯示control和KD的圖標
1615711138684:plotDEXSeq( dxr1$padj < 0.1, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615711351903:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1615711365830:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1615711365831:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1615711369492:library(DEXSeq,readr)
1615711389383:# 這是star 2p ensemble count
1615711389391:countFiles = list.files(path="./2p-star-ensembl/no-strand/", pattern="count3.txt$", full.names = TRUE)
1615711389392:basename(countFiles)
1615711389395:# Loading data frame, data.frame不同欄可放入不同屬性資料
1615711389396:sampleTable = data.frame(
1615711389396:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1615711389397:condition = c("control", "knockdown", "control", "knockdown"),
1615711389397:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1615711389398:)
1615711389401:sampleTable
1615711389407:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1615711389408:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1615711389408:basename(flattenedFile)
1615711389409:dnd = DEXSeqDataSetFromHTSeq(
1615711389409:countFiles,
1615711389410:sampleData = sampleTable,
1615711389410:design= ~ sample + exon + condition:exon,
1615711389410:flattenedfile = flattenedFile)
1615711513527:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1615711513530:stringsAsFactors=FALSE)[[1]]
1615711514197:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1615711514198:exon <- dnd[geneIDs( dnd ) %in% genes,]
1615711523516:colData(exon)
1615711523562:head(counts(exon), 5)
1615711523634:head( rowRanges(exon), 10 )
1615711523931:sampleAnnotation( exon )
1615711524739:Normalisation = estimateSizeFactors( exon )
1615711532960:Normalisation
1615711533231:sizeFactors(Normalisation)
1615711533265:#每個樣本的讀段總數mapped read
1615711533266:colSums(counts(Normalisation))
1615711533323:Dispersion = estimateDispersions( Normalisation )
1615713838804:Dispersion
1615713839268:plotDispEsts(Dispersion)
1615713937730:mcols(Dispersion)
1615714160198:#5 Testing for differential exon usage
1615714160202:deu = testForDEU( Dispersion )
1615714308836:deu
1615714309131:colData(deu)
1615714309153:#評估 relative exon usage fold changes
1615714309154:#based on the coefficients of a GLM fit that uses the formula
1615714309155:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1615715596387:foldchange
1615715596422:mcols(foldchange)
1615715596425:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615715596426:dxr1 = DEXSeqResults( foldchange )
1615715596428:dxr1
1615715596428:write.csv(Dispersion, "2p-star-ensembl/no-strand/Dispersion.csv", row.names = FALSE)
1615715596438:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615715596438:dxr1 = DEXSeqResults( foldchange )
1615715596439:table ( tapply( dxr1$padj < 0.1,  dxr1$log2fold_knockdown_control, dxr1$groupID, any ) )
1615715596444:table ( dxr1$padj < 0.1 )
1615715596446:plotMA(dxr1)
1615722236729:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615722236731:dxr1 = DEXSeqResults( foldchange )
1615722263925:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1615722264449:table ( dxr1$padj < 0.1 )
1615722270549:plotMA(dxr1)
1615722281628:plotDEXSeq( dxr1, "ENSG00000176014", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615722302103:plotDEXSeq( dxr1, "ENSG00000176014", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615722302558:plotDEXSeq( dxr1, "ENSG00000116560", expression=FALSE, norCounts=TRUE,
1615722302559:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615724947687:plotDEXSeq( dxr1, "ENSG00000176014", expression=FALSE, norCounts=TRUE,
1615724947702:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615724967508:plotDEXSeq( dxr1, "ENSG00000176014", expression=TRUE, norCounts=TRUE,
1615724967509:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615728158292:table ( tapply( dxr1$padj < 0.1,dxr1$log2fold_knockdown_control, dxr1$groupID, any ) )
1615728465125:table ( dxr1$padj < 0.1, dxr1$log2fold_knockdown_control )
1615728586142:table ( dxr1$padj < 0.1, dxr1$log2fold_knockdown_control < abs(2) )
1615728622418:table ( dxr1$padj < 0.1 )
1615737005166:plotDEXSeq( dxr1, "ENSG00000004455", expression=TRUE, norCounts=TRUE,
1615737005176:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615737347049:plotDEXSeq( dxr1, "ENSG00000082898", expression=TRUE, norCounts=TRUE,
1615737347059:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615737463727:table ( tapply( dxr1$padj < 0.05, dxr1$groupID, any ) )
1615737487730:table ( dxr1$padj < 0.05 )
1615737487929:#abs()絕對值
1615737487931:table ( dxr1$padj < 0.05, dxr1$log2fold_knockdown_control < abs(2) )
1615737619385:table ( dxr1$pvalue < 0.05 )
1615737844569:help(table ( dxr1$padj < 0.1 ))
1615737865807:help( dxr1$padj < 0.1 )
1615737882968:?( dxr1$padj < 0.1 )
1615738207689:#write a normalized counts table with exon values.
1615738207690:nc = counts(dxr1, normalized=TRUE)
1615738243711:...
1615738288202:write.table(nc, "2p-star-ensembl/no-strand/no-strand.csv", sep="\t", col.names=NA, row.names=TRUE, quote=FALSE)
1615738301073:write.table(nc, "2p-star-ensembl/no-strand/nc.csv", sep="\t", col.names=NA, row.names=TRUE, quote=FALSE)
1615740876056:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615740876063:dxr1 = DEXSeqResults( foldchange, padj<=0.1 )
1615740887633:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1615740887635:dxr2 = DEXSeqResults( foldchange, padj<=0.1 )
1615741045565:#這裡把第一行弄成表格
1615741045566:a <- as.data.frame(dxr1[dxr1$padj < 0.1 & !is.na(dxr1$padj),])
1615741053370:a
1615741106284:write.csv(a, "no-strand/a.csv", row.names = FALSE)
1615743386403:a.genes <- a %>%
1615743386477:select(groupID, featureID) %>%
1615743386489:group_by(groupID) %>%
1615743386490:mutate(featureID_by_groupID = paste(featureID, collapse = ",")) %>%
1615743386501:select(-featureID) %>%
1615743386505:unique()
1615743401331:library(dplyr)
1615743428428:a.genes <- a %>%
1615743428429:select(groupID, featureID) %>%
1615743428430:group_by(groupID) %>%
1615743428435:mutate(featureID_by_groupID = paste(featureID, collapse = ",")) %>%
1615743428439:select(-featureID) %>%
1615743428449:unique()
1615743480326:a.genes
1615743593739:write.csv(a.genes, "no-strand/a.csv", row.names = FALSE)
1615743619097:write.csv(a, "no-strand/a.csv", row.names = FALSE)
1615743622083:write.csv(a.genes, "no-strand/a.genes.csv", row.names = FALSE)
1615749194591:#expression=FALSE只會出現normalized counts
1615749194602:#norCounts=FALSE不會顯示normalized counts
1615749194605:plotDEXSeq( dxr1, "ENSG00000067596", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1615749194697:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615758664812:#expression=FALSE只會出現normalized counts
1615758665087:#norCounts=FALSE不會顯示normalized counts
1615758665114:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1615758665417:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615760132168:#expression=FALSE只會出現normalized counts
1615760132177:#norCounts=FALSE不會顯示normalized counts
1615760132179:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,splicing=TRUE,
1615760132217:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615760572854:#expression=FALSE只會出現normalized counts
1615760572858:#norCounts=FALSE不會顯示normalized counts
1615760572859:# splicing=TRUE is exon usage
1615760572859:plotDEXSeq( dxr1, "ENSG00000012061", expression=TRUE, norCounts=TRUE,splicing=TRUE,
1615760572869:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615760616613:#expression=FALSE只會出現normalized counts
1615760616617:#norCounts=FALSE不會顯示normalized counts
1615760616618:# splicing=TRUE is exon usage
1615760616619:plotDEXSeq( dxr1, "ENSG00000012061", expression=TRUE, ,splicing=TRUE,
1615760616624:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615761177682:DEXSeqHTML( dxr, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1615761195812:DEXSeqHTML( dxr2, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1615761206008:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1615761921868:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80") )
1615761960454:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80") )
1615762084058:warnings(DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80") ))
1615762694677:warnings(DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80") )
1615762699663:)
1615762727421:warnings(DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80") ))
1615763158804:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1615763336813:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80") )
1615764009596:#expression=FALSE只會出現normalized counts
1615764009621:#norCounts=FALSE不會顯示normalized counts
1615764009624:# splicing=TRUE is exon usage
1615764009626:plotDEXSeq( dxr1, "ENSG00000012061", expression=TRUE, ,splicing=TRUE,
1615764009641:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615765836237:DEXSeqHTML( dxr1, FDR=0.1,path="html", file="testForDEU.html",
1615765836297:fitExpToVar="condition", color=c("#FF000080", "#0000FF80") )
1615767783427:#expression=FALSE只會出現normalized counts
1615767783445:#norCounts=FALSE不會顯示normalized counts
1615767783454:# splicing=TRUE is exon usage
1615767783454:plotDEXSeq( dxr1, "ENSG00000012061", expression=TRUE, ,splicing=TRUE,
1615767783525:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615767977255:#expression=FALSE只會出現normalized counts
1615767977268:#norCounts=FALSE不會顯示normalized counts
1615767977277:# splicing=TRUE is exon usage
1615767977286:plotDEXSeq( dxr1, "ENSG00000116560", expression=TRUE, ,splicing=TRUE,
1615767977321:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615768267922:#expression=FALSE只會出現normalized counts
1615768267933:#norCounts=FALSE不會顯示normalized counts
1615768267939:# splicing=TRUE is exon usage
1615768267943:plotDEXSeq( dxr1, "ENSG00000135829", expression=TRUE, ,splicing=TRUE,
1615768267956:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615769391665:#expression=FALSE只會出現normalized counts
1615769391679:#norCounts=FALSE不會顯示normalized counts
1615769391681:# splicing=TRUE is exon usage
1615769391686:plotDEXSeq( dxr1, "ENSG00000187741", expression=TRUE, ,splicing=TRUE,
1615769391745:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615773091867:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1615773091875:plotDEXSeq( dxr1, "ENSG00000187741", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615773139914:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1615773139917:plotDEXSeq( dxr1, "ENSG00000116560", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615773146379:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1615773146379:plotDEXSeq( dxr1, "ENSG00000116560", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615773153404:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1615773153405:plotDEXSeq( dxr1, "ENSG00000116560", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1615907025917:install.packages("gprofiler2")
1615907277377:library(gprofiler2)
1615907278849:gostres <- gost(query = c("X:1000:1000000", "rs17396340", "GO:0005005", "ENSG00000156103", "NLRP1"),
1615907278849:organism = "hsapiens")
1615907282666:# The result is a named list where “result” is a data.frame with the enrichment analysis results
1615907282674:# and “meta” containing a named list with all the metadata for the query.
1615907282675:head(gostres$result)
1615907345374:p <- gostplot(gostres, capped = FALSE, interactive = FALSE)
1615907345494:p
1615907431299:gconvert(query = c("REAC:R-HSA-3928664", "rs17396340", "NLRP1"), organism = "hsapiens",
1615907431308:target="ENSG", mthreshold = Inf, filter_na = TRUE)
1615920346381:gconvert(query = c("NR_024540.1", "rs17396340", "NLRP1"), organism = "hsapiens",
1615920346424:+          target="ENSG", mthreshold = Inf, filter_na = TRUE)
1616770821554:pacman::p_load(rtracklayer,rio,pheatmap,Hmisc,dplyr,ggplot2)
1616770837036:library(DEXSeq)
1616770846217:#DEXSeq is designed to find changes in relative exon usage
1616770846219:#i.e., changes in the expression of individual exons that
1616770846220:#are not simply the consequence of overall
1616770846220:#up- or down-regulation of the gene.
1616770846221:#read:讀一鹼基片段，很多read根據序列重複數量接成一個counting bin
1616770846222:#理論上同一chr上的read結合拼出一個counting bin，但實際上做不到
1616770846223:#所以事實上是根據由已知的library
1616770846223:#read count數值越高，說明該RNA豐度越高
1616770846225:## Loading files
1616770846226:countFiles = list.files("DEXseq/1p-pair/", pattern="count.txt$", full.names = TRUE)
1616770846227:basename(countFiles)
1616770846229:# Loading data frame, data.frame不同欄可放入不同屬性資料
1616770846230:sampleTable = data.frame(
1616770846232:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1616770846233:condition = c("control", "knockdown", "control", "knockdown"),
1616770846233:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1616770846234:)
1616770846239:sampleTable
1616770846246:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1616770846247:#export(sampleTable, "DEXseq/sampleTable.csv", format = "csv")
1616770846248:flattenedFile <- list.files("./FA_GTF/", pattern="Seq.gff$", full.names = TRUE)
1616770846249:basename(flattenedFile)
1616770846250:dxd = DEXSeqDataSetFromHTSeq(
1616770846251:countFiles,
1616770846252:sampleData = sampleTable,
1616770846253:design= ~ sample + exon + condition:exon,
1616770846255:flattenedfile = flattenedFile)
1616770846268:#converting counts to integer mode
1616770846269:#Warning message:
1616770846269:#  In DESeqDataSet(rse, design, ignoreRank = TRUE) :
1616770846270:#  some variables in design formula are characters, converting to factors
1616770846270:#挑幾個基因跑，免得跑太久
1616770846271:#this:特定exon; other:相同gene上其他的exon總和
1616770846272:genesForSubset = read.table(
1616770846274:file.path("DEXSeq_Result", pattern="DEXSeq_Result/TMEM231.txt" ),
1616770846275:stringsAsFactors=FALSE)[[1]]
1616770848025:# %in% 判斷是否在某個集合內
1616770848034:gene = dxd[geneIDs( dxd ) %in% genesForSubset,]
1616770848035:#data內容，按this other 作 annotation
1616770848035:#前五行data,共8欄（有4個samples）
1616770848036:#前四欄the number of reads mapping to out exonic regions and
1616770848036:#後四欄the sum of the counts mapping to the rest of the exons from the same gene
1616770848037:#gene IDs:counting bin number呈現結果的方式又叫feature ID or exon ID
1616770848037:#1.按照一基因上某exon和total exon比較呈現
1616770848038:colData(gene)
1616770848040:head(counts(gene),5)
1616770848042:#2.按照KD treatment呈現
1616770848042:head( featureCounts(gene), 5 )
1616770848044:split( seq_len(ncol(gene)), colData(gene)$exon )
1616770848046:#看counting bin details
1616770848047:#GRange:儲存genomic regions or genomic intervals data
1616770848047:#genomic range contains chr name, star, end, strand
1616770848048:#start and end are both 1-based positions relative to the 5’ end
1616770848049:#of the plus strand of the chromosome, even when the range is
1616770848050:#on the minus strand
1616770848051:#range width: end - start +1
1616770848051:# end >= start, except for empty ranges where end = star-1
1616770848052:#固定最左是start，最右是end
1616770848053:head( rowRanges(gene), 10 )
1616770848054:sampleAnnotation( gene )
1616770848056:#4.2 先Normalisation以便在樣本之間進行平等的基因比較,去除sequence depth,
1616770848056:#gene length, 和RNA composition(極端差異或污染)影響
1616770848057:#差異表達分析的第一步是估計大小因子(estimateSizeFactors生成)
1616770848058:Normalisation = estimateSizeFactors( gene )
1616770848059:Normalisation
1616770848060:sizeFactors(Normalisation)
1616770848062:#每個樣本的讀段總數mapped read
1616770848063:colSums(counts(Normalisation))
1616770848065:#除許多其他因素（“不感興趣”部分）外，每個基因的映射讀段計數(counts of
1616770848066:#mapped reads)是RNA表達（“感興趣”部分）的結果。Normalization是調整原始計數
1616770848067:#值以解決“不感興趣”因素的過程。這樣，表達水平在樣品之間和/或之內更加可比
1616770848068:#分布圖評估資料可性度，區分technical and biological variation(noise)
1616770848068:#RNA seq biological replicate太少，用exon數分布比較
1616770848069:#4.3Dispersion estimation解釋了基因的變異和mean水平
1616770848069:#1.為了確定差異表達基因，考慮到組內(重複樣本之間)的差異，我們需要
1616770848070:#識別組間平均表達顯著不同的基因。
1616770848071:#2.組內(重複樣本之間)的變異需要考慮到變異數隨mean增加的事實
1616770848074:Dispersion = estimateDispersions( Normalisation )
1616770848076:Dispersion
1616770848078:plotDispEsts(Dispersion)
1616770848082:mcols(Dispersion)
1616770848083:#5 Testing for differential exon usage
1616770848084:deu = testForDEU( Dispersion )
1616770848086:deu
1616770848088:colData(deu)
1616770848090:#評估 relative exon usage fold changes
1616770848091:#based on the coefficients of a GLM fit that uses the formula
1616770848091:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1616770848094:foldchange
1616770848095:mcols(foldchange)
1616770848096:#不要顯示中間步驟的value，用DEXSeqResults
1616770848097:dxr1 = DEXSeqResults( foldchange )
1616770848099:dxr1
1616770848100:mcols(dxr1)$description
1616770848102:#From this object, we can ask how many exonic regions are significant
1616770848102:#with a false discovery rate of 10%
1616770848104:table ( dxr1$padj < 0.1 )
1616770848109:#We may also ask how many genes are affected
1616770848109:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1616770848111:#cex是點,字體大小
1616770848112:#MA plot: X軸（一般是log10對數軸）是基因在兩個樣本中的豐度平均值
1616770848113:#(比如某個基因的FPKM在兩個樣本中分別是100和200，那麼這個基因的平均豐度就
1616770848114:#是150），Y軸是表達差異倍數取個log2
1616770848114:plotMA( dxr1, cex=1)
1616770848116:#sampleAnnotation(dxd)
1616770848116:#formulaFullModel    =  ~ sample + exon + libType:exon + condition:exon
1616770848117:#formulaReducedModel =  ~ sample + exon + libType:exon
1616770848117:#s = estimateDispersions( dxd, formula = formulaFullModel )
1616770848117:#s.deu = testForDEU( Dispersion,
1616770848118:#                  reducedModel = formulaReducedModel,
1616770848118:#                  fullModel = formulaFullModel )
1616770848119:#plotDispEsts( dxd )
1616770848119:plotDEXSeq( dxr1, "ENSG00000197299", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616770848123:#看單一transcript
1616770848124:plotDEXSeq( dxr1, "ENSG00000140464", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616770848126:#look at the count values from the individual samples
1616770848126:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, norCounts=TRUE,
1616770848127:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616770848128:#remove overall changes in expression from the plots
1616770848129:#to see changes in the expression of individual exons
1616770848129:plotDEXSeq( dxr1, "ENSG00000140464", expression=FALSE, splicing=TRUE,
1616770848130:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616770848131:#這裡應該要標出有顯著差異的exon,但FM no significant
1616770848132:DEXSeqHTML( dxr1, FDR=0.05)
1616770932893:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1616770932895:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1616770932899:library(DEXSeq,readr)
1616770932901:# 這是star 2p ensemble count
1616770932902:countFiles = list.files(path="./2p-star-ensembl/DEXseq-pair/", pattern="count2.txt$", full.names = TRUE)
1616770933118:basename(countFiles)
1616770933120:# Loading data frame, data.frame不同欄可放入不同屬性資料
1616770933120:sampleTable = data.frame(
1616770933121:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1616770933122:condition = c("control", "knockdown", "control", "knockdown"),
1616770933122:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1616770933123:)
1616770933127:sampleTable
1616770933132:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1616770933133:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1616770933325:basename(flattenedFile)
1616770933327:dnd = DEXSeqDataSetFromHTSeq(
1616770933328:countFiles,
1616770933328:sampleData = sampleTable,
1616770933329:design= ~ sample + exon + condition:exon,
1616770933329:flattenedfile = flattenedFile)
1616770933332:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1616770933332:stringsAsFactors=FALSE)[[1]]
1616770933967:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1616770933975:exon <- dnd[geneIDs( dnd ) %in% genes,]
1616770933976:colData(exon)
1616770933980:head(counts(exon), 5)
1616770933982:head( rowRanges(exon), 10 )
1616770933983:sampleAnnotation( exon )
1616770933986:Normalisation = estimateSizeFactors( exon )
1616770933988:Normalisation
1616770933989:sizeFactors(Normalisation)
1616770933990:#每個樣本的讀段總數mapped read
1616770933990:colSums(counts(Normalisation))
1616770933992:Dispersion = estimateDispersions( Normalisation )
1616770933995:Dispersion
1616770933996:plotDispEsts(Dispersion)
1616770933997:mcols(Dispersion)
1616770933998:#5 Testing for differential exon usage
1616770933999:deu = testForDEU( Dispersion )
1616770934000:deu
1616770934001:colData(deu)
1616770934003:#評估 relative exon usage fold changes
1616770934003:#based on the coefficients of a GLM fit that uses the formula
1616770934004:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1616770934005:foldchange
1616770934006:mcols(foldchange)
1616770934009:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1616770934010:dxr1 = DEXSeqResults( foldchange )
1616770934012:dxr1
1616770934013:write.csv(dxr1, "2p-star-ensembl/DEXseq-pair/count-pair.csv", row.names = FALSE)
1616770934022:# dnr = DEXSeq(foldchange)
1616770934024:# class:查詢物件的類別
1616770934026:class(dnr)
1616770934027:dxr1
1616770934028:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1616770934030:table ( dxr1$padj < 0.1 )
1616770934031:plotMA(dxr1)
1616770934032:#legend=TRUE會有顯示control和KD的圖標
1616770934033:plotDEXSeq( dxr1, "ENSG00000000419", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616770934035:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1616770934036:plotDEXSeq( dxr1, "ENSG00000000419", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616770934037:#expression=FALSE只會出現normalized counts
1616770934037:#norCounts=FALSE不會顯示normalized counts
1616770934038:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1616770934038:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616770934040:DEXSeqHTML( dxr1, FDR=0.05)
1616770985610:dnd = DEXSeqDataSetFromHTSeq(
1616770985611:countFiles,
1616770985612:sampleData = sampleTable,
1616770985612:design= ~ sample + exon + condition:exon,
1616770985612:flattenedfile = flattenedFile)
1616771017558:dnd = DEXSeqDataSetFromHTSeq(
1616771017559:countFiles,
1616771017560:sampleData = sampleTable,
1616771017560:design= ~ sample + exon + condition:exon,
1616771017561:flattenedfile = flattenedFile)
1616771068463:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1616771068464:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1616771068466:library(DEXSeq,readr)
1616771068467:# 這是star 2p ensemble count
1616771068468:countFiles = list.files(path="./2p-star-ensembl/DEXseq-pair/", pattern="count2.txt$", full.names = TRUE)
1616771068468:basename(countFiles)
1616771068469:# Loading data frame, data.frame不同欄可放入不同屬性資料
1616771068470:sampleTable = data.frame(
1616771068470:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1616771068471:condition = c("control", "knockdown", "control", "knockdown"),
1616771068471:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1616771068472:)
1616771068474:sampleTable
1616771068478:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1616771068478:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1616771068551:basename(flattenedFile)
1616771068552:dnd = DEXSeqDataSetFromHTSeq(
1616771068552:countFiles,
1616771068553:sampleData = sampleTable,
1616771068553:design= ~ sample + exon + condition:exon,
1616771068554:flattenedfile = flattenedFile)
1616771083330:# 這是star 2p ensemble count
1616771083338:countFiles = list.files(path="/2p-star-ensembl/DEXseq-pair/", pattern="count2.txt$", full.names = TRUE)
1616771085302:basename(countFiles)
1616771197575:# 這是star 2p ensemble count
1616771197577:inDir system.file()
1616771351009:# 這是star 2p ensemble count
1616771351011:inDir = system.file(package = "DEXseq-pair")
1616771454434:# 這是star 2p ensemble count
1616771454436:countFiles = list.files( pattern="count2.txt$", full.names = TRUE)
1616771456423:basename(countFiles)
1616771474790:dnd = DEXSeqDataSetFromHTSeq(
1616771474799:countFiles,
1616771474799:sampleData = sampleTable,
1616771474800:design= ~ sample + exon + condition:exon,
1616771474800:flattenedfile = flattenedFile)
1616771576389:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1616771576399:stringsAsFactors=FALSE)[[1]]
1616771576776:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1616771576777:exon <- dnd[geneIDs( dnd ) %in% genes,]
1616771580309:colData(exon)
1616771580328:head(counts(exon), 5)
1616771580381:head( rowRanges(exon), 10 )
1616771580491:sampleAnnotation( exon )
1616771580928:Normalisation = estimateSizeFactors( exon )
1616771586220:Normalisation
1616771586479:sizeFactors(Normalisation)
1616771586514:#每個樣本的讀段總數mapped read
1616771586515:colSums(counts(Normalisation))
1616771586575:Dispersion = estimateDispersions( Normalisation )
1616772021092:Dispersion
1616772021455:plotDispEsts(Dispersion)
1616772042780:mcols(Dispersion)
1616772042865:#5 Testing for differential exon usage
1616772042866:deu = testForDEU( Dispersion )
1616772100587:deu
1616772101465:colData(deu)
1616772101473:#評估 relative exon usage fold changes
1616772101474:#based on the coefficients of a GLM fit that uses the formula
1616772101476:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1616774211651:foldchange
1616774212038:mcols(foldchange)
1616774212207:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1616774212208:dxr1 = DEXSeqResults( foldchange )
1616774222333:dxr1
1616774222598:write.csv(dxr1, "2p-star-ensembl/DEXseq-pair/count-pair.csv", row.names = FALSE)
1616774226715:# dnr = DEXSeq(foldchange)
1616774226716:# class:查詢物件的類別
1616774226716:class(dnr)
1616774226717:dxr1
1616774226861:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1616774227290:table ( dxr1$padj < 0.1 )
1616774227355:plotMA(dxr1)
1616774229968:#legend=TRUE會有顯示control和KD的圖標
1616774229969:plotDEXSeq( dxr1, "ENSG00000000419", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616774233681:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1616774233681:plotDEXSeq( dxr1, "ENSG00000000419", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616774234011:#expression=FALSE只會出現normalized counts
1616774234012:#norCounts=FALSE不會顯示normalized counts
1616774234012:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1616774234013:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616774234060:DEXSeqHTML( dxr1, FDR=0.05)
1616774235763:# "Expression" is the expression strength of the gene
1616774235763:# i.e., simply the average number of (normalized) reads that map to the sample in a given condition
1616774235764:# "Exon usage" is an exon's usage, compared to all the other exons of the same gene
1616774235765:sessionInfo()
1616782871250:DEXSeqHTML( dxr1, FDR=0.1)
1616782899005:DEXSeqHTML( dxr1, FDR=0.1)
1616782949995:countFiles = list.files( pattern="count3.txt$", full.names = TRUE)
1616782949997:basename(countFiles)
1616782949998:# Loading data frame, data.frame不同欄可放入不同屬性資料
1616782949999:sampleTable = data.frame(
1616782949999:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1616782950000:condition = c("control", "knockdown", "control", "knockdown"),
1616782950001:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1616782950002:)
1616782950004:sampleTable
1616782950011:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1616782950012:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1616782950046:basename(flattenedFile)
1616782950047:dnd = DEXSeqDataSetFromHTSeq(
1616782950047:countFiles,
1616782950048:sampleData = sampleTable,
1616782950048:design= ~ sample + exon + condition:exon,
1616782950049:flattenedfile = flattenedFile)
1616782950054:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1616782950055:stringsAsFactors=FALSE)[[1]]
1616782950327:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1616782950335:exon <- dnd[geneIDs( dnd ) %in% genes,]
1616782954999:colData(exon)
1616782955009:head(counts(exon), 5)
1616782955047:head( rowRanges(exon), 10 )
1616782955150:sampleAnnotation( exon )
1616782955602:Normalisation = estimateSizeFactors( exon )
1616782960922:Normalisation
1616782961240:sizeFactors(Normalisation)
1616782961277:#每個樣本的讀段總數mapped read
1616782961278:colSums(counts(Normalisation))
1616782961333:Dispersion = estimateDispersions( Normalisation )
1616783370451:Dispersion
1616783370806:plotDispEsts(Dispersion)
1616783394691:mcols(Dispersion)
1616783408694:#5 Testing for differential exon usage
1616783408695:deu = testForDEU( Dispersion )
1616783457601:deu
1616783458085:colData(deu)
1616783458098:#評估 relative exon usage fold changes
1616783458107:#based on the coefficients of a GLM fit that uses the formula
1616783458126:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1616785842662:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1616785842663:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1616785846175:library(DEXSeq,readr)
1616785864625:# 這是star 2p ensemble count
1616785864634:countFiles = list.files( pattern="count3.txt$", full.names = TRUE)
1616785864635:basename(countFiles)
1616785864637:# Loading data frame, data.frame不同欄可放入不同屬性資料
1616785864638:sampleTable = data.frame(
1616785864638:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1616785864639:condition = c("control", "knockdown", "control", "knockdown"),
1616785864639:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1616785864640:)
1616785864641:sampleTable
1616785864646:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1616785864646:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1616785864743:basename(flattenedFile)
1616785864744:dnd = DEXSeqDataSetFromHTSeq(
1616785864745:countFiles,
1616785864745:sampleData = sampleTable,
1616785864746:design= ~ sample + exon + condition:exon,
1616785864746:flattenedfile = flattenedFile)
1616785864752:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1616785864753:stringsAsFactors=FALSE)[[1]]
1616785864900:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1616785864908:exon <- dnd[geneIDs( dnd ) %in% genes,]
1616785865570:colData(exon)
1616785865580:head(counts(exon), 5)
1616785865582:head( rowRanges(exon), 10 )
1616785865583:sampleAnnotation( exon )
1616785865584:Normalisation = estimateSizeFactors( exon )
1616785865585:Normalisation
1616785865585:sizeFactors(Normalisation)
1616785865586:#每個樣本的讀段總數mapped read
1616785865586:colSums(counts(Normalisation))
1616785865587:Dispersion = estimateDispersions( Normalisation )
1616785865588:Dispersion
1616785865588:plotDispEsts(Dispersion)
1616785865590:mcols(Dispersion)
1616785865591:#5 Testing for differential exon usage
1616785865592:deu = testForDEU( Dispersion )
1616785865594:deu
1616785865595:colData(deu)
1616785865596:#評估 relative exon usage fold changes
1616785865596:#based on the coefficients of a GLM fit that uses the formula
1616785865596:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1616785865598:foldchange
1616785865598:mcols(foldchange)
1616785865599:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1616785865600:dxr1 = DEXSeqResults( foldchange )
1616785865601:dxr1
1616785865602:write.csv(dxr1, "2p-star-ensembl/DEXseq-pair/count-pair.csv", row.names = FALSE)
1616785865604:# dnr = DEXSeq(foldchange)
1616785865604:# class:查詢物件的類別
1616785865605:class(dnr)
1616785865605:dxr1
1616785865606:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1616785865608:table ( dxr1$padj < 0.1 )
1616785865609:plotMA(dxr1)
1616785865610:#legend=TRUE會有顯示control和KD的圖標
1616785865610:plotDEXSeq( dxr1, "ENSG00000000419", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616785865613:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1616785865614:plotDEXSeq( dxr1, "ENSG00000000419", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616785865615:#expression=FALSE只會出現normalized counts
1616785865615:#norCounts=FALSE不會顯示normalized counts
1616785865616:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1616785865616:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616785865617:DEXSeqHTML( dxr1, FDR=0.1)
1616785865620:# "Expression" is the expression strength of the gene
1616785865620:# i.e., simply the average number of (normalized) reads that map to the sample in a given condition
1616785865621:# "Exon usage" is an exon's usage, compared to all the other exons of the same gene
1616785865621:sessionInfo()
1616787633176:# 這是star 2p ensemble count
1616787633178:countFiles = list.files( path = "",pattern="count3.txt$", full.names = TRUE)
1616787634422:basename(countFiles)
1616787710071:# 這是star 2p ensemble count
1616787710080:countFiles = list.files( path = "/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/no-strand/",pattern="count3.txt$", full.names = TRUE)
1616787711837:basename(countFiles)
1616787722111:# Loading data frame, data.frame不同欄可放入不同屬性資料
1616787722119:sampleTable = data.frame(
1616787722119:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1616787722120:condition = c("control", "knockdown", "control", "knockdown"),
1616787722120:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1616787722121:)
1616787722124:sampleTable
1616787722132:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1616787722133:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1616787722436:basename(flattenedFile)
1616787722445:dnd = DEXSeqDataSetFromHTSeq(
1616787722445:countFiles,
1616787722446:sampleData = sampleTable,
1616787722447:design= ~ sample + exon + condition:exon,
1616787722448:flattenedfile = flattenedFile)
1616787818873:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/geneCounts1/all_ensg_list.csv",
1616787818875:stringsAsFactors=FALSE)[[1]]
1616787819289:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1616787819290:exon <- dnd[geneIDs( dnd ) %in% genes,]
1616787825338:colData(exon)
1616787825354:head(counts(exon), 5)
1616787825400:head( rowRanges(exon), 10 )
1616787825488:sampleAnnotation( exon )
1616787825981:Normalisation = estimateSizeFactors( exon )
1616787830411:Normalisation
1616787830629:sizeFactors(Normalisation)
1616787830662:#每個樣本的讀段總數mapped read
1616787830663:colSums(counts(Normalisation))
1616787830698:Dispersion = estimateDispersions( Normalisation )
1616791572788:Dispersion
1616791573103:plotDispEsts(Dispersion)
1616791662166:mcols(Dispersion)
1616791715209:#5 Testing for differential exon usage
1616791715212:deu = testForDEU( Dispersion )
1616791804748:deu
1616791805183:colData(deu)
1616791805193:#評估 relative exon usage fold changes
1616791805194:#based on the coefficients of a GLM fit that uses the formula
1616791805194:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1616803649261:foldchange
1616803649531:mcols(foldchange)
1616803650452:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1616803650453:dxr1 = DEXSeqResults( foldchange )
1616803667100:dxr1
1616803669320:write.csv(dxr1, "2p-star-ensembl/DEXseq-pair/count-pair.csv", row.names = FALSE)
1616803673357:# dnr = DEXSeq(foldchange)
1616803673365:# class:查詢物件的類別
1616803673368:class(dnr)
1616803673372:dxr1
1616803673779:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1616803674521:table ( dxr1$padj < 0.1 )
1616803674622:plotMA(dxr1)
1616803682398:#legend=TRUE會有顯示control和KD的圖標
1616803682399:plotDEXSeq( dxr1, "ENSG00000000419", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616803691346:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1616803691348:plotDEXSeq( dxr1, "ENSG00000000419", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616803693208:#expression=FALSE只會出現normalized counts
1616803693212:#norCounts=FALSE不會顯示normalized counts
1616803693214:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1616803693215:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616803694289:DEXSeqHTML( dxr1, FDR=0.1)
1616803707728:write.csv(dxr1, "2p-star-ensembl/no-strand/no-strand0327.csv", row.names = FALSE)
1616803708797:write.csv(dxr1, "/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/no-strand/no-strand0327.csv", row.names = FALSE)
1616817553578:DEXSeqHTML( dxr1, FDR=0.1)
1616817700209:#expression=FALSE只會出現normalized counts
1616817700213:#norCounts=FALSE不會顯示normalized counts
1616817700217:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1616817700223:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616817711343:#expression=FALSE只會出現normalized counts
1616817711344:#norCounts=FALSE不會顯示normalized counts
1616817711345:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1616817711346:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616817729860:#expression=FALSE只會出現normalized counts
1616817729868:#norCounts=FALSE不會顯示normalized counts
1616817729869:plotDEXSeq( dxr1, "ENSG00000000457", expression=TRUE, norCounts=TRUE,displayTranscripts=TRUE,splicing=TRUE,
1616817729871:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616817801096:#expression=FALSE只會出現normalized counts
1616817801096:#norCounts=FALSE不會顯示normalized counts
1616817801097:plotDEXSeq( dxr1, "ENSG00000000457", expression=FALSE, norCounts=FALSE,displayTranscripts=FALSE,splicing=TRUE,
1616817801100:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616817814911:#expression=FALSE只會出現normalized counts
1616817814919:#norCounts=FALSE不會顯示normalized counts
1616817814920:plotDEXSeq( dxr1, "ENSG00000000419", expression=FALSE, norCounts=FALSE,displayTranscripts=FALSE,splicing=TRUE,
1616817814920:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1616823062017:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"))
1616823139975:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"))
1616823168206:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"))
1616823208236:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"))
1616825446745:warnings(DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80")))
1617006314398:load("/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/.RData")
1621193293031:load("/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/.RData")
1621205889477:#legend=TRUE會有顯示control和KD的圖標
1621205889483:plotDEXSeq( dxr1, "ENSG00000149311", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621205913685:#abs()絕對值
1621205913686:# padj=FDR
1621205913687:table ( dxr1$padj < 0.05, dxr1$log2fold_knockdown_control < abs(2) )
1621206020114:#legend=TRUE會有顯示control和KD的圖標
1621206020132:plotDEXSeq( dxr2, "ENSG00000149311", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206033638:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1621206033640:plotDEXSeq( dxr2, "ENSG00000149311", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206705004:#legend=TRUE會有顯示control和KD的圖標
1621206705015:plotDEXSeq( dxr2, "ENSG00000197299", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206711875:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1621206711876:plotDEXSeq( dxr2, "ENSG00000197299", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206723213:#expression=FALSE只會出現normalized counts
1621206723214:#norCounts=FALSE不會顯示normalized counts
1621206723214:# splicing=TRUE is exon usage
1621206723215:plotDEXSeq( dxr2, "ENSG00000197299", expression=TRUE, splicing=TRUE,
1621206723216:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206738100:DEXSeqHTML( dxr2, FDR=0.1,path="html", file="testForDEU.html",
1621206738108:fitExpToVar="condition", color=c("#FF000080", "#0000FF80") )
1621206754908:#legend=TRUE會有顯示control和KD的圖標
1621206754911:plotDEXSeq( dxr2, "ENSG00000197299", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206867291:#legend=TRUE會有顯示control和KD的圖標
1621206867300:plotDEXSeq( dxr2, "ENSG00000067369", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206922578:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1621206922586:plotDEXSeq( dxr2, "ENSG00000051180", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206927881:ENSG00000067369
1621206930942:#legend=TRUE會有顯示control和KD的圖標
1621206930943:plotDEXSeq( dxr2, "ENSG00000051180", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621206974909:#legend=TRUE會有顯示control和KD的圖標
1621206974911:plotDEXSeq( dxr2, "ENSG00000085999", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1621561095004:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1621561095005:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1621561102616:library(DEXSeq,readr)
1621561122992:# 這是star 2p ensemble count
1621561122993:countFiles = list.files( path = "/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/no-strand/",pattern="count3.txt$", full.names = TRUE)
1621561123193:basename(countFiles)
1621561123195:# Loading data frame, data.frame不同欄可放入不同屬性資料
1621561123196:sampleTable = data.frame(
1621561123197:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1621561123198:condition = c("control", "knockdown", "control", "knockdown"),
1621561123199:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1621561123199:)
1621561123201:sampleTable
1621561123205:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1621561123207:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1621561123401:basename(flattenedFile)
1621561123404:dnd = DEXSeqDataSetFromHTSeq(
1621561123407:countFiles,
1621561123408:sampleData = sampleTable,
1621561123409:design= ~ sample + exon + condition:exon,
1621561123410:flattenedfile = flattenedFile)
1621561239355:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/DEXSeq_Result/DNA_repair_list_052121.csv",
1621561239356:stringsAsFactors=FALSE)[[1]]
1621561325658:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/DEXSeq_Result/DNA_repair_list_052121.csv",
1621561325671:stringsAsFactors=FALSE)[[1]]
1621561428149:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/DEXSeq_Result/DNA_repair_list_052121.txt",
1621561428162:stringsAsFactors=FALSE)[[1]]
1621561436181:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1621561436181:exon <- dnd[geneIDs( dnd ) %in% genes,]
1621561444869:Normalisation = estimateSizeFactors( exon )
1621561448463:Dispersion = estimateDispersions( Normalisation )
1621561525117:plotDispEsts(Dispersion)
1621561526794:#5 Testing for differential exon usage
1621561526794:deu = testForDEU( Dispersion )
1621561532185:#評估 relative exon usage fold changes
1621561532185:#based on the coefficients of a GLM fit that uses the formula
1621561532186:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1621561575101:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1621561575102:dxr1 = DEXSeqResults( foldchange )
1621561885181:write.csv(dxr1, "/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/no-strand/DNA_repair_list_052121.csv", row.names = FALSE)
1621561991541:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"))
1621562532147:DEXSeqHTML( dxr1, FDR=0.5, color=c("#FF000080", "#0000FF80"))
1621562625854:DEXSeqHTML( dxr1, FDR=0.5, color=c("#FF000080", "#0000FF80"))
1621562672964:DEXSeqHTML( dxr1, FDR=0.5, color=c("#FF000080", "#0000FF80"))
1621562728470:DEXSeqHTML( dxr1, FDR=0.5, color=c("#FF000080", "#0000FF80"))
1621562814993:DEXSeqHTML( dxr1, FDR=0.05, color=c("#FF000080", "#0000FF80"))
1621562927483:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/DEXSeq_Result/Jenny_iDRiP_052121.txt",
1621562927486:stringsAsFactors=FALSE)[[1]]
1621562930127:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1621562930136:exon <- dnd[geneIDs( dnd ) %in% genes,]
1621562934350:Normalisation = estimateSizeFactors( exon )
1621562939994:Dispersion = estimateDispersions( Normalisation )
1621562972213:plotDispEsts(Dispersion)
1621562973387:#5 Testing for differential exon usage
1621562973387:deu = testForDEU( Dispersion )
1621562975618:#評估 relative exon usage fold changes
1621562975619:#based on the coefficients of a GLM fit that uses the formula
1621562975620:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1621562996542:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1621562996543:dxr1 = DEXSeqResults( foldchange )
1621563002749:write.csv(dxr1, "/Volumes/TOSHIBA EXT/RNAseq1/2p-star-ensembl/no-strand/Jenny_iDRiP_052121.csv", row.names = FALSE)
1621563003269:plotMA(dxr1)
1621563041174:DEXSeqHTML( dxr1, FDR=0.1, color=c("#FF000080", "#0000FF80"))
1621563112694:DNA_repair_list_052121
1621563117171:genes <- read.table("/Volumes/TOSHIBA EXT/RNAseq1/DEXSeq_Result/DNA_repair_list_052121.txt",
1621563117172:stringsAsFactors=FALSE)[[1]]
1621563119096:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1621563119097:exon <- dnd[geneIDs( dnd ) %in% genes,]
1621563122994:Normalisation = estimateSizeFactors( exon )
1621563127650:Dispersion = estimateDispersions( Normalisation )
1621563207761:#5 Testing for differential exon usage
1621563207762:deu = testForDEU( Dispersion )
1621563211171:#評估 relative exon usage fold changes
1621563211179:#based on the coefficients of a GLM fit that uses the formula
1621563211180:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1621563259382:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1621563259388:dxr1 = DEXSeqResults( foldchange )
1621563261878:plotMA(dxr1)
1621698631719:install.packages("devtools")
1621698776777:library(devtools)
1621698786390:install.packages("dplyr")
1621698791590:install.packages("ggplot2")
1621699178574:install.packages("shiny")
1621699252231:install_github("StatsWithR/statsr")
1621699252238:install.packages("devtools","dplyr","ggplot2")
1621699316568:library(devtools, dyplyr,ggplot2)
1621699320127:install.packages("ggplot2")
1621699339920:install.packages("ggplot2")
1621699354896:install.packages("dplyr")
1621701849604:library(devtools)
1621701851665:library(dplyr)
1621701853240:library(ggplot2)
1621701853575:library(statsr)
1621701868225:install_github("StatsWithR/statsr")
1621702028474:library(statsr)
1621702038807:library(ggplot2)
1621702040931:library(dplyr)
1621702043510:,library(statsr)
1621702047136:library(statsr)
1621702050394:library(devtools)
1621702332694:data(arbuthnot)
1621702342785:data(arbuthnot)
1621702358847:arbuthnot
1621702368544:dim(arbuthnot)
1621702374948:names(arbuthnot)
1621702430966:year
1621751295281:library(dplyr)
1621751296107:library(ggplot2)
1621751296384:library(statsr)
1621774582693:data(arbuthnot)
1621774602600:This command instructs R to load some data. The Arbuthnot baptism counts for boys
1621774602604:and girls. You should see that the workspace area in the upper righthand corner of
1621774603700:the RStudio window now lists a data set called `arbuthnot` that has 82 observations
1621774603701:on 3 variables. As you interact with R, you will create a series of objects.
1621774603701:Sometimes you load them as we have done here, and sometimes you create them yourself
1621774603702:as the byproduct of a computation or some analysis you have performed.
1621774616173:arbuthnot
1621774760663:data(arbuthnot)
1621774765493:library(dplyr)
1621774765498:library(ggplot2)
1621774765506:library(statsr)
1621774769565:data(arbuthnot)
1621774774724:data(arbuthnot)
1621774781493:library(dplyr)
1621774781504:library(ggplot2)
1621774781521:library(statsr)
1621774788700:data(arbuthnot)
1621774788720:arbuthnot
1621774789120:dim(arbuthnot)
1621774789130:names(arbuthnot)
1621774789149:arbuthnot$boys
1621774789213:# type your code for the Question 2 here, and Knit
1621774789242:ggplot(data = arbuthnot, aes(x = year, y = girls)) +
1621774789246:geom_point()
1621774791239:?ggplot
1621774791593:5218 + 4683
1621774791610:arbuthnot$boys + arbuthnot$girls
1621774791825:arbuthnot <- arbuthnot %>%
1621774791833:mutate(total = boys + girls)
1621774791934:ggplot(data = arbuthnot, aes(x = year, y = total)) +
1621774791936:geom_line()
1621774792677:ggplot(data = arbuthnot, aes(x = year, y = total)) +
1621774792683:geom_line() +
1621774792685:geom_point()
1621774793327:# type your code for the Exercise here, and Knit
1621774793338:arbuthnot <- arbuthnot %>%
1621774793341:mutate(more_boys = boys > girls)
1621774793369:data(present)
1621774793391:# type your code for Question 4 here, and Knit
1621774793405:# type your code for Exercise here, and Knit
1621774793426:# type your code for Question 5 here, and Knit
1621774793444:# type your code for Question 6 here, and Knit
1621774793461:# type your code for Question 7 here, and Knit
1621774793479:# type your code for Question 8 here
1621774793482:# sample code is provided below, edit as necessary, uncomment, and then Knit
1621774793484:#present %>%
1621774793486:#  mutate(total = ?) %>%
1621774793489:#  arrange(desc(total))
1621774850125:library(dplyr)
1621774850132:library(ggplot2)
1621774850136:library(statsr)
1621774860037:data(arbuthnot)
1621774868104:library(dplyr)
1621774868111:library(ggplot2)
1621774868119:library(statsr)
1621774868138:data(arbuthnot)
1621774868160:arbuthnot
1621774868199:dim(arbuthnot)
1621774868214:names(arbuthnot)
1621774868225:arbuthnot$boys
1621774868313:# type your code for the Question 2 here, and Knit
1621774868327:ggplot(data = arbuthnot, aes(x = year, y = girls)) +
1621774868329:geom_point()
1621774869124:?ggplot
1621774869901:5218 + 4683
1621774869910:arbuthnot$boys + arbuthnot$girls
1621774869994:arbuthnot <- arbuthnot %>%
1621774869998:mutate(total = boys + girls)
1621774870043:ggplot(data = arbuthnot, aes(x = year, y = total)) +
1621774870048:geom_line()
1621774870567:ggplot(data = arbuthnot, aes(x = year, y = total)) +
1621774870569:geom_line() +
1621774870572:geom_point()
1621774871077:# type your code for the Exercise here, and Knit
1621774871094:arbuthnot <- arbuthnot %>%
1621774871105:mutate(more_boys = boys > girls)
1621774871153:data(present)
1621774871177:# type your code for Question 4 here, and Knit
1621774871188:# type your code for Exercise here, and Knit
1621774871201:# type your code for Question 5 here, and Knit
1621774871216:# type your code for Question 6 here, and Knit
1621774871226:# type your code for Question 7 here, and Knit
1621774871235:# type your code for Question 8 here
1621774871238:# sample code is provided below, edit as necessary, uncomment, and then Knit
1621774871240:#present %>%
1621774871242:#  mutate(total = ?) %>%
1621774871245:#  arrange(desc(total))
1621775077280:library(dplyr)
1621775078910:library(ggplot2)
1621775079615:library(statsr)
1621775092384:data(arbuthnot)
1621775111251:arbuthnot
1621775135747:View(arbuthnot)
1621776614418:<ol>
1621776614440:<li> 2 </li>
1621776616191:<li> 3 </li>
1621776616191:<li> 4 </li>
1621776616197:<li> 82 </li>
1621776616197:<li> 1710 </li>
1621776616198:</ol>
1621779770984:# type your code for the Question 2 here, and Knit
1621779771003:arbuthnot$girls
1621779964349:# type your code for the Exercise here, and Knit
1621779964354:ggplot(data = arbuthnot$boys, aes(x = year, y = total)) +
1621779964357:geom_line() +
1621779964361:geom_point()
1621780330336:# type your code for the Exercise here, and Knit
1621780330369:ggplot(data = arbuthnot$boys, aes(x = year, y = boys)) +
1621780330414:geom_line() +
1621780330428:geom_point()
1621780339264:# type your code for the Exercise here, and Knit
1621780339268:ggplot(data = boys, aes(x = year, y = boys)) +
1621780339273:geom_line() +
1621780339277:geom_point()
1621780413848:# type your code for the Exercise here, and Knit
1621780413911:arbuthnot <- arbuthnot$boys
1621780433523:ggplot(data = arbuthnot, aes(x = year, y = boys)) +
1621780433546:geom_line() +
1621780433554:geom_point()
1621780484094:# type your code for the Exercise here, and Knit
1621780484101:arbuthnot <- arbuthnot %>%
1621780484104:mutate(total = boys )
1621780502353:arbuthnot <- arbuthnot %>%
1621780502362:mutate(total = boys + girls)
1621780528025:library(dplyr)
1621780528041:library(ggplot2)
1621780528044:library(statsr)
1621780528062:data(arbuthnot)
1621780528215:arbuthnot
1621780528711:dim(arbuthnot)
1621780528796:names(arbuthnot)
1621780528892:arbuthnot$boys
1621780536625:arbuthnot$boys
1621780544673:# type your code for the Question 2 here, and Knit
1621780544679:arbuthnot$girls
1621782169135:arbuthnot <- arbuthnot %>%
1621782169142:mutate(total = boys + girls)
1621782177835:library(dplyr)
1621782179396:library(ggplot2)
1621782179762:library(statsr)
1621782185756:data(arbuthnot)
1621782185789:arbuthnot
1621782186463:dim(arbuthnot)
1621782186486:names(arbuthnot)
1621782186505:arbuthnot$boys
1621782186580:# type your code for the Question 2 here, and Knit
1621782186584:arbuthnot$girls
1621782186726:ggplot(data = arbuthnot, aes(x = year, y = girls)) +
1621782186729:geom_point()
1621782187949:?ggplot
1621782188334:5218 + 4683
1621782188363:arbuthnot$boys + arbuthnot$girls
1621782204240:arbuthnot <- arbuthnot %>%
1621782204243:mutate(total = boys + girls)
1621782224117:arbuthnot <- arbuthnot %>%
1621782224119:mutate(total = boys )
1621782241360:# type your code for the Exercise here, and Knit
1621782241362:ggplot(data = arbuthnot, aes(x = year, y = total)) +
1621782241365:geom_line() +
1621782241369:geom_point()
1621782316393:arbuthnot <- arbuthnot %>%
1621782316397:mutate(total = boys + girls)
1621782356619:# type your code for the Exercise here, and Knit
1621782356621:ggplot(data = arbuthnot$boys, aes(x = year, y = boys)) +
1621782356625:geom_line() +
1621782356629:geom_point()
1621782439976:# type your code for the Exercise here, and Knit
1621782439979:arbuthnot <- arbuthnot %>%
1621782439981:mutate(boys = boys)
1621782441603:ggplot(data = arbuthnot$boys, aes(x = year, y = boys)) +
1621782441609:geom_line() +
1621782441613:geom_point()
1621782450656:ggplot(data = arbuthnot, aes(x = year, y = boys)) +
1621782450658:geom_line() +
1621782450660:geom_point()
1621783226005:data(present)
1621783279967:# type your code for Question 4 here, and Knit
1621783279970:present
1621783290379:# type your code for Question 4 here, and Knit
1621783290382:present$year
1621783303609:# type your code for Question 4 here, and Knit
1621783303626:present$2013
1621783309979:# type your code for Question 4 here, and Knit
1621783309982:present$year
1621783377570:arbuthnot <- arbuthnot %>%
1621783377574:mutate(more_boys = boys > girls)
1621783439824:# type your code for Question 4 here, and Knit
1621783439833:present[2]
1621783456906:# type your code for Question 4 here, and Knit
1621783456909:present(2)
1621783600117:# type your code for the Exercise here, and Knit
1621783600121:arbuthnot <- arbuthnot %>%
1621783600129:mutate(girls = girls)
1621783601331:ggplot(data = arbuthnot, aes(x = year, y = girls)) +
1621783601334:geom_line() +
1621783601336:geom_point()
1621783718591:# type your code for Question 4 here, and Knit
1621783718594:present$year
1621783747197:# type your code for Exercise here, and Knit
1621783747200:range(present$year)
1621783817992:ggplot(data = arbuthnot, aes(x = year, y = total)) +
1621783818000:geom_line()
1621783881263:data(present)
1621784199883:# type your code for Question 5 here, and Knit
1621784199886:data(present)
1621784257045:present
1621784288688:present <- present %>%
1621784288690:mutate(total = boys + girls)
1621784356368:present <- present %>%
1621784356371:mutate(total = boys + girls, prop_boys=boys)
1621784396309:ggplot(data = present, aes(x = year, y = prop_boys)) +
1621784396312:geom_line()
1621784588888:# type your code for Question 6 here, and Knit
1621784588894:present <- present %>%
1621784588897:mutate(more_boys = boys > girls)
1621784631067:# type your code for Question 6 here, and Knit
1621784631070:present <- present %>%
1621784631072:mutate(more_boys = boys > girls)
1621784649938:present
1621784953245:# type your code for Question 7 here, and Knit
1621784953249:present <- present %>%
1621784953252:mutate(total = boys + girls, prop_boys = boys,prop_boy_girl = boys/girls)
1621784966229:ggplot(data = present, aes(x = year, y = prop_boy_gril)) +
1621784966231:geom_line() +
1621784966238:geom_point()
1621784976430:ggplot(data = present, aes(x = year, y = prop_boy_girl)) +
1621784976433:geom_line() +
1621784976435:geom_point()
1622275751025:tsr)
1622275754792:library(statsr)
1622275760862:library(statsr)
1622275760865:library(dplyr)
1622275760907:library(ggplot2)
1622275779369:data(nycflights)
1622275793231:names(nycflights)
1622277952657:str(nycflights)
1622277980175:ggplot(data = nycflights, aes(x = dep_delay)) +
1622277980185:geom_histogram()
1622277993304:ggplot(data = nycflights, aes(x = dep_delay)) +
1622277993318:geom_histogram(binwidth = 15)
1622277995256:ggplot(data = nycflights, aes(x = dep_delay)) +
1622277995258:geom_histogram(binwidth = 150)
1622278002369:rdu_flights <- nycflights %>%
1622278002382:filter(dest == "RDU")
1622278004627:ggplot(data = rdu_flights, aes(x = dep_delay)) +
1622278004641:geom_histogram()
1622278012338:rdu_flights %>%
1622278012343:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622278027190:sfo_feb_flights <- nycflights %>%
1622278027197:filter(dest == "SFO", month == 2)
1622290684137:library(statsr)
1622290688456:library(statsr)
1622290688458:library(dplyr)
1622290688487:library(ggplot2)
1622290691249:data(nycflights)
1622290694438:names(nycflights)
1622290698833:str(nycflights)
1622290705340:ggplot(data = nycflights, aes(x = dep_delay)) +
1622290705344:geom_histogram()
1622290715694:rdu_flights <- nycflights %>%
1622290715707:filter(dest == "RDU")
1622290716457:ggplot(data = rdu_flights, aes(x = dep_delay)) +
1622290716473:geom_histogram()
1622290722916:rdu_flights %>%
1622290722928:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622290726808:sfo_feb_flights <- nycflights %>%
1622290726810:filter(dest == "SFO", month == 2)
1622290768976:count(sfo_feb_flights)
1622290777902:# type your code for Question 2 here, and Knit
1622290777906:ggplot(data = nycflights, aes(x = arr_delay)) +
1622290777910:geom_histogram()
1622292736342:# type your code for Question 2 here, and Knit
1622292736377:data(nycflights)
1622292737772:summarize(nycflights, avg_arr_delay = mean(arr_delay))
1622292752789:ggplot(data = nycflights, aes(x = arr_delay)) +
1622292752802:geom_histogram()
1622292770746:rdu_flights <- nycflights %>%
1622292770750:filter(dest == "RDU")
1622292772985:ggplot(data = rdu_flights, aes(x = dep_delay)) +
1622292772996:geom_histogram()
1622292796242:ggplot(data = nycflights, aes(x = dep_delay)) +
1622292796247:geom_histogram()
1622296026718:# type your code for Question 2 here, and Knit
1622296026750:data(nycflights)
1622296091661:rdu_flights %>%
1622296091665:summarize(nycflights, avg_arr_delay = mean(arr_delay))
1622296110302:ggplot(data = nycflights, aes(x = arr_delay)) +
1622296110308:geom_histogram()
1622296116589:rdu_flights %>%
1622296116592:summarize(nycflights, avg_arr_delay = mean(arr_delay))
1622296194731:ggplot(data = nycflights, aes(x = avg_arr_delay)) +
1622296194744:geom_histogram()
1622296200935:rdu_flights %>%
1622296200945:summarize(nycflights, avg_arr_delay = mean(arr_delay))
1622296219970:ggplot(data = nycflights, aes(x = rdu_flights)) +
1622296219987:geom_histogram()
1622296231275:rdu_flights %>%
1622296231288:summarize(nycflights, avg_arr_delay = mean(arr_delay))
1622296234962:ggplot(data = nycflights, aes(x = rdu_flights)) +
1622296234964:geom_histogram()
1622296271618:a <- rdu_flights %>%
1622296271623:summarize(nycflights, avg_arr_delay = mean(arr_delay))
1622296274831:ggplot(data = nycflights, aes(x = a) +
1622296307807:ggplot(data = nycflights, aes(x = a)) +
1622296307810:geom_histogram()
1622296314798:# type your code for Question 2 here, and Knit
1622296314800:data(nycflights)
1622296317993:# type your code for Question 2 here, and Knit
1622296318003:data(nycflights)
1622296319630:a <- rdu_flights %>%
1622296319644:summarize(nycflights, avg_arr_delay = mean(arr_delay))
1622296320980:ggplot(data = nycflights, aes(x = a)) +
1622296320991:geom_histogram()
1622296387970:ggplot(data = rdu_flights, aes(x = a)) +
1622296387973:geom_histogram()
1622296436002:# type your code for Question 2 here, and Knit
1622296436014:sfo_feb_flights <- nycflights %>%
1622296436017:filter(dest == "SFO", month == 2)
1622296469257:ggplot(data = sfo_feb_flights, aes(x = dep_delay)) +
1622296469261:geom_histogram()
1622296514768:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622296514770:geom_histogram()
1622297087180:knit_with_parameters('~/OneDrive - 國立台灣大學/R COURSERA/Introduce to R.Rmd')
1622297147080:ggplot(data = nycflights, aes(x = dep_delay)) +
1622297147084:geom_histogram(binwidth = 150)
1622297151781:ggplot(data = nycflights, aes(x = dep_delay)) +
1622297151794:geom_histogram(binwidth = 15)
1622297576415:summarise(min_flights = min(distance), max_flights = max(distance), n = n())
1622297590706:summarise(min_flights = min(sfo_feb_flights), max_flights = max(sfo_feb_flights), n = n())
1622297595601:# type your code for Question 1 here, and Knit
1622297595612:sfo_feb_flights <- nycflights %>%
1622297595614:filter(dest == "SFO", month == 2)
1622297597890:summarise(min_flights = min(sfo_feb_flights), max_flights = max(sfo_feb_flights), n = n())
1622297603396:count(sfo_feb_flights)
1622297688586:summarise(min_flights = min(sfo_feb_flights), max_flights = max(sfo_feb_flights), n = n())
1622297731521:summarise(min_flights = min(sfo_feb_flights), max_flights = max(sfo_feb_flights), n = n())
1622297750169:flights %>%
1622297750173:summarise(mean_dd = max(dep_delay), sd_dd = min(dep_delay), n = n())
1622297759904:rdu_flights %>%
1622297759915:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622297771669:rdu_flights %>%
1622297771673:summarise(mean_dd = mean(arr_delay), sd_dd = sd(arr_delay), n = n())
1622297778635:rdu_flights %>%
1622297778646:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622297781633:rdu_flights %>%
1622297781637:summarise(mean_dd = mean(arr_delay), sd_dd = sd(arr_delay), n = n())
1622297787513:count(sfo_feb_flights)
1622297997524:# type your code for Question 3 here, and Knit
1622297997529:sfo_feb_flights %>%
1622297997534:summarise(medium_arr = medium(arr_delay), IQR_arr = IQR(arr_delay), n = n())
1622298017132:# type your code for Question 3 here, and Knit
1622298017135:sfo_feb_flights %>%
1622298017140:summarise(medium_arr = mediam(arr_delay), IQR_arr = IQR(arr_delay), n = n())
1622298035518:# type your code for Question 3 here, and Knit
1622298035521:sfo_feb_flights %>%
1622298035524:summarise(medium_arr = median(arr_delay), IQR_arr = IQR(arr_delay), n = n())
1622298087885:# type your code for Question 3 here, and Knit
1622298087901:sfo_feb_flights %>%
1622298087905:group_by(carrier) %>%
1622298087908:summarise(medium_arr = median(arr_delay), IQR_arr = IQR(arr_delay), n = n())
1622298160368:nycflights %>%
1622298160372:group_by(month) %>%
1622298160374:summarise(mean_dd = mean(dep_delay)) %>%
1622298160377:arrange(desc(mean_dd))
1622298235098:# type your code for Question 2 here, and Knit
1622298235102:sfo_feb_flights <- nycflights %>%
1622298235106:filter(dest == "SFO", month == 2, arr_delay >= 120)
1622298244080:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622298244082:geom_histogram()
1622298268155:# type your code for Question 2 here, and Knit
1622298268167:sfo_feb_flights <- nycflights %>%
1622298268173:filter(dest == "SFO", month == 2, arr_delay >= 2)
1622298269917:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622298269929:geom_histogram()
1622298298765:# type your code for Question 2 here, and Knit
1622298298775:sfo_feb_flights <- nycflights %>%
1622298298779:filter(dest == "SFO", arr_delay >= 2)
1622298300034:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622298300036:geom_histogram()
1622298308613:# type your code for Question 2 here, and Knit
1622298308616:sfo_feb_flights <- nycflights %>%
1622298308618:filter(dest == "SFO", arr_delay >= 120)
1622298309586:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622298309596:geom_histogram()
1622304245598:# type your code for Question 2 here, and Knit
1622304245628:sfo_feb_flights <- nycflights %>%
1622304245632:filter(dest == "SFO")
1622304246593:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622304246604:geom_histogram()
1622304602768:# type your code for Question 5 here, and Knit
1622304602773:nycflights %>%
1622304602776:group_by(month) %>%
1622304602781:summarise(median_dd = median(dep_delay)) %>%
1622304602786:arrange(desc(mean_dd))
1622304607404:# type your code for Question 5 here, and Knit
1622304607420:nycflights %>%
1622304607423:group_by(month) %>%
1622304607425:summarise(median_dd = median(dep_delay)) %>%
1622304607435:arrange(desc(mean_dd))
1622304620186:# type your code for Question 5 here, and Knit
1622304620196:nycflights %>%
1622304620200:group_by(month) %>%
1622304620207:summarise(median_dd = median(dep_delay)) %>%
1622304620211:arrange(desc(median_dd))
1622304656533:# type your code for Question 4 here, and Knit
1622304656536:nycflights %>%
1622304656543:group_by(month) %>%
1622304656548:summarise(mean_dd = mean(dep_delay)) %>%
1622304656552:arrange(desc(mean_dd))
1622305089268:# type your code for Question 3 here, and Knit
1622305089297:sfo_feb_flights %>%
1622305089300:group_by(carrier) %>%
1622305089302:summarise(IQR_arr = IQR(arr_delay), n = n())
1622305113789:summarise(IQR_arr = IQR(arr_delay)
1622305118230:# type your code for Question 3 here, and Knit
1622305118240:sfo_feb_flights %>%
1622305131341:# type your code for Question 3 here, and Knit
1622305131345:sfo_feb_flights %>%
1622305131353:group_by(carrier) %>%
1622305131356:summarise(IQR_arr = IQR(arr_delay))
1622305316306:```{r}
1622305317881:nycflights %>%
1622305317883:group_by(origin) %>%
1622305317884:summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
1622305317886:arrange(desc(ot_dep_rate))
1622305332655:ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
1622305332667:geom_boxplot()
1622305341332:nycflights <- nycflights %>%
1622305341337:mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
1622305344269:nycflights %>%
1622305344279:group_by(origin) %>%
1622305344281:summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
1622305344284:arrange(desc(ot_dep_rate))
1622305700929:# type your code for Question 7 here, and Knit
1622305700943:airports[airports$ot_dep_rate == max(airports$ot_dep_rate),]
1622305730241:# type your code for Question 7 here, and Knit
1622305730244:nycflights %>%
1622305730248:group_by(origin) %>%
1622305730250:summarise(ot_dep_rate = max(dep_type == "on time") / n()) %>%
1622305730259:arrange(desc(ot_dep_rate))
1622306113299:# type your code for Question 3 here, and Knit
1622306113304:rdu_flights %>%
1622306113312:group_by(origin) %>%
1622306113314:summarise(IQR_dd = IQR(dep_delay))
1622306131007:# type your code for Question 3 here, and Knit
1622306131016:rdu_flights %>%
1622306131018:group_by(origin) %>%
1622306131021:summarise(IQR_dd = IQR(arr_delay))
1622389450817:library(statsr)
1622389456963:library(dplyr)
1622389456989:library(ggplot2)
1622389457227:data(nycflights)
1622389457258:names(nycflights)
1622389457334:str(nycflights)
1622389457527:ggplot(data = nycflights, aes(x = dep_delay)) +
1622389457529:geom_histogram()
1622389459246:ggplot(data = nycflights, aes(x = dep_delay)) +
1622389459250:geom_histogram(binwidth = 15)
1622389459836:ggplot(data = nycflights, aes(x = dep_delay)) +
1622389459839:geom_histogram(binwidth = 150)
1622389460508:rdu_flights <- nycflights %>%
1622389460510:filter(dest == "RDU")
1622389460620:ggplot(data = rdu_flights, aes(x = dep_delay)) +
1622389460622:geom_histogram()
1622389461172:rdu_flights %>%
1622389461176:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622389461213:sfo_feb_flights <- nycflights %>%
1622389461215:filter(dest == "SFO", month == 2)
1622389461312:# type your code for Question 1 here, and Knit
1622389461314:sfo_feb_flights <- nycflights %>%
1622389461316:filter(dest == "SFO", month == 2)
1622389461356:rdu_flights %>%
1622389461360:summarise(mean_dd = mean(arr_delay), sd_dd = sd(arr_delay), n = n())
1622389461378:rdu_flights %>%
1622389461381:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622389461396:count(sfo_feb_flights)
1622389461427:# type your code for Question 2 here, and Knit
1622389461430:sfo_feb_flights <- nycflights %>%
1622389461432:filter(dest == "SFO")
1622389461473:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622389461476:geom_histogram()
1622389462036:rdu_flights %>%
1622389462040:group_by(origin) %>%
1622389462043:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622389462078:# type your code for Question 3 here, and Knit
1622389462081:sfo_feb_flights %>%
1622389462084:group_by(carrier) %>%
1622389462086:summarise(IQR_arr = IQR(arr_delay))
1622389462119:nycflights %>%
1622389462122:group_by(month) %>%
1622389462126:summarise(mean_dd = mean(dep_delay)) %>%
1622389462131:arrange(desc(mean_dd))
1622389462164:# type your code for Question 4 here, and Knit
1622389462167:nycflights %>%
1622389462169:group_by(month) %>%
1622389462171:summarise(mean_dd = mean(dep_delay)) %>%
1622389462174:arrange(desc(mean_dd))
1622389462203:# type your code for Question 5 here, and Knit
1622389462208:nycflights %>%
1622389462211:group_by(month) %>%
1622389462214:summarise(median_dd = median(dep_delay)) %>%
1622389462219:arrange(desc(median_dd))
1622389462268:ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
1622389462272:geom_boxplot()
1622389463330:nycflights <- nycflights %>%
1622389463337:mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
1622389463381:nycflights %>%
1622389463384:group_by(origin) %>%
1622389463386:summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
1622389463388:arrange(desc(ot_dep_rate))
1622389463443:# type your code for Question 7 here, and Knit
1622389463449:nycflights %>%
1622389463452:group_by(origin) %>%
1622389463455:summarise(ot_dep_rate = max(dep_type == "on time") / n()) %>%
1622389463458:arrange(desc(ot_dep_rate))
1622389463488:ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
1622389463490:geom_bar()
1622389464522:# type your code for Question 8 here, and Knit
1622389464539:# type your code for Question 9 here, and Knit
1622389464554:# type your code for Question 10 here, and Knit
1622389464560:```"
1622389473546:library(statsr)
1622389473549:library(dplyr)
1622389473551:library(ggplot2)
1622389473561:data(nycflights)
1622389473582:names(nycflights)
1622389473678:str(nycflights)
1622389473831:ggplot(data = nycflights, aes(x = dep_delay)) +
1622389473834:geom_histogram()
1622389474322:ggplot(data = nycflights, aes(x = dep_delay)) +
1622389474325:geom_histogram(binwidth = 15)
1622389474765:ggplot(data = nycflights, aes(x = dep_delay)) +
1622389474768:geom_histogram(binwidth = 150)
1622389475315:rdu_flights <- nycflights %>%
1622389475318:filter(dest == "RDU")
1622389475354:ggplot(data = rdu_flights, aes(x = dep_delay)) +
1622389475359:geom_histogram()
1622389475782:rdu_flights %>%
1622389475785:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622389475803:sfo_feb_flights <- nycflights %>%
1622389475807:filter(dest == "SFO", month == 2)
1622389475854:# type your code for Question 1 here, and Knit
1622389475856:sfo_feb_flights <- nycflights %>%
1622389475858:filter(dest == "SFO", month == 2)
1622389475906:rdu_flights %>%
1622389475908:summarise(mean_dd = mean(arr_delay), sd_dd = sd(arr_delay), n = n())
1622389475923:rdu_flights %>%
1622389475925:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622389475939:count(sfo_feb_flights)
1622389475988:# type your code for Question 2 here, and Knit
1622389475991:sfo_feb_flights <- nycflights %>%
1622389475994:filter(dest == "SFO")
1622389476032:ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
1622389476035:geom_histogram()
1622389476614:rdu_flights %>%
1622389476623:group_by(origin) %>%
1622389476626:summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
1622389476661:# type your code for Question 3 here, and Knit
1622389476665:sfo_feb_flights %>%
1622389476667:group_by(carrier) %>%
1622389476670:summarise(IQR_arr = IQR(arr_delay))
1622389476704:nycflights %>%
1622389476708:group_by(month) %>%
1622389476710:summarise(mean_dd = mean(dep_delay)) %>%
1622389476717:arrange(desc(mean_dd))
1622389476760:# type your code for Question 4 here, and Knit
1622389476763:nycflights %>%
1622389476766:group_by(month) %>%
1622389476768:summarise(mean_dd = mean(dep_delay)) %>%
1622389476771:arrange(desc(mean_dd))
1622389476842:# type your code for Question 5 here, and Knit
1622389476847:nycflights %>%
1622389476852:group_by(month) %>%
1622389476856:summarise(median_dd = median(dep_delay)) %>%
1622389476860:arrange(desc(median_dd))
1622389476893:ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
1622389476896:geom_boxplot()
1622389477806:nycflights <- nycflights %>%
1622389477812:mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
1622389477856:nycflights %>%
1622389477862:group_by(origin) %>%
1622389477869:summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
1622389477871:arrange(desc(ot_dep_rate))
1622389477911:# type your code for Question 7 here, and Knit
1622389477917:nycflights %>%
1622389477920:group_by(origin) %>%
1622389477924:summarise(ot_dep_rate = max(dep_type == "on time") / n()) %>%
1622389477932:arrange(desc(ot_dep_rate))
1622389477964:ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
1622389477967:geom_bar()
1622389478781:# type your code for Question 8 here, and Knit
1622389478800:# type your code for Question 9 here, and Knit
1622389478809:# type your code for Question 10 here, and Knit
1622389478812:```"
1622389499851:# type your code for Question 10 here, and Knit
1622389499853:library(tidyverse)
1622389503724:library(nycflights13)
1622389507153:# type your code for Question 10 here, and Knit
1622389507156:library(tidyverse)
1622389512478:library(nycflights13)
1625298074529:Library("DESeq")
1625298131529:pacman::p_load("DESeq")
1625298181103:library(DESeq2)
1625298263271:pacman::p_load(rio,DESeq2,BiocManager,tidyverse,RColorBrewer,pheatmap,golots)
1625298277166:## 1.creat project,在project下(右下角工具列) creat new folder
1625298277167:## 2.把檔案從Folder拖到new folder中
1625298277168:## 3.用grep匯入到project作統整
1625298277169:##paste 預設會使用一個空白字元當作分隔符號，將所有的字串連接起來，可用 sep 參數自行指定分隔字元
1625298277170:##如果不想要有任何分隔符號，可以使用 paste0
1625298277171:## Loading files
1625298277172:rawcount <- paste0("2passHTcount/",grep(".count",list.files("./2passHTcount/"),value = T))
1625298282309:## Making dataFrame
1625298282317:counts.csv <- import(rawcount[1],format = "csv")
1625298284131:counts.csv
1625298285134:col.index <- 2
1625298286053:col.index
1625298286766:for (i in rawcount) {
1625298286774:tmp.df <- import(i,format = "csv")
1625298286775:counts.csv[,col.index] <- tmp.df[,2]
1625298286775:col.index <- col.index + 1
1625298286776:}
1625298288403:colnames(counts.csv) <- c("Gene_ID",grep(".count",list.files("./raw count/"),value = T))
1625298292458:counts.csv
1625298311873:View(counts.csv)
1625301429212:library(htmltools)
1625301448106:library( "DESeq2" )
1625301459433:library(ggplot2)
1625373988256:setwd(/Users/chrisadore/Desktop)
1625373992417:setwd(Users/chrisadore/Desktop)
1625374002097:setwd(../Users/chrisadore/Desktop)
1625374022976:setwd("/Users/chrisadore/Desktop")
1625381037766:countData (Put Angle bracket and “-” here) read.csv('airway_scaledcounts.csv', header = TRUE, sep = ",")
1625381057352:library(htmltools)
1625381058302:library( "DESeq2" )
1625381059331:library(ggplot2)
1625381061956:setwd("/Users/chrisadore/Desktop")
1625381062762:countData (Put Angle bracket and “-” here) read.csv('airway_scaledcounts.csv', header = TRUE, sep = ",")
1625381196222:countData <- read.csv('airway_scaledcounts.csv', header = TRUE, sep = ",")
1625381197650:head(countData)
1625381243113:metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625381248923:metaData
1625381360455:dds <- DESeqDataSetFromMatrix(countData=countData,
1625381360476:colData=metaData,
1625381360477:design=~dex, tidy = TRUE)
1625381366273:dds
1625381409911:dds <- DESeq(dds)
1625381512204:res <- results(dds)
1625381546583:head(results(dds, tidy=TRUE))
1625381597428:summary(res)
1625381648672:res <- res[order(res$padj),]
1625381649514:head(res)
1625381698107:plotCounts
1625381753436:par(mfrow=c(2,3))
1625381773848:par(mfrow=c(2,3))
1625381792124:plotCounts(dds, gene="ENSG00000152583", intgroup="dex")
1625381852165:plotCounts(dds, gene="ENSG00000179094", intgroup="dex")
1625381852759:plotCounts(dds, gene="ENSG00000116584", intgroup="dex")
1625381853083:plotCounts(dds, gene="ENSG00000189221", intgroup="dex")
1625381853491:plotCounts(dds, gene="ENSG00000120129", intgroup="dex")
1625381853994:plotCounts(dds, gene="ENSG00000148175", intgroup="dex")
1625382002907:par par(mfrow=c(1,1))
1625382012827:par(mfrow=c(1,1))
1625382064683:(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
1625382070008:(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
1625382139785:with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
1625382273258:with(subset(res, padj(Put Angle bracket here).01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382330132:par(mfrow=c(1,1))
1625382335489:with(subset(res, padj(Put Angle bracket here).01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382342060:(subset(res, padj(Put Angle bracket here).01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382380874:with(subset(res, padj(Put Angle bracket here).01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382445697:par(mfrow=c(1,1))
1625382449645:with(subset(res, padj(Put Angle bracket here).01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382452671:with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
1625382503182:with(subset(res, padj(Put Angle bracket here).01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382514374:with(subset(res, padj(Put Angle bracket here).01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382514382:with(subset(res, padj(Put Angle bracket here).01 & abs(log2FoldChange)(Put “greater than” here)2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
1625382632662:with(subset(res, padj < .01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625382647672:with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
1625401791894:install.packages("htmltools")
1625401798303:library(htmltools)
1625401799212:library( "DESeq2" )
1625401812388:library(ggplot2)
1625401812442:setwd("/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2")
1625401812444:countData <- read.csv('/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/2raw_counts_table.csv', header = TRUE, sep = ",")
1625401813563:head(countData)
1625401813578:#metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625401813579:sampleCondition <- c("siNeg","siDHX8","siNeg","siDHX8")
1625401813580:metaData <- data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1625401813592:metaData
1625401814722:dds <- DESeqDataSetFromMatrix(countData=countData,
1625401814723:colData=metaData,
1625401814724:design=~dex, tidy = TRUE)
1625401814763:dds
1625401814764:dds <- DESeq(dds)
1625401814766:res <- results(dds)
1625401814768:head(results(dds, tidy=TRUE))
1625401814770:summary(res)
1625401814774:res <- res[order(res$padj),]
1625401851921:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1625402652764:row.names(countData) <- countData$Gene_ID
1625403128975:dds <- DESeqDataSetFromMatrix(countData=countData,
1625403128987:colData=metaData,
1625403128988:design=~dex, tidy = TRUE)
1625403366102:directory<-"/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2"
1625403399250:directory<-"/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount"
1625403403073:sampleFiles <- grep("counts",list.files(directory),value=TRUE)
1625403414192:#metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625403414194:sampleCondition <- c("siNeg","siDHX8","siNeg","siDHX8")
1625403446720:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1625403490992:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1625403523732:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1625403553050:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1625403582832:#countData <- read.csv('/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/2raw_counts_table.csv', header = TRUE, sep = ",")
1625403582840:#head(countData)
1625403582841:#metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625403582841:sampleTable
1625403657156:sampleFiles <- grep("DHX8",list.files(directory),value=TRUE)
1625403661573:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1625403665503:#countData <- read.csv('/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/2raw_counts_table.csv', header = TRUE, sep = ",")
1625403665504:#head(countData)
1625403665504:#metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625403665505:sampleTable
1625403732581:#countData <- read.csv('/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/2raw_counts_table.csv', header = TRUE, sep = ",")
1625403732590:#head(countData)
1625403732590:#metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625403732591:sampleTable
1625403739155:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1625403818430:#dds <- DESeqDataSetFromMatrix(countData=sampleFiles,
1625403818438:#                              colData=metaData,
1625403818439:#                              design=~dex, tidy = TRUE)
1625403818440:dds<-DESeq(ddsHTSeq)
1625403862957:res <- results(dds)
1625403867120:head(results(dds, tidy=TRUE))
1625403870096:summary(res)
1625403870131:res <- res[order(res$padj),]
1625403870220:head(res)
1625403879383:resSig <- res[ which(res$padj < 0.05 ), ]
1625403940896:write.csv(as.data.frame(resSig), file="/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount.resSig005.csv")
1625404048133:par(mfrow=c(1,1))
1625404068399:with(subset(resSig, padj < .01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625404071629:with(resSig, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
1625404080283:with(subset(resSig, padj < .01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625404082974:with(subset(resSig, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
1625404369415:resSig <- res[ which(res$padj < 0.1 ), ]
1625404377487:write.csv(as.data.frame(resSig), file="/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/resSig01.csv")
1625404384056:par(mfrow=c(1,1))
1625404386043:with(resSig, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
1625404388263:with(subset(resSig, padj < .01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625404389796:with(subset(resSig, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
1625404470683:write.csv(as.data.frame(res), file="/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/res.csv")
1625404492638:par(mfrow=c(1,1))
1625404493802:with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
1625404505665:with(subset(res, padj < .01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625404513897:with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
1625411017492:with(subset(res, padj < .05 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
1625411027597:with(subset(res, padj<.05 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))
1625413740010:library(htmltools)
1625413740199:library( "DESeq2" )
1625413756362:library(ggplot2)
1625413756432:#setwd("/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2")
1625413756433:directory<-"/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount"
1625413756433:sampleFiles <- grep("DHX8",list.files(directory),value=TRUE)
1625413756447:sampleCondition <- c("siNeg","siDHX8","siNeg","siDHX8")
1625413756448:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1625413756457:sampleTable
1625413756506:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1625413761283:#countData <- read.csv('/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/2raw_counts_table.csv', header = TRUE, sep = ",")
1625413761284:#head(countData)
1625413761284:#metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625413761285:#row.names(countData) <- countData$Gene_ID
1625413761285:#dds <- DESeqDataSetFromMatrix(countData=sampleFiles,
1625413761286:#                              colData=metaData,
1625413761286:#                              design=~dex, tidy = TRUE)
1625413761287:dds<-DESeq(ddsHTSeq)
1625413812771:res <- results(dds)
1625413815903:head(results(dds, tidy=TRUE))
1625413818926:summary(res)
1625413818971:res <- res[order(res$padj),]
1625413819108:head(res)
1625413819180:resSig <- res[ which(res$padj < 0.1 ), ]
1625413819189:library("RColorBrewer")
1625413819231:library( "gplots" )
1625413819265:hist( res$pvalue, breaks=20, col="grey" )
1625413820297:rld <- rlog( dds )
1625413847699:assay(rld)[ 1:4, 1:4]
1625413865266:assay(rld)[ 1:4, 1:4]
1625413866621:plot( log2( 1+counts(dds, normalized=TRUE)[, 1:2] ), col="#00000020", pch=20, cex=0.3 )
1625413895497:plot( assay(rld)[, 1:2], col="#00000020", pch=20, cex=0.3 )
1625413911114:sampleDists <- dist( t( assay(rld) ) )
1625413911599:sampleDistMatrix <- as.matrix( sampleDists )
1625413911629:colours = colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
1625413911661:heatmap.2( sampleDistMatrix, trace="none", col=colours, margins = c(12, 12),)
1625413913972:plotMA(dds,ylim=c(-5,5),main="DESeq2")
1625414247805:colours = colorRampPalette( rev(brewer.pal(9, "Reds")) )(255)
1625414251368:heatmap.2( sampleDistMatrix, trace="none", col=colours, margins = c(12, 12),)
1625414253120:plotMA(dds,ylim=c(-5,5),main="DESeq2")
1625464039523:install.packages("htmltools")
1625464049329:library(htmltools)
1625464050133:library( "DESeq2" )
1625464050560:library(ggplot2)
1625464050612:#setwd("/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2")
1625464050613:directory<-"/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount"
1625464050613:sampleFiles <- grep("DHX8",list.files(directory),value=TRUE)
1625464050615:sampleCondition <- c("siNeg","siDHX8","siNeg","siDHX8")
1625464050616:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1625464050618:sampleTable
1625464050627:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1625464058496:dds<-DESeq(ddsHTSeq)
1625464111627:res <- results(dds)
1625464119146:head(results(dds, tidy=TRUE))
1625464124835:summary(res)
1625464124875:res <- res[order(res$padj),]
1625464124993:head(res)
1625464125065:resSig <- res[ which(res$padj < 0.05 ), ]
1625466015424:par(mfrow=c(2,3))
1625466016524:plotCounts(dds, gene="ENSG00000152583", intgroup="dex")
1625466022375:library( "DESeq2" )
1625466035802:library(htmltools)
1625466035917:library( "DESeq2" )
1625466035918:library(ggplot2)
1625466035984:#setwd("/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2")
1625466035985:directory<-"/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount"
1625466035985:sampleFiles <- grep("DHX8",list.files(directory),value=TRUE)
1625466036028:sampleCondition <- c("siNeg","siDHX8","siNeg","siDHX8")
1625466036029:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1625466036035:sampleTable
1625466036051:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1625466038910:#countData <- read.csv('/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2/2passHTcount/2raw_counts_table.csv', header = TRUE, sep = ",")
1625466038910:#head(countData)
1625466038911:#metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625466038911:#row.names(countData) <- countData$Gene_ID
1625466038912:#dds <- DESeqDataSetFromMatrix(countData=sampleFiles,
1625466038912:#                              colData=metaData,
1625466038912:#                              design=~dex, tidy = TRUE)
1625466038913:dds<-DESeq(ddsHTSeq)
1625466096798:res <- results(dds)
1625466099824:head(results(dds, tidy=TRUE))
1625466101994:summary(res)
1625466102025:res <- res[order(res$padj),]
1625466102152:head(res)
1625466102204:resSig <- res[ which(res$padj < 0.05 ), ]
1625466102210:par(mfrow=c(2,3))
1625479211130:vsdata <- vst(dds, blind=FALSE)
1625479221843:plotPCA(vsdata, intgroup="dex")
1625480565863:par(mfrow=c(2,3))
1625480566959:plotCounts(dds, gene="XM_017002620", intgroup="dex")
1625480671638:head(res)
1625480702930:dds
1625480726384:library(htmltools)
1625480726552:library( "DESeq2" )
1625480727091:library(ggplot2)
1625480727160:setwd("/Users/chrisadore/Desktop")
1625480727163:countData <- read.csv('airway_scaledcounts.csv', header = TRUE, sep = ",")
1625480729005:head(countData)
1625480729021:metaData <- read.csv('airway_metadata.csv', header = TRUE, sep = ",")
1625480729023:metaData
1625480729026:dds <- DESeqDataSetFromMatrix(countData=countData,
1625480729026:colData=metaData,
1625480729027:design=~dex, tidy = TRUE)
1625480729785:dds
1625480729858:dds <- DESeq(dds)
1625480744116:res <- results(dds)
1625480750608:head(results(dds, tidy=TRUE))
1625480755697:summary(res)
1625480755718:res <- res[order(res$padj),]
1625480755748:head(res)
1625481491597:head(res)
1625481494425:summary(res)
1625481522628:View(res)
1625481531725:View(dds)
1625481545015:metaData
1625481637187:sampleTable
1625481652225:plotCounts(dds, gene="XM_017002620", intgroup="condition")
1625481662779:library(htmltools)
1625481663007:library( "DESeq2" )
1625481663715:library(ggplot2)
1625481678230:library(ggplot2)
1625481688577:sampleTable
1625481693935:summary(res)
1625481696334:res <- res[order(res$padj),]
1625481700464:par(mfrow=c(2,3))
1625481701100:plotCounts(dds, gene="XM_017002620", intgroup="condition")
1625481732323:vsdata <- vst(dds, blind=FALSE)
1625481735271:plotPCA(vsdata, intgroup="condition")
1625482401394:hist( res$pvalue, breaks=20, col="grey" )
1625482413168:rld <- rlog( dds )
1625482437026:assay(rld)[ 1:4, 1:4]
1625482437051:plot( log2( 1+counts(dds, normalized=TRUE)[, 1:2] ), col="#00000020", pch=20, cex=0.3 )
1625483330371:plot( assay(rld)[, 1:2], col="#00000020", pch=20, cex=0.3 )
1625487033645:sampleDists <- dist( t( assay(rld) ) )
1625487034807:sampleDistMatrix <- as.matrix( sampleDists )
1625487036070:colours = colorRampPalette( rev(brewer.pal(9, "Reds")) )(255)
1627228604645:install.packages("learnr")
1627232197571:install.packages("htmltools")
1627232204280:library(htmltools)
1627232204581:library( "DESeq2" )
1627232205474:library(ggplot2)
1627232224947:library( DESeq2 )
1627232245358:install.packages("htmltools",'DESeq2','ggplot2')
1627232727797:# Load packages
1627232727886:install.packages("devtools")
1627232769140:devtools::install_github("stephenturner/annotables")
1627232801121:pacman::p_load(annotables,rio,org.Hs.eg.db,DOSE,pathview,clusterProfiler,AnnotationHub,ensembldb,tidyverse)
1627232840107:install.packages("htmltools",'DEseq2','ggplot2')
1627233828043:install.packages("ggplot2")
1631373329337:library(htmltools)
1631373330577:library( DESeq2 )
1631373337472:install.packages("htmltools",'DESeq2','ggplot2')
1631373351738:install.packages("htmltools",'DESeq2','ggplot2')
1631373369608:是
1631373372089:yes
1631373382322:install.packages("htmltools", "DESeq2", "ggplot2")
1631387178891:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1631387178894:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1631387218502:library(DEXSeq,readr)
1631387218522:# 這是star 2p ensemble count
1631387218523:countFiles = list.files(path="/Volumes/Yun/RNA_seq/HTseq/2021", pattern=".count$", full.names = TRUE)
1631387302083:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1631387302089:list.files(pythonScriptsDir)
1631387357597:if (!requireNamespace("BiocManager", quietly = TRUE))
1631387357602:install.packages("BiocManager")
1631387363015:# The following initializes usage of Bioc devel
1631387363016:BiocManager::install(version='devel')
1631387534082:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1631387534093:list.files(pythonScriptsDir)
1631387544644:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1631387558105:list.files(pythonScriptsDir)
1631387589255:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1631387596059:library(DEXSeq,readr)
1631387622359:BiocManager::install("DEXSeq")
1631388897444:library( "DEXSeq" )
1631388961140:library( "DEXSeq" )
1631388984824:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1631388984827:list.files(pythonScriptsDir)
1631389009889:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1631389468558:library( "DESeq2","ggplot2",'htmltools' )
1631389529498:#setwd("/Volumes/TOSHIBA\ EXT/RNAseq1/DEseq2")
1631389529499:directory<-"/Volumes/Yun/RNA_seq/HTseq/2021"
1631389556118:sampleFiles <- grep("*.txt",list.files(directory),value=TRUE)
1631389563435:sampleFiles <- grep(".txt",list.files(directory),value=TRUE)
1631389581882:sampleFiles
1631389588908:sampleFiles <- grep(".count",list.files(directory),value=TRUE)
1631389595271:sampleCondition <- c("siNeg","siDHX8","siNeg","siDHX8")
1631389598393:sampleTable<-data.frame(sampleName= sampleFiles, fileName=sampleFiles, condition=sampleCondition)
1631389601691:sampleTable
1631389605739:ddsHTSeq<-DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory=directory, design=~condition)
1631389615791:#dds <- DESeqDataSetFromMatrix(countData=sampleFiles,
1631389615792:#                              colData=metaData,
1631389615793:#                              design=~dex, tidy = TRUE)
1631389615794:dds<-DESeq(ddsHTSeq)
1631389649512:res <- results(dds)
1631389653365:head(results(dds, tidy=TRUE))
1631389655212:summary(res)
1631389655391:res <- res[order(res$padj),]
1631389655449:head(res)
1631389670692:write.csv(as.data.frame(res), file="/Volumes/Yun/RNA_seq/DEseq2/2021/DEseq_0.05_20210912.csv")
1631389687752:par(mfrow=c(2,3))
1631389689588:plotCounts(dds, gene="XM_017002620", intgroup="condition")
1631389707595:library("RColorBrewer")
1631389708369:library( "gplots" )
1631389709779:hist( res$pvalue, breaks=20, col="grey" )
1631389882220:source("/Volumes/Yun/RNA_seq/DEseq2/2021/DEseq_Sept.R")
1631389963828:library( "gplots" )
1631389963832:hist( res$pvalue, breaks=20, col="grey" )
1631389965317:rld <- rlog( dds )
1631389983613:assay(rld)[ 1:4, 1:4]
1631389983719:plot( log2( 1+counts(dds, normalized=TRUE)[, 1:2] ), col="#00000020", pch=20, cex=0.3 )
1631389986350:plot( assay(rld)[, 1:2], col="#00000020", pch=20, cex=0.3 )
1631389993205:sampleDists <- dist( t( assay(rld) ) )
1631427116840:countFiles = list.files(path="/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021", pattern=".count$", full.names = TRUE)
1631427119479:basename(countFiles)
1631427151270:countFiles = list.files(path="/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021", pattern="count.txt$", full.names = TRUE)
1631427152133:basename(countFiles)
1631427162960:# Loading data frame, data.frame不同欄可放入不同屬性資料
1631427162961:sampleTable = data.frame(
1631427162963:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1631427162963:condition = c("control", "knockdown", "control", "knockdown"),
1631427162964:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1631427162965:)
1631427166573:sampleTable
1631427176885:flattenedFile=list.files(path = "/Volumes/TOSHIBA EXT/RNAseq1/FA_GTF/", pattern=".gff$", full.names = TRUE)
1631427179682:basename(flattenedFile)
1631427205218:flattenedFile=list.files(path = "/Volumes/Yun/RNA_seq/FA_GTF/", pattern=".gff$", full.names = TRUE)
1631427206411:basename(flattenedFile)
1631427208361:dnd = DEXSeqDataSetFromHTSeq(
1631427208362:countFiles,
1631427208362:sampleData = sampleTable,
1631427208363:design= ~ sample + exon + condition:exon,
1631427208363:flattenedfile = flattenedFile)
1631427246937:library( "DEXSeq" )
1631427418412:dnd = DEXSeqDataSetFromHTSeq(
1631427418414:countFiles,
1631427418415:sampleData = sampleTable,
1631427418416:design= ~ sample + exon + condition:exon,
1631427418417:flattenedfile = flattenedFile)
1631427732572:genes <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEseq_padj0.05_genelist.txt",
1631427732580:stringsAsFactors=FALSE)[[1]]
1631427888136:exon <- dnd[geneIDs( dnd ) %in% genes,]
1631427897694:colData(exon)
1631427897709:head(counts(exon), 5)
1631427897714:head( rowRanges(exon), 10 )
1631427897717:sampleAnnotation( exon )
1631427897728:Normalisation = estimateSizeFactors( exon )
1631427897731:Normalisation
1631427897733:sizeFactors(Normalisation)
1631427897738:#每個樣本的讀段總數mapped read
1631427897741:colSums(counts(Normalisation))
1631427897746:Dispersion = estimateDispersions( Normalisation )
1631427897749:Dispersion
1631427897754:plotDispEsts(Dispersion)
1631427897756:mcols(Dispersion)
1631427897757:write.csv(Dispersion, "/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/Dispersion.csv", row.names = FALSE)
1631427897762:#5 Testing for differential exon usage
1631427897763:deu = testForDEU( Dispersion )
1631427897765:deu
1631427897766:colData(deu)
1631427897769:#評估 relative exon usage fold changes
1631427897769:#based on the coefficients of a GLM fit that uses the formula
1631427897770:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1631427897771:foldchange
1631427897771:mcols(foldchange)
1631427897773:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1631427897773:dxr2 = DEXSeqResults( foldchange )
1631427897775:dxr1
1631427897776:write.csv(dxr1, "/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXseq_padj_0912.csv", row.names = FALSE)
1631427897777:# dnr = DEXSeq(foldchange)
1631427897778:# class:查詢物件的類別
1631427897778:class(dnr)
1631427897779:dxr1
1631427897779:#abs()絕對值
1631427897780:# padj=FDR
1631427897780:table ( dxr1$padj < 0.05, dxr1$log2fold_knockdown_control < abs(2) )
1631427897781:#這裡看多少exon有符合FDR<0.1，所以數目才那麼多
1631427897782:table ( tapply( dxr1$padj < 0.1,  dxr1$log2fold_knockdown_control, dxr1$groupID, any ) )
1631427897784:?( dxr1$padj < 0.1 )
1631427898386:plotMA(dxr1)
1631427898388:#legend=TRUE會有顯示control和KD的圖標
1631427898390:plotDEXSeq( dxr2, "ENSG00000085999", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1631427898392:#displayTranscripts=FALSE跟前一個圖一樣，不會有transcripts
1631427898393:plotDEXSeq( dxr2, "ENSG00000051180", displayTranscripts=TRUE, legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1631427898394:#expression=FALSE只會出現normalized counts
1631427898394:#norCounts=FALSE不會顯示normalized counts
1631427898395:# splicing=TRUE is exon usage
1631427898395:plotDEXSeq( dxr2, "ENSG00000197299", expression=TRUE, splicing=TRUE,
1631427898396:legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
1631427898398:# "Expression" is the expression strength of the gene
1631427898401:# i.e., simply the average number of (normalized) reads that map to the sample in a given condition
1631427898402:# "Exon usage" is an exon's usage, compared to all the other exons of the same gene
1631427898403:#這裡把第一行弄成表格
1631427898404:a <- as.data.frame(dxr1[dxr1$padj < 0.1 & !is.na(dxr1$padj),])
1631427898408:a
1631427898409:write.csv(a, "DEXseq_2021/padj0.1.csv", row.names = FALSE)
1631427898410:library(dplyr)
1631427898585:# %>% 代表一連串work flow
1631427898586:# a.genes <- exons of a gene
1631427898586:a.genes <- a %>%
1631427898586:select(groupID, featureID) %>%
1631427898586:group_by(groupID) %>%
1631427898587:mutate(featureID_by_groupID = paste(featureID, collapse = ",")) %>%
1631427898587:select(-featureID) %>%
1631427898588:unique()
1631427898589:write.csv(a.genes, "DEXseq_2021/a.genes.csv", row.names = FALSE)
1631427898590:DEXSeqHTML( dxr2, FDR=0.1,path="html", file="testForDEU.html",
1631427898590:fitExpToVar="condition", color=c("#FF000080", "#0000FF80") )
1631427926122:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1631427926122:exon <- dnd[geneIDs( dnd ) %in% genes,]
1631427965662:genes <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEseq_padj0.05_genelist.txt",
1631427965663:stringsAsFactors=FALSE)[[1]]
1631427967571:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1631427967572:exon <- dnd[geneIDs( dnd ) %in% genes,]
1631428154595:genes <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEseq_padj0.05_genelist.txt",
1631428154597:stringsAsFactors=FALSE)[[1]]
1631428155564:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1631428155565:exon <- dnd[geneIDs( dnd ) %in% genes,]
1631428165316:genes
1631428204598:genes <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEseq_padj0.05_genelist.txt",
1631428204600:stringsAsFactors=FALSE)[[1]]
1631428261380:source("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXSeq_no_strand.R")
1631428359100:genesForSubset <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEseq_padj0.05_genelist.txt",
1631428359102:stringsAsFactors=FALSE)[[1]]
1631428359131:dxd = DEXSeqDataSetFromHTSeq(
1631428359132:countFiles,
1631428359132:sampleData = sampleTable,
1631428359133:design= ~ sample + exon + condition:exon,
1631428359133:flattenedfile = flattenedFile)
1631428449159:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1631428449179:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1631428450804:View(sampleTable)
1631428615600:genesForSubset <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEseq_padj0.05_genelist.txt",
1631428615601:stringsAsFactors=FALSE)[[1]]
1631428617456:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1631428617457:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1631428953821:genesForSubset <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/a.txt",
1631428953827:stringsAsFactors=FALSE)[[1]]
1631428954731:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1631428954731:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1631428960840:colData(dxd)
1631428964010:head(counts(dxd), 5)
1631428964711:head( rowRanges(dxd), 10 )
1631428966558:sampleAnnotation( dxd )
1631428975100:Normalisation = estimateSizeFactors( dxd )
1631428979539:Normalisation
1631428979789:sizeFactors(Normalisation)
1631428979856:#每個樣本的讀段總數mapped read
1631428979856:colSums(counts(Normalisation))
1631428979919:Dispersion = estimateDispersions( Normalisation )
1631429640871:Dispersion
1631429641023:plotDispEsts(Dispersion)
1631429660640:mcols(Dispersion)
1631429676033:write.csv(Dispersion, "/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/Dispersion.csv", row.names = FALSE)
1631429676044:#5 Testing for differential exon usage
1631429676045:deu = testForDEU( Dispersion )
1631429710637:deu
1631429710782:colData(deu)
1631429710805:#評估 relative exon usage fold changes
1631429710806:#based on the coefficients of a GLM fit that uses the formula
1631429710806:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1631430490230:foldchange
1631430490442:mcols(foldchange)
1631430490584:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1631430490587:dxr2 = DEXSeqResults( foldchange )
1631430498226:dxr1
1631430498230:write.csv(dxr1, "/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXseq_padj_0912.csv", row.names = FALSE)
1631438484547:deu
1631438500121:head(counts(dxd), 5)
1631438527055:#對代碼有問題用warnings()去匡著想知道的地方跑看看
1631438527056:pacman::p_load(rio,pheatmap,Hmisc,dplyr,ggplot2)
1631438531231:library( "DEXSeq" )
1631438542158:# /Applications/DEXSeq/python_scripts/*.py
1631438542159:# 這是star 2p ensemble count
1631438542160:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1631438542162:list.files(pythonScriptsDir)
1631438542164:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1631438542167:countFiles = list.files(path="/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021", pattern="count.txt$", full.names = TRUE)
1631438542203:basename(countFiles)
1631438542205:# Loading data frame, data.frame不同欄可放入不同屬性資料
1631438542205:sampleTable = data.frame(
1631438542207:row.names = c("control1", "knockdown2", "control3", "knockdown4"),
1631438542207:condition = c("control", "knockdown", "control", "knockdown"),
1631438542208:libType = c("paired-end", "paired-end", "paired-end", "paired-end")
1631438542208:)
1631438542210:sampleTable
1631438542217:#write.csv(sampleTable, "DEXseq/sampleTable.csv", row.names = FALSE)
1631438542217:flattenedFile=list.files(path = "/Volumes/Yun/RNA_seq/FA_GTF/", pattern=".gff$", full.names = TRUE)
1631438542227:basename(flattenedFile)
1631438542228:dxd = DEXSeqDataSetFromHTSeq(
1631438542228:countFiles,
1631438542229:sampleData = sampleTable,
1631438542229:design= ~ sample + exon + condition:exon,
1631438542230:flattenedfile = flattenedFile)
1631438631826:genesForSubset <- read.table("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/a.txt",
1631438631830:stringsAsFactors=FALSE)[[1]]
1631438631895:# 資料框預設會將文字的內容以因素向量儲存，要把內容修正為文字可使用stringsAsFactors=FALSE ============================
1631438631895:dxd = dxd[geneIDs( dxd ) %in% genesForSubset,]
1631438635729:colData(dxd)
1631438635758:head(counts(dxd), 5)
1631438635794:head( rowRanges(dxd), 10 )
1631438635893:sampleAnnotation( dxd )
1631438636172:Normalisation = estimateSizeFactors( dxd )
1631438639463:Normalisation
1631438639596:sizeFactors(Normalisation)
1631438639645:#每個樣本的讀段總數mapped read
1631438639646:colSums(counts(Normalisation))
1631438639682:Dispersion = estimateDispersions( Normalisation )
1631439194877:Dispersion
1631439195038:plotDispEsts(Dispersion)
1631439207991:mcols(Dispersion)
1631439208069:write.csv(Dispersion, "/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/Dispersion.csv", row.names = FALSE)
1631439241843:dxr1 = DEXSeqResults( foldchange )
1631439241845:dxr1
1631439241846:write.csv(dxr1, "/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXseq_padj_0912.csv", row.names = FALSE)
1631439241853:table ( dxr1$padj < 0.05, dxr1$log2fold_knockdown_control < abs(2) )
1631439241856:#這裡看多少exon有符合FDR<0.1，所以數目才那麼多
1631439241856:table ( tapply( dxr1$padj < 0.1,  dxr1$log2fold_knockdown_control, dxr1$groupID, any ) )
1631439241861:?( dxr1$padj < 0.1 )
1631439255415:plotMA(dxr1)
1631439255418:source("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXSeq_no_strand.R")
1631440227318:#評估 relative exon usage fold changes
1631440227329:#based on the coefficients of a GLM fit that uses the formula
1631440227330:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1631440232099:#5 Testing for differential exon usage
1631440232099:deu = testForDEU( Dispersion )
1631440359173:deu
1631440360634:colData(deu)
1631440362349:#評估 relative exon usage fold changes
1631440362349:#based on the coefficients of a GLM fit that uses the formula
1631440362350:foldchange = estimateExonFoldChanges( deu, fitExpToVar="condition")
1631459133738:foldchange
1631459136943:mcols(foldchange)
1631459139022:#不要顯示中間步驟的value，用DEXSeqResults,求得padj value
1631459139023:dxr1 = DEXSeqResults( foldchange )
1631459152456:dxr1
1631459153953:write.csv(dxr1, "/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXseq_padj_0912.csv", row.names = FALSE)
1631459176944:#abs()絕對值
1631459176946:# padj=FDR
1631459176947:table ( dxr1$padj < 0.05, dxr1$log2fold_knockdown_control < abs(2) )
1631459187386:#這裡看多少exon有符合FDR<0.1，所以數目才那麼多
1631459187387:table ( tapply( dxr1$padj < 0.1,  dxr1$log2fold_knockdown_control, dxr1$groupID, any ) )
1631459194736:?( dxr1$padj < 0.1 )
1631459207115:dxr1
1631459216859:plotMA(dxr1)
1631459356867:mcols(dxr1)$description
1631459388660:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1631459391321:table ( tapply( dxr1$padj < 0.1, dxr1$groupID, any ) )
1631459394435:#這裡看多少exon有符合FDR<0.1，所以數目才那麼多
1631459394436:table ( tapply( dxr1$padj < 0.1,  dxr1$log2fold_knockdown_control, dxr1$groupID, any ) )
1631459423870:#abs()絕對值
1631459423879:# padj=FDR
1631459423879:table ( dxr1$padj < 0.05, dxr1$log2fold_knockdown_control < abs(2) )
1631459457963:source("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXSeq_no_strand.R")
1631459664511:plotMA(dxr1,cex=0.8 )
1631459673114:plotMA(dxr1,cex=0.8 )
1631459747195:DEXSeqHTML( dxr1, FDR=0.1,path="html", file="testForDEU.html",
1631459747198:fitExpToVar="condition", color=c("#FF000080", "#0000FF80") )
1631459757104:source("/Volumes/Yun/RNA_seq/DEXseq/DEXseq_2021/DEXSeq_no_strand.R")
1634112887081:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1634112887086:list.files(pythonScriptsDir)
1634112916855:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1636621325536:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1636621325541:list.files(pythonScriptsDir)
1636621336417:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1636621360084:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1636642017572:plot(cars)
1636642049002:plot(cars)
1636652853208:pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
1636652853278:list.files(pythonScriptsDir)
1636653375906:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1636655184249:system.file() -h
1636655197482:help("system.file")
1636655232757:help("list.files")
1636655291136:help("path.expand")
1636655428709:getwd()
1636655461556:getwd()
1636655461560:list.files()
1636656297928:path = getwd()
1636656298169:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656298186:countFiles = list.files()
1636656319363:path = getwd()
1636656319374:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656319386:countFiles = list.files()
1636656336794:path = getwd()
1636656336799:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656336803:countFiles = list.files(inDir)
1636656356509:system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
1636656393155:help("list.files")
1636656440279:path = getwd()
1636656440285:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656440295:list.files()
1636656440334:countFiles = list.files(inDir)
1636656500062:list.files()
1636656504251:path = getwd()
1636656504933:path = getwd()
1636656512313:getwd()
1636656565146:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656565152:countFiles = list.files(inDir,pattern=".txt$", full.names=TRUE)
1636656568160:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656568165:countFiles = list.files(inDir,pattern=".txt$", full.names=TRUE)
1636656578884:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656578889:countFiles = list.files(inDir,pattern=".txt$", full.names=TRUE)
1636656578895:basename(countFiles)
1636656586659:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656586666:countFiles = list.files(inDir,pattern=".gff$", full.names=TRUE)
1636656586672:basename(countFiles)
1636656595769:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656595774:countFiles = list.files(inDir,pattern="l.gff$", full.names=TRUE)
1636656595780:basename(countFiles)
1636656638353:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656638359:countFiles = list.files(/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam,pattern=".gff$", full.names=TRUE)
1636656656838:inDir = /Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam
1636656667257:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656667265:countFiles = list.files(inDir,pattern=".gff$", full.names=TRUE)
1636656667277:basename(countFiles)
1636656687652:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656687657:countFiles = list.files(path = inDir,pattern=".gff$", full.names=TRUE)
1636656687661:basename(countFiles)
1636656705204:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656705213:countFiles = list.files(path = /Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam, pattern=".gff$", full.names=TRUE)
1636656716584:inDir = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam"
1636656716589:countFiles = list.files(path = "/Users/chrisadore/OneDrive - 國立台灣大學/15thland/star2_en_bam",pattern=".gff$", full.names=TRUE)
1636656716594:basename(countFiles)
